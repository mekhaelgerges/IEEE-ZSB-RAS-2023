
KDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003546  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00003546  000035ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002808  00000000  00000000  00003634  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000ba7  00000000  00000000  00005e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000069e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00006b43  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00006cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008d17  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000ad9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000af1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000b1de  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ba6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <main>
      7a:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a5 eb       	ldi	r26, 0xB5	; 181
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	85 eb       	ldi	r24, 0xB5	; 181
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 86 1a 	jmp	0x350c	; 0x350c <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 72 1a 	jmp	0x34e4	; 0x34e4 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	65 eb       	ldi	r22, 0xB5	; 181
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 76 1a 	jmp	0x34ec	; 0x34ec <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 7a 1a 	jmp	0x34f4	; 0x34f4 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 96 1a 	jmp	0x352c	; 0x352c <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DC_MOTOR_u8rotatedirection>:
 /*HAL*/
 #include "DC_MOTOR_config.h"
 #include"DC_MOTOR_interface.h"
 #include"DC_MOTOR_privat.h"
u8 DC_MOTOR_u8rotatedirection(u8 copy_u8direction)
{u8 local_u8ErrorState = STD_TYBES_OK;
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	6f 97       	sbiw	r28, 0x1f	; 31
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	8f 8f       	std	Y+31, r24	; 0x1f
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	8e 8f       	std	Y+30, r24	; 0x1e
if (copy_u8direction==DC_MOTOR_FORWARD)
     ca8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     caa:	81 30       	cpi	r24, 0x01	; 1
     cac:	09 f0       	breq	.+2      	; 0xcb0 <DC_MOTOR_u8rotatedirection+0x22>
     cae:	7d c0       	rjmp	.+250    	; 0xdaa <DC_MOTOR_u8rotatedirection+0x11c>
    {

       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN1,DIO_u8_HIGH);
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	41 e0       	ldi	r20, 0x01	; 1
     cb6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN2,DIO_u8_LOW);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	40 e0       	ldi	r20, 0x00	; 0
     cc0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	a8 e4       	ldi	r26, 0x48	; 72
     cca:	b3 e4       	ldi	r27, 0x43	; 67
     ccc:	89 8f       	std	Y+25, r24	; 0x19
     cce:	9a 8f       	std	Y+26, r25	; 0x1a
     cd0:	ab 8f       	std	Y+27, r26	; 0x1b
     cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd4:	69 8d       	ldd	r22, Y+25	; 0x19
     cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	4a e7       	ldi	r20, 0x7A	; 122
     ce2:	53 e4       	ldi	r21, 0x43	; 67
     ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	8d 8b       	std	Y+21, r24	; 0x15
     cee:	9e 8b       	std	Y+22, r25	; 0x16
     cf0:	af 8b       	std	Y+23, r26	; 0x17
     cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cf4:	6d 89       	ldd	r22, Y+21	; 0x15
     cf6:	7e 89       	ldd	r23, Y+22	; 0x16
     cf8:	8f 89       	ldd	r24, Y+23	; 0x17
     cfa:	98 8d       	ldd	r25, Y+24	; 0x18
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	40 e8       	ldi	r20, 0x80	; 128
     d02:	5f e3       	ldi	r21, 0x3F	; 63
     d04:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d08:	88 23       	and	r24, r24
     d0a:	2c f4       	brge	.+10     	; 0xd16 <DC_MOTOR_u8rotatedirection+0x88>
		__ticks = 1;
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9c 8b       	std	Y+20, r25	; 0x14
     d12:	8b 8b       	std	Y+19, r24	; 0x13
     d14:	3f c0       	rjmp	.+126    	; 0xd94 <DC_MOTOR_u8rotatedirection+0x106>
	else if (__tmp > 65535)
     d16:	6d 89       	ldd	r22, Y+21	; 0x15
     d18:	7e 89       	ldd	r23, Y+22	; 0x16
     d1a:	8f 89       	ldd	r24, Y+23	; 0x17
     d1c:	98 8d       	ldd	r25, Y+24	; 0x18
     d1e:	20 e0       	ldi	r18, 0x00	; 0
     d20:	3f ef       	ldi	r19, 0xFF	; 255
     d22:	4f e7       	ldi	r20, 0x7F	; 127
     d24:	57 e4       	ldi	r21, 0x47	; 71
     d26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d2a:	18 16       	cp	r1, r24
     d2c:	4c f5       	brge	.+82     	; 0xd80 <DC_MOTOR_u8rotatedirection+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2e:	69 8d       	ldd	r22, Y+25	; 0x19
     d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	40 e2       	ldi	r20, 0x20	; 32
     d3c:	51 e4       	ldi	r21, 0x41	; 65
     d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d4e:	dc 01       	movw	r26, r24
     d50:	cb 01       	movw	r24, r22
     d52:	9c 8b       	std	Y+20, r25	; 0x14
     d54:	8b 8b       	std	Y+19, r24	; 0x13
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <DC_MOTOR_u8rotatedirection+0xe8>
     d58:	89 e1       	ldi	r24, 0x19	; 25
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d60:	89 89       	ldd	r24, Y+17	; 0x11
     d62:	9a 89       	ldd	r25, Y+18	; 0x12
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	f1 f7       	brne	.-4      	; 0xd64 <DC_MOTOR_u8rotatedirection+0xd6>
     d68:	9a 8b       	std	Y+18, r25	; 0x12
     d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6c:	8b 89       	ldd	r24, Y+19	; 0x13
     d6e:	9c 89       	ldd	r25, Y+20	; 0x14
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d76:	8b 89       	ldd	r24, Y+19	; 0x13
     d78:	9c 89       	ldd	r25, Y+20	; 0x14
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	69 f7       	brne	.-38     	; 0xd58 <DC_MOTOR_u8rotatedirection+0xca>
     d7e:	97 c0       	rjmp	.+302    	; 0xeae <DC_MOTOR_u8rotatedirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	6d 89       	ldd	r22, Y+21	; 0x15
     d82:	7e 89       	ldd	r23, Y+22	; 0x16
     d84:	8f 89       	ldd	r24, Y+23	; 0x17
     d86:	98 8d       	ldd	r25, Y+24	; 0x18
     d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
     d94:	8b 89       	ldd	r24, Y+19	; 0x13
     d96:	9c 89       	ldd	r25, Y+20	; 0x14
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
     d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d9e:	98 89       	ldd	r25, Y+16	; 0x10
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	f1 f7       	brne	.-4      	; 0xda0 <DC_MOTOR_u8rotatedirection+0x112>
     da4:	98 8b       	std	Y+16, r25	; 0x10
     da6:	8f 87       	std	Y+15, r24	; 0x0f
     da8:	82 c0       	rjmp	.+260    	; 0xeae <DC_MOTOR_u8rotatedirection+0x220>
       _delay_ms(200);
    }
else if (copy_u8direction==DC_MOTOR_REVERSE)
     daa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dac:	88 23       	and	r24, r24
     dae:	09 f0       	breq	.+2      	; 0xdb2 <DC_MOTOR_u8rotatedirection+0x124>
     db0:	7d c0       	rjmp	.+250    	; 0xeac <DC_MOTOR_u8rotatedirection+0x21e>
    {
        DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN1,DIO_u8_LOW);
     db2:	82 e0       	ldi	r24, 0x02	; 2
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN2,DIO_u8_HIGH);
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a8 e4       	ldi	r26, 0x48	; 72
     dcc:	b3 e4       	ldi	r27, 0x43	; 67
     dce:	8b 87       	std	Y+11, r24	; 0x0b
     dd0:	9c 87       	std	Y+12, r25	; 0x0c
     dd2:	ad 87       	std	Y+13, r26	; 0x0d
     dd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dda:	8d 85       	ldd	r24, Y+13	; 0x0d
     ddc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	4a e7       	ldi	r20, 0x7A	; 122
     de4:	53 e4       	ldi	r21, 0x43	; 67
     de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	8f 83       	std	Y+7, r24	; 0x07
     df0:	98 87       	std	Y+8, r25	; 0x08
     df2:	a9 87       	std	Y+9, r26	; 0x09
     df4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df6:	6f 81       	ldd	r22, Y+7	; 0x07
     df8:	78 85       	ldd	r23, Y+8	; 0x08
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e8       	ldi	r20, 0x80	; 128
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e0a:	88 23       	and	r24, r24
     e0c:	2c f4       	brge	.+10     	; 0xe18 <DC_MOTOR_u8rotatedirection+0x18a>
		__ticks = 1;
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	9e 83       	std	Y+6, r25	; 0x06
     e14:	8d 83       	std	Y+5, r24	; 0x05
     e16:	3f c0       	rjmp	.+126    	; 0xe96 <DC_MOTOR_u8rotatedirection+0x208>
	else if (__tmp > 65535)
     e18:	6f 81       	ldd	r22, Y+7	; 0x07
     e1a:	78 85       	ldd	r23, Y+8	; 0x08
     e1c:	89 85       	ldd	r24, Y+9	; 0x09
     e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e20:	20 e0       	ldi	r18, 0x00	; 0
     e22:	3f ef       	ldi	r19, 0xFF	; 255
     e24:	4f e7       	ldi	r20, 0x7F	; 127
     e26:	57 e4       	ldi	r21, 0x47	; 71
     e28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e2c:	18 16       	cp	r1, r24
     e2e:	4c f5       	brge	.+82     	; 0xe82 <DC_MOTOR_u8rotatedirection+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e30:	6b 85       	ldd	r22, Y+11	; 0x0b
     e32:	7c 85       	ldd	r23, Y+12	; 0x0c
     e34:	8d 85       	ldd	r24, Y+13	; 0x0d
     e36:	9e 85       	ldd	r25, Y+14	; 0x0e
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	bc 01       	movw	r22, r24
     e4a:	cd 01       	movw	r24, r26
     e4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	9e 83       	std	Y+6, r25	; 0x06
     e56:	8d 83       	std	Y+5, r24	; 0x05
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <DC_MOTOR_u8rotatedirection+0x1ea>
     e5a:	89 e1       	ldi	r24, 0x19	; 25
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	9c 83       	std	Y+4, r25	; 0x04
     e60:	8b 83       	std	Y+3, r24	; 0x03
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	f1 f7       	brne	.-4      	; 0xe66 <DC_MOTOR_u8rotatedirection+0x1d8>
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	9e 83       	std	Y+6, r25	; 0x06
     e76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	00 97       	sbiw	r24, 0x00	; 0
     e7e:	69 f7       	brne	.-38     	; 0xe5a <DC_MOTOR_u8rotatedirection+0x1cc>
     e80:	16 c0       	rjmp	.+44     	; 0xeae <DC_MOTOR_u8rotatedirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e82:	6f 81       	ldd	r22, Y+7	; 0x07
     e84:	78 85       	ldd	r23, Y+8	; 0x08
     e86:	89 85       	ldd	r24, Y+9	; 0x09
     e88:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e8e:	dc 01       	movw	r26, r24
     e90:	cb 01       	movw	r24, r22
     e92:	9e 83       	std	Y+6, r25	; 0x06
     e94:	8d 83       	std	Y+5, r24	; 0x05
     e96:	8d 81       	ldd	r24, Y+5	; 0x05
     e98:	9e 81       	ldd	r25, Y+6	; 0x06
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	9a 81       	ldd	r25, Y+2	; 0x02
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	f1 f7       	brne	.-4      	; 0xea2 <DC_MOTOR_u8rotatedirection+0x214>
     ea6:	9a 83       	std	Y+2, r25	; 0x02
     ea8:	89 83       	std	Y+1, r24	; 0x01
     eaa:	01 c0       	rjmp	.+2      	; 0xeae <DC_MOTOR_u8rotatedirection+0x220>
       _delay_ms(200);
    }
else{u8 localErrorState = STD_TYBES_NOK;}
     eac:	1d 8e       	std	Y+29, r1	; 0x1d
return local_u8ErrorState;}
     eae:	8e 8d       	ldd	r24, Y+30	; 0x1e
     eb0:	6f 96       	adiw	r28, 0x1f	; 31
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	de bf       	out	0x3e, r29	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	cd bf       	out	0x3d, r28	; 61
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <KPD_u8GetKeyState>:

const u8 KDP_Au8RowsPins[4]={KDP_u8_R1_PIN,KDP_u8_R2_PIN,KDP_u8_R3_PIN,KDP_u8_R4_PIN};
const u8 KDP_Au8ColsPins[4]={KDP_u8_C1_PIN,KDP_u8_C2_PIN,KDP_u8_C3_PIN,KDP_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* copy_pu8ReturnedKey)
{u8 localErrorState = STD_TYBES_OK;
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	67 97       	sbiw	r28, 0x17	; 23
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	9e 8b       	std	Y+22, r25	; 0x16
     ed8:	8d 8b       	std	Y+21, r24	; 0x15
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8b 8b       	std	Y+19, r24	; 0x13
 u8 local_u8RowsCounter,local_u8ColsCounter,Local_u8PinValue,Local_u8Flag=0;
     ede:	18 8a       	std	Y+16, r1	; 0x10
 if(copy_pu8ReturnedKey!=NULL)
     ee0:	8d 89       	ldd	r24, Y+21	; 0x15
     ee2:	9e 89       	ldd	r25, Y+22	; 0x16
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	09 f4       	brne	.+2      	; 0xeea <KPD_u8GetKeyState+0x28>
     ee8:	f0 c0       	rjmp	.+480    	; 0x10ca <KPD_u8GetKeyState+0x208>
 {
	 *copy_pu8ReturnedKey = KPD_KEY_NOT_PRESSED;
     eea:	ed 89       	ldd	r30, Y+21	; 0x15
     eec:	fe 89       	ldd	r31, Y+22	; 0x16
     eee:	8f ef       	ldi	r24, 0xFF	; 255
     ef0:	80 83       	st	Z, r24
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
     ef2:	1a 8a       	std	Y+18, r1	; 0x12
     ef4:	e5 c0       	rjmp	.+458    	; 0x10c0 <KPD_u8GetKeyState+0x1fe>
     {
         DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_LOW);
     ef6:	8a 89       	ldd	r24, Y+18	; 0x12
     ef8:	88 2f       	mov	r24, r24
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	fc 01       	movw	r30, r24
     efe:	e3 53       	subi	r30, 0x33	; 51
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	90 81       	ld	r25, Z
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	69 2f       	mov	r22, r25
     f08:	40 e0       	ldi	r20, 0x00	; 0
     f0a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
         /*Check Which input pins Has a zero*/
         for(local_u8ColsCounter=0;local_u8ColsCounter<=3;local_u8ColsCounter++)
     f0e:	19 8a       	std	Y+17, r1	; 0x11
     f10:	c1 c0       	rjmp	.+386    	; 0x1094 <KPD_u8GetKeyState+0x1d2>
         {
         DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
     f12:	89 89       	ldd	r24, Y+17	; 0x11
     f14:	88 2f       	mov	r24, r24
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	fc 01       	movw	r30, r24
     f1a:	ef 52       	subi	r30, 0x2F	; 47
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	90 81       	ld	r25, Z
     f20:	9e 01       	movw	r18, r28
     f22:	2c 5e       	subi	r18, 0xEC	; 236
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	69 2f       	mov	r22, r25
     f2a:	a9 01       	movw	r20, r18
     f2c:	0e 94 6f 18 	call	0x30de	; 0x30de <DIO_u8GetPinValue>
             if(Local_u8PinValue==DIO_u8_LOW)/*Switch is pressed*/
     f30:	8c 89       	ldd	r24, Y+20	; 0x14
     f32:	88 23       	and	r24, r24
     f34:	09 f0       	breq	.+2      	; 0xf38 <KPD_u8GetKeyState+0x76>
     f36:	ab c0       	rjmp	.+342    	; 0x108e <KPD_u8GetKeyState+0x1cc>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a0 ea       	ldi	r26, 0xA0	; 160
     f3e:	b1 e4       	ldi	r27, 0x41	; 65
     f40:	8b 87       	std	Y+11, r24	; 0x0b
     f42:	9c 87       	std	Y+12, r25	; 0x0c
     f44:	ad 87       	std	Y+13, r26	; 0x0d
     f46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f48:	6b 85       	ldd	r22, Y+11	; 0x0b
     f4a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a ef       	ldi	r20, 0xFA	; 250
     f56:	54 e4       	ldi	r21, 0x44	; 68
     f58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	8f 83       	std	Y+7, r24	; 0x07
     f62:	98 87       	std	Y+8, r25	; 0x08
     f64:	a9 87       	std	Y+9, r26	; 0x09
     f66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e8       	ldi	r20, 0x80	; 128
     f76:	5f e3       	ldi	r21, 0x3F	; 63
     f78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f7c:	88 23       	and	r24, r24
     f7e:	2c f4       	brge	.+10     	; 0xf8a <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	3f c0       	rjmp	.+126    	; 0x1008 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	3f ef       	ldi	r19, 0xFF	; 255
     f96:	4f e7       	ldi	r20, 0x7F	; 127
     f98:	57 e4       	ldi	r21, 0x47	; 71
     f9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	4c f5       	brge	.+82     	; 0xff4 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e2       	ldi	r20, 0x20	; 32
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	bc 01       	movw	r22, r24
     fbc:	cd 01       	movw	r24, r26
     fbe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
     fca:	0f c0       	rjmp	.+30     	; 0xfea <KPD_u8GetKeyState+0x128>
     fcc:	88 ec       	ldi	r24, 0xC8	; 200
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	9c 83       	std	Y+4, r25	; 0x04
     fd2:	8b 83       	std	Y+3, r24	; 0x03
     fd4:	8b 81       	ldd	r24, Y+3	; 0x03
     fd6:	9c 81       	ldd	r25, Y+4	; 0x04
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <KPD_u8GetKeyState+0x116>
     fdc:	9c 83       	std	Y+4, r25	; 0x04
     fde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe0:	8d 81       	ldd	r24, Y+5	; 0x05
     fe2:	9e 81       	ldd	r25, Y+6	; 0x06
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	69 f7       	brne	.-38     	; 0xfcc <KPD_u8GetKeyState+0x10a>
     ff2:	14 c0       	rjmp	.+40     	; 0x101c <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff4:	6f 81       	ldd	r22, Y+7	; 0x07
     ff6:	78 85       	ldd	r23, Y+8	; 0x08
     ff8:	89 85       	ldd	r24, Y+9	; 0x09
     ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e 83       	std	Y+6, r25	; 0x06
    1006:	8d 83       	std	Y+5, r24	; 0x05
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	9a 83       	std	Y+2, r25	; 0x02
    100e:	89 83       	std	Y+1, r24	; 0x01
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	9a 81       	ldd	r25, Y+2	; 0x02
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <KPD_u8GetKeyState+0x152>
    1018:	9a 83       	std	Y+2, r25	; 0x02
    101a:	89 83       	std	Y+1, r24	; 0x01
                  {
                /*Debouncing*/
            _delay_ms(20);
            DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
    101c:	89 89       	ldd	r24, Y+17	; 0x11
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	ef 52       	subi	r30, 0x2F	; 47
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	90 81       	ld	r25, Z
    102a:	9e 01       	movw	r18, r28
    102c:	2c 5e       	subi	r18, 0xEC	; 236
    102e:	3f 4f       	sbci	r19, 0xFF	; 255
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	69 2f       	mov	r22, r25
    1034:	a9 01       	movw	r20, r18
    1036:	0e 94 6f 18 	call	0x30de	; 0x30de <DIO_u8GetPinValue>
    103a:	0f c0       	rjmp	.+30     	; 0x105a <KPD_u8GetKeyState+0x198>
            /*CHEACK if the pin is still equal low*/
            while(Local_u8PinValue==DIO_u8_LOW)
            {
                DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
    103c:	89 89       	ldd	r24, Y+17	; 0x11
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	ef 52       	subi	r30, 0x2F	; 47
    1046:	ff 4f       	sbci	r31, 0xFF	; 255
    1048:	90 81       	ld	r25, Z
    104a:	9e 01       	movw	r18, r28
    104c:	2c 5e       	subi	r18, 0xEC	; 236
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	69 2f       	mov	r22, r25
    1054:	a9 01       	movw	r20, r18
    1056:	0e 94 6f 18 	call	0x30de	; 0x30de <DIO_u8GetPinValue>
                  {
                /*Debouncing*/
            _delay_ms(20);
            DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
            /*CHEACK if the pin is still equal low*/
            while(Local_u8PinValue==DIO_u8_LOW)
    105a:	8c 89       	ldd	r24, Y+20	; 0x14
    105c:	88 23       	and	r24, r24
    105e:	71 f3       	breq	.-36     	; 0x103c <KPD_u8GetKeyState+0x17a>
            {
                DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
            }
            *copy_pu8ReturnedKey=KPD_Au8Keys[local_u8RowsCounter][local_u8ColsCounter];
    1060:	8a 89       	ldd	r24, Y+18	; 0x12
    1062:	48 2f       	mov	r20, r24
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	89 89       	ldd	r24, Y+17	; 0x11
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	ca 01       	movw	r24, r20
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	82 0f       	add	r24, r18
    1078:	93 1f       	adc	r25, r19
    107a:	fc 01       	movw	r30, r24
    107c:	e3 54       	subi	r30, 0x43	; 67
    107e:	ff 4f       	sbci	r31, 0xFF	; 255
    1080:	80 81       	ld	r24, Z
    1082:	ed 89       	ldd	r30, Y+21	; 0x15
    1084:	fe 89       	ldd	r31, Y+22	; 0x16
    1086:	80 83       	st	Z, r24
            Local_u8Flag=1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	88 8b       	std	Y+16, r24	; 0x10
    108c:	07 c0       	rjmp	.+14     	; 0x109c <KPD_u8GetKeyState+0x1da>
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
     {
         DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_LOW);
         /*Check Which input pins Has a zero*/
         for(local_u8ColsCounter=0;local_u8ColsCounter<=3;local_u8ColsCounter++)
    108e:	89 89       	ldd	r24, Y+17	; 0x11
    1090:	8f 5f       	subi	r24, 0xFF	; 255
    1092:	89 8b       	std	Y+17, r24	; 0x11
    1094:	89 89       	ldd	r24, Y+17	; 0x11
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	08 f4       	brcc	.+2      	; 0x109c <KPD_u8GetKeyState+0x1da>
    109a:	3b cf       	rjmp	.-394    	; 0xf12 <KPD_u8GetKeyState+0x50>
            break;

                   }

            }
                 DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_HIGH);
    109c:	8a 89       	ldd	r24, Y+18	; 0x12
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	fc 01       	movw	r30, r24
    10a4:	e3 53       	subi	r30, 0x33	; 51
    10a6:	ff 4f       	sbci	r31, 0xFF	; 255
    10a8:	90 81       	ld	r25, Z
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	69 2f       	mov	r22, r25
    10ae:	41 e0       	ldi	r20, 0x01	; 1
    10b0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
                       if(Local_u8Flag==1)
    10b4:	88 89       	ldd	r24, Y+16	; 0x10
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	49 f0       	breq	.+18     	; 0x10cc <KPD_u8GetKeyState+0x20a>
 u8 local_u8RowsCounter,local_u8ColsCounter,Local_u8PinValue,Local_u8Flag=0;
 if(copy_pu8ReturnedKey!=NULL)
 {
	 *copy_pu8ReturnedKey = KPD_KEY_NOT_PRESSED;
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
    10ba:	8a 89       	ldd	r24, Y+18	; 0x12
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	8a 8b       	std	Y+18, r24	; 0x12
    10c0:	8a 89       	ldd	r24, Y+18	; 0x12
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	08 f4       	brcc	.+2      	; 0x10c8 <KPD_u8GetKeyState+0x206>
    10c6:	17 cf       	rjmp	.-466    	; 0xef6 <KPD_u8GetKeyState+0x34>
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <KPD_u8GetKeyState+0x20a>
                         {
                         	 break;
                          }
     }
}
 else{u8 localErrorState = STD_TYBES_NOK;}
    10ca:	1f 86       	std	Y+15, r1	; 0x0f
}
    10cc:	67 96       	adiw	r28, 0x17	; 23
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <LCD_voidInit>:
 #include "LCD_config.h"
 #include"LCD_interface.h"
 #include"LCD_private.h"

  void LCD_voidInit(void)
  {
    10de:	0f 93       	push	r16
    10e0:	1f 93       	push	r17
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	c6 55       	subi	r28, 0x56	; 86
    10ec:	d0 40       	sbci	r29, 0x00	; 0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	f8 94       	cli
    10f2:	de bf       	out	0x3e, r29	; 62
    10f4:	0f be       	out	0x3f, r0	; 63
    10f6:	cd bf       	out	0x3d, r28	; 61
    10f8:	fe 01       	movw	r30, r28
    10fa:	ed 5a       	subi	r30, 0xAD	; 173
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	ac e0       	ldi	r26, 0x0C	; 12
    1104:	b2 e4       	ldi	r27, 0x42	; 66
    1106:	80 83       	st	Z, r24
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	a2 83       	std	Z+2, r26	; 0x02
    110c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    110e:	8e 01       	movw	r16, r28
    1110:	01 5b       	subi	r16, 0xB1	; 177
    1112:	1f 4f       	sbci	r17, 0xFF	; 255
    1114:	fe 01       	movw	r30, r28
    1116:	ed 5a       	subi	r30, 0xAD	; 173
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	60 81       	ld	r22, Z
    111c:	71 81       	ldd	r23, Z+1	; 0x01
    111e:	82 81       	ldd	r24, Z+2	; 0x02
    1120:	93 81       	ldd	r25, Z+3	; 0x03
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a e7       	ldi	r20, 0x7A	; 122
    1128:	53 e4       	ldi	r21, 0x43	; 67
    112a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	f8 01       	movw	r30, r16
    1134:	80 83       	st	Z, r24
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	a2 83       	std	Z+2, r26	; 0x02
    113a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    113c:	fe 01       	movw	r30, r28
    113e:	e1 5b       	subi	r30, 0xB1	; 177
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1156:	88 23       	and	r24, r24
    1158:	44 f4       	brge	.+16     	; 0x116a <LCD_voidInit+0x8c>
		__ticks = 1;
    115a:	fe 01       	movw	r30, r28
    115c:	e3 5b       	subi	r30, 0xB3	; 179
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
    1168:	64 c0       	rjmp	.+200    	; 0x1232 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    116a:	fe 01       	movw	r30, r28
    116c:	e1 5b       	subi	r30, 0xB1	; 177
    116e:	ff 4f       	sbci	r31, 0xFF	; 255
    1170:	60 81       	ld	r22, Z
    1172:	71 81       	ldd	r23, Z+1	; 0x01
    1174:	82 81       	ldd	r24, Z+2	; 0x02
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	3f ef       	ldi	r19, 0xFF	; 255
    117c:	4f e7       	ldi	r20, 0x7F	; 127
    117e:	57 e4       	ldi	r21, 0x47	; 71
    1180:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1184:	18 16       	cp	r1, r24
    1186:	0c f0       	brlt	.+2      	; 0x118a <LCD_voidInit+0xac>
    1188:	43 c0       	rjmp	.+134    	; 0x1210 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118a:	fe 01       	movw	r30, r28
    118c:	ed 5a       	subi	r30, 0xAD	; 173
    118e:	ff 4f       	sbci	r31, 0xFF	; 255
    1190:	60 81       	ld	r22, Z
    1192:	71 81       	ldd	r23, Z+1	; 0x01
    1194:	82 81       	ldd	r24, Z+2	; 0x02
    1196:	93 81       	ldd	r25, Z+3	; 0x03
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e2       	ldi	r20, 0x20	; 32
    119e:	51 e4       	ldi	r21, 0x41	; 65
    11a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	8e 01       	movw	r16, r28
    11aa:	03 5b       	subi	r16, 0xB3	; 179
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	bc 01       	movw	r22, r24
    11b0:	cd 01       	movw	r24, r26
    11b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	f8 01       	movw	r30, r16
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
    11c0:	1f c0       	rjmp	.+62     	; 0x1200 <LCD_voidInit+0x122>
    11c2:	fe 01       	movw	r30, r28
    11c4:	e5 5b       	subi	r30, 0xB5	; 181
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	89 e1       	ldi	r24, 0x19	; 25
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	91 83       	std	Z+1, r25	; 0x01
    11ce:	80 83       	st	Z, r24
    11d0:	fe 01       	movw	r30, r28
    11d2:	e5 5b       	subi	r30, 0xB5	; 181
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_voidInit+0xfc>
    11de:	fe 01       	movw	r30, r28
    11e0:	e5 5b       	subi	r30, 0xB5	; 181
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e8:	de 01       	movw	r26, r28
    11ea:	a3 5b       	subi	r26, 0xB3	; 179
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fe 01       	movw	r30, r28
    11f0:	e3 5b       	subi	r30, 0xB3	; 179
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	91 81       	ldd	r25, Z+1	; 0x01
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	11 96       	adiw	r26, 0x01	; 1
    11fc:	9c 93       	st	X, r25
    11fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1200:	fe 01       	movw	r30, r28
    1202:	e3 5b       	subi	r30, 0xB3	; 179
    1204:	ff 4f       	sbci	r31, 0xFF	; 255
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	d1 f6       	brne	.-76     	; 0x11c2 <LCD_voidInit+0xe4>
    120e:	27 c0       	rjmp	.+78     	; 0x125e <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1210:	8e 01       	movw	r16, r28
    1212:	03 5b       	subi	r16, 0xB3	; 179
    1214:	1f 4f       	sbci	r17, 0xFF	; 255
    1216:	fe 01       	movw	r30, r28
    1218:	e1 5b       	subi	r30, 0xB1	; 177
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	60 81       	ld	r22, Z
    121e:	71 81       	ldd	r23, Z+1	; 0x01
    1220:	82 81       	ldd	r24, Z+2	; 0x02
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	f8 01       	movw	r30, r16
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
    1232:	de 01       	movw	r26, r28
    1234:	a7 5b       	subi	r26, 0xB7	; 183
    1236:	bf 4f       	sbci	r27, 0xFF	; 255
    1238:	fe 01       	movw	r30, r28
    123a:	e3 5b       	subi	r30, 0xB3	; 179
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	8d 93       	st	X+, r24
    1244:	9c 93       	st	X, r25
    1246:	fe 01       	movw	r30, r28
    1248:	e7 5b       	subi	r30, 0xB7	; 183
    124a:	ff 4f       	sbci	r31, 0xFF	; 255
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	f1 f7       	brne	.-4      	; 0x1250 <LCD_voidInit+0x172>
    1254:	fe 01       	movw	r30, r28
    1256:	e7 5b       	subi	r30, 0xB7	; 183
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
       _delay_ms(35);
       /*FUNCTION SET CMND*/
       LCD_voidSendCmnd(0B00111000);
    125e:	88 e3       	ldi	r24, 0x38	; 56
    1260:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>
    1264:	fe 01       	movw	r30, r28
    1266:	eb 5b       	subi	r30, 0xBB	; 187
    1268:	ff 4f       	sbci	r31, 0xFF	; 255
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a0 e2       	ldi	r26, 0x20	; 32
    1270:	b2 e4       	ldi	r27, 0x42	; 66
    1272:	80 83       	st	Z, r24
    1274:	91 83       	std	Z+1, r25	; 0x01
    1276:	a2 83       	std	Z+2, r26	; 0x02
    1278:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    127a:	8e 01       	movw	r16, r28
    127c:	0f 5b       	subi	r16, 0xBF	; 191
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	fe 01       	movw	r30, r28
    1282:	eb 5b       	subi	r30, 0xBB	; 187
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	60 81       	ld	r22, Z
    1288:	71 81       	ldd	r23, Z+1	; 0x01
    128a:	82 81       	ldd	r24, Z+2	; 0x02
    128c:	93 81       	ldd	r25, Z+3	; 0x03
    128e:	2b ea       	ldi	r18, 0xAB	; 171
    1290:	3a ea       	ldi	r19, 0xAA	; 170
    1292:	4a ea       	ldi	r20, 0xAA	; 170
    1294:	5e e3       	ldi	r21, 0x3E	; 62
    1296:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	80 83       	st	Z, r24
    12a2:	91 83       	std	Z+1, r25	; 0x01
    12a4:	a2 83       	std	Z+2, r26	; 0x02
    12a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12a8:	fe 01       	movw	r30, r28
    12aa:	ef 5b       	subi	r30, 0xBF	; 191
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	60 81       	ld	r22, Z
    12b0:	71 81       	ldd	r23, Z+1	; 0x01
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	93 81       	ldd	r25, Z+3	; 0x03
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e8       	ldi	r20, 0x80	; 128
    12bc:	5f e3       	ldi	r21, 0x3F	; 63
    12be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12c2:	88 23       	and	r24, r24
    12c4:	34 f4       	brge	.+12     	; 0x12d2 <LCD_voidInit+0x1f4>
		__ticks = 1;
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	fe 01       	movw	r30, r28
    12ca:	e0 5c       	subi	r30, 0xC0	; 192
    12cc:	ff 4f       	sbci	r31, 0xFF	; 255
    12ce:	80 83       	st	Z, r24
    12d0:	9d c0       	rjmp	.+314    	; 0x140c <LCD_voidInit+0x32e>
	else if (__tmp > 255)
    12d2:	fe 01       	movw	r30, r28
    12d4:	ef 5b       	subi	r30, 0xBF	; 191
    12d6:	ff 4f       	sbci	r31, 0xFF	; 255
    12d8:	60 81       	ld	r22, Z
    12da:	71 81       	ldd	r23, Z+1	; 0x01
    12dc:	82 81       	ldd	r24, Z+2	; 0x02
    12de:	93 81       	ldd	r25, Z+3	; 0x03
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	4f e7       	ldi	r20, 0x7F	; 127
    12e6:	53 e4       	ldi	r21, 0x43	; 67
    12e8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <LCD_voidInit+0x214>
    12f0:	7e c0       	rjmp	.+252    	; 0x13ee <LCD_voidInit+0x310>
	{
		_delay_ms(__us / 1000.0);
    12f2:	fe 01       	movw	r30, r28
    12f4:	eb 5b       	subi	r30, 0xBB	; 187
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	60 81       	ld	r22, Z
    12fa:	71 81       	ldd	r23, Z+1	; 0x01
    12fc:	82 81       	ldd	r24, Z+2	; 0x02
    12fe:	93 81       	ldd	r25, Z+3	; 0x03
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a e7       	ldi	r20, 0x7A	; 122
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8c af       	std	Y+60, r24	; 0x3c
    1312:	9d af       	std	Y+61, r25	; 0x3d
    1314:	ae af       	std	Y+62, r26	; 0x3e
    1316:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1318:	6c ad       	ldd	r22, Y+60	; 0x3c
    131a:	7d ad       	ldd	r23, Y+61	; 0x3d
    131c:	8e ad       	ldd	r24, Y+62	; 0x3e
    131e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4a e7       	ldi	r20, 0x7A	; 122
    1326:	53 e4       	ldi	r21, 0x43	; 67
    1328:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    132c:	dc 01       	movw	r26, r24
    132e:	cb 01       	movw	r24, r22
    1330:	88 af       	std	Y+56, r24	; 0x38
    1332:	99 af       	std	Y+57, r25	; 0x39
    1334:	aa af       	std	Y+58, r26	; 0x3a
    1336:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1338:	68 ad       	ldd	r22, Y+56	; 0x38
    133a:	79 ad       	ldd	r23, Y+57	; 0x39
    133c:	8a ad       	ldd	r24, Y+58	; 0x3a
    133e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e8       	ldi	r20, 0x80	; 128
    1346:	5f e3       	ldi	r21, 0x3F	; 63
    1348:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    134c:	88 23       	and	r24, r24
    134e:	2c f4       	brge	.+10     	; 0x135a <LCD_voidInit+0x27c>
		__ticks = 1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	9f ab       	std	Y+55, r25	; 0x37
    1356:	8e ab       	std	Y+54, r24	; 0x36
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    135a:	68 ad       	ldd	r22, Y+56	; 0x38
    135c:	79 ad       	ldd	r23, Y+57	; 0x39
    135e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1360:	9b ad       	ldd	r25, Y+59	; 0x3b
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	4f e7       	ldi	r20, 0x7F	; 127
    1368:	57 e4       	ldi	r21, 0x47	; 71
    136a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    136e:	18 16       	cp	r1, r24
    1370:	4c f5       	brge	.+82     	; 0x13c4 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1372:	6c ad       	ldd	r22, Y+60	; 0x3c
    1374:	7d ad       	ldd	r23, Y+61	; 0x3d
    1376:	8e ad       	ldd	r24, Y+62	; 0x3e
    1378:	9f ad       	ldd	r25, Y+63	; 0x3f
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e2       	ldi	r20, 0x20	; 32
    1380:	51 e4       	ldi	r21, 0x41	; 65
    1382:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	bc 01       	movw	r22, r24
    138c:	cd 01       	movw	r24, r26
    138e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	9f ab       	std	Y+55, r25	; 0x37
    1398:	8e ab       	std	Y+54, r24	; 0x36
    139a:	0f c0       	rjmp	.+30     	; 0x13ba <LCD_voidInit+0x2dc>
    139c:	89 e1       	ldi	r24, 0x19	; 25
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	9d ab       	std	Y+53, r25	; 0x35
    13a2:	8c ab       	std	Y+52, r24	; 0x34
    13a4:	8c a9       	ldd	r24, Y+52	; 0x34
    13a6:	9d a9       	ldd	r25, Y+53	; 0x35
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <LCD_voidInit+0x2ca>
    13ac:	9d ab       	std	Y+53, r25	; 0x35
    13ae:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b0:	8e a9       	ldd	r24, Y+54	; 0x36
    13b2:	9f a9       	ldd	r25, Y+55	; 0x37
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	9f ab       	std	Y+55, r25	; 0x37
    13b8:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ba:	8e a9       	ldd	r24, Y+54	; 0x36
    13bc:	9f a9       	ldd	r25, Y+55	; 0x37
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	69 f7       	brne	.-38     	; 0x139c <LCD_voidInit+0x2be>
    13c2:	2d c0       	rjmp	.+90     	; 0x141e <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c4:	68 ad       	ldd	r22, Y+56	; 0x38
    13c6:	79 ad       	ldd	r23, Y+57	; 0x39
    13c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    13ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	9f ab       	std	Y+55, r25	; 0x37
    13d6:	8e ab       	std	Y+54, r24	; 0x36
    13d8:	8e a9       	ldd	r24, Y+54	; 0x36
    13da:	9f a9       	ldd	r25, Y+55	; 0x37
    13dc:	9b ab       	std	Y+51, r25	; 0x33
    13de:	8a ab       	std	Y+50, r24	; 0x32
    13e0:	8a a9       	ldd	r24, Y+50	; 0x32
    13e2:	9b a9       	ldd	r25, Y+51	; 0x33
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <LCD_voidInit+0x306>
    13e8:	9b ab       	std	Y+51, r25	; 0x33
    13ea:	8a ab       	std	Y+50, r24	; 0x32
    13ec:	18 c0       	rjmp	.+48     	; 0x141e <LCD_voidInit+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13ee:	fe 01       	movw	r30, r28
    13f0:	ef 5b       	subi	r30, 0xBF	; 191
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	fe 01       	movw	r30, r28
    1406:	e0 5c       	subi	r30, 0xC0	; 192
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	80 83       	st	Z, r24
    140c:	fe 01       	movw	r30, r28
    140e:	e0 5c       	subi	r30, 0xC0	; 192
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	80 81       	ld	r24, Z
    1414:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1416:	89 a9       	ldd	r24, Y+49	; 0x31
    1418:	8a 95       	dec	r24
    141a:	f1 f7       	brne	.-4      	; 0x1418 <LCD_voidInit+0x33a>
    141c:	89 ab       	std	Y+49, r24	; 0x31
       _delay_us(40);
       LCD_voidSendCmnd(0b00001111);
    141e:	8f e0       	ldi	r24, 0x0F	; 15
    1420:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>
    1424:	80 e0       	ldi	r24, 0x00	; 0
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e2       	ldi	r26, 0x20	; 32
    142a:	b2 e4       	ldi	r27, 0x42	; 66
    142c:	8d a7       	std	Y+45, r24	; 0x2d
    142e:	9e a7       	std	Y+46, r25	; 0x2e
    1430:	af a7       	std	Y+47, r26	; 0x2f
    1432:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1434:	6d a5       	ldd	r22, Y+45	; 0x2d
    1436:	7e a5       	ldd	r23, Y+46	; 0x2e
    1438:	8f a5       	ldd	r24, Y+47	; 0x2f
    143a:	98 a9       	ldd	r25, Y+48	; 0x30
    143c:	2b ea       	ldi	r18, 0xAB	; 171
    143e:	3a ea       	ldi	r19, 0xAA	; 170
    1440:	4a ea       	ldi	r20, 0xAA	; 170
    1442:	5e e3       	ldi	r21, 0x3E	; 62
    1444:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	89 a7       	std	Y+41, r24	; 0x29
    144e:	9a a7       	std	Y+42, r25	; 0x2a
    1450:	ab a7       	std	Y+43, r26	; 0x2b
    1452:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1454:	69 a5       	ldd	r22, Y+41	; 0x29
    1456:	7a a5       	ldd	r23, Y+42	; 0x2a
    1458:	8b a5       	ldd	r24, Y+43	; 0x2b
    145a:	9c a5       	ldd	r25, Y+44	; 0x2c
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e8       	ldi	r20, 0x80	; 128
    1462:	5f e3       	ldi	r21, 0x3F	; 63
    1464:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1468:	88 23       	and	r24, r24
    146a:	1c f4       	brge	.+6      	; 0x1472 <LCD_voidInit+0x394>
		__ticks = 1;
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	88 a7       	std	Y+40, r24	; 0x28
    1470:	91 c0       	rjmp	.+290    	; 0x1594 <LCD_voidInit+0x4b6>
	else if (__tmp > 255)
    1472:	69 a5       	ldd	r22, Y+41	; 0x29
    1474:	7a a5       	ldd	r23, Y+42	; 0x2a
    1476:	8b a5       	ldd	r24, Y+43	; 0x2b
    1478:	9c a5       	ldd	r25, Y+44	; 0x2c
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	4f e7       	ldi	r20, 0x7F	; 127
    1480:	53 e4       	ldi	r21, 0x43	; 67
    1482:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1486:	18 16       	cp	r1, r24
    1488:	0c f0       	brlt	.+2      	; 0x148c <LCD_voidInit+0x3ae>
    148a:	7b c0       	rjmp	.+246    	; 0x1582 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    148c:	6d a5       	ldd	r22, Y+45	; 0x2d
    148e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1490:	8f a5       	ldd	r24, Y+47	; 0x2f
    1492:	98 a9       	ldd	r25, Y+48	; 0x30
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	4a e7       	ldi	r20, 0x7A	; 122
    149a:	54 e4       	ldi	r21, 0x44	; 68
    149c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	8c a3       	std	Y+36, r24	; 0x24
    14a6:	9d a3       	std	Y+37, r25	; 0x25
    14a8:	ae a3       	std	Y+38, r26	; 0x26
    14aa:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6c a1       	ldd	r22, Y+36	; 0x24
    14ae:	7d a1       	ldd	r23, Y+37	; 0x25
    14b0:	8e a1       	ldd	r24, Y+38	; 0x26
    14b2:	9f a1       	ldd	r25, Y+39	; 0x27
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a e7       	ldi	r20, 0x7A	; 122
    14ba:	53 e4       	ldi	r21, 0x43	; 67
    14bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	88 a3       	std	Y+32, r24	; 0x20
    14c6:	99 a3       	std	Y+33, r25	; 0x21
    14c8:	aa a3       	std	Y+34, r26	; 0x22
    14ca:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    14cc:	68 a1       	ldd	r22, Y+32	; 0x20
    14ce:	79 a1       	ldd	r23, Y+33	; 0x21
    14d0:	8a a1       	ldd	r24, Y+34	; 0x22
    14d2:	9b a1       	ldd	r25, Y+35	; 0x23
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <LCD_voidInit+0x410>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9f 8f       	std	Y+31, r25	; 0x1f
    14ea:	8e 8f       	std	Y+30, r24	; 0x1e
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <LCD_voidInit+0x48e>
	else if (__tmp > 65535)
    14ee:	68 a1       	ldd	r22, Y+32	; 0x20
    14f0:	79 a1       	ldd	r23, Y+33	; 0x21
    14f2:	8a a1       	ldd	r24, Y+34	; 0x22
    14f4:	9b a1       	ldd	r25, Y+35	; 0x23
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <LCD_voidInit+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6c a1       	ldd	r22, Y+36	; 0x24
    1508:	7d a1       	ldd	r23, Y+37	; 0x25
    150a:	8e a1       	ldd	r24, Y+38	; 0x26
    150c:	9f a1       	ldd	r25, Y+39	; 0x27
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9f 8f       	std	Y+31, r25	; 0x1f
    152c:	8e 8f       	std	Y+30, r24	; 0x1e
    152e:	0f c0       	rjmp	.+30     	; 0x154e <LCD_voidInit+0x470>
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9d 8f       	std	Y+29, r25	; 0x1d
    1536:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	8c 8d       	ldd	r24, Y+28	; 0x1c
    153a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_voidInit+0x45e>
    1540:	9d 8f       	std	Y+29, r25	; 0x1d
    1542:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1546:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9f 8f       	std	Y+31, r25	; 0x1f
    154c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1550:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <LCD_voidInit+0x452>
    1556:	24 c0       	rjmp	.+72     	; 0x15a0 <LCD_voidInit+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	68 a1       	ldd	r22, Y+32	; 0x20
    155a:	79 a1       	ldd	r23, Y+33	; 0x21
    155c:	8a a1       	ldd	r24, Y+34	; 0x22
    155e:	9b a1       	ldd	r25, Y+35	; 0x23
    1560:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9f 8f       	std	Y+31, r25	; 0x1f
    156a:	8e 8f       	std	Y+30, r24	; 0x1e
    156c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    156e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1570:	9b 8f       	std	Y+27, r25	; 0x1b
    1572:	8a 8f       	std	Y+26, r24	; 0x1a
    1574:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1576:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <LCD_voidInit+0x49a>
    157c:	9b 8f       	std	Y+27, r25	; 0x1b
    157e:	8a 8f       	std	Y+26, r24	; 0x1a
    1580:	0f c0       	rjmp	.+30     	; 0x15a0 <LCD_voidInit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1582:	69 a5       	ldd	r22, Y+41	; 0x29
    1584:	7a a5       	ldd	r23, Y+42	; 0x2a
    1586:	8b a5       	ldd	r24, Y+43	; 0x2b
    1588:	9c a5       	ldd	r25, Y+44	; 0x2c
    158a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	88 a7       	std	Y+40, r24	; 0x28
    1594:	88 a5       	ldd	r24, Y+40	; 0x28
    1596:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1598:	89 8d       	ldd	r24, Y+25	; 0x19
    159a:	8a 95       	dec	r24
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_voidInit+0x4bc>
    159e:	89 8f       	std	Y+25, r24	; 0x19
       _delay_us(40);
       LCD_voidSendCmnd(0x01);
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 ea       	ldi	r26, 0xA0	; 160
    15ac:	b0 e4       	ldi	r27, 0x40	; 64
    15ae:	8d 8b       	std	Y+21, r24	; 0x15
    15b0:	9e 8b       	std	Y+22, r25	; 0x16
    15b2:	af 8b       	std	Y+23, r26	; 0x17
    15b4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    15b6:	6d 89       	ldd	r22, Y+21	; 0x15
    15b8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ba:	8f 89       	ldd	r24, Y+23	; 0x17
    15bc:	98 8d       	ldd	r25, Y+24	; 0x18
    15be:	2b ea       	ldi	r18, 0xAB	; 171
    15c0:	3a ea       	ldi	r19, 0xAA	; 170
    15c2:	4a ea       	ldi	r20, 0xAA	; 170
    15c4:	5e e3       	ldi	r21, 0x3E	; 62
    15c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	89 8b       	std	Y+17, r24	; 0x11
    15d0:	9a 8b       	std	Y+18, r25	; 0x12
    15d2:	ab 8b       	std	Y+19, r26	; 0x13
    15d4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    15d6:	69 89       	ldd	r22, Y+17	; 0x11
    15d8:	7a 89       	ldd	r23, Y+18	; 0x12
    15da:	8b 89       	ldd	r24, Y+19	; 0x13
    15dc:	9c 89       	ldd	r25, Y+20	; 0x14
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	1c f4       	brge	.+6      	; 0x15f4 <LCD_voidInit+0x516>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	88 8b       	std	Y+16, r24	; 0x10
    15f2:	91 c0       	rjmp	.+290    	; 0x1716 <LCD_voidInit+0x638>
	else if (__tmp > 255)
    15f4:	69 89       	ldd	r22, Y+17	; 0x11
    15f6:	7a 89       	ldd	r23, Y+18	; 0x12
    15f8:	8b 89       	ldd	r24, Y+19	; 0x13
    15fa:	9c 89       	ldd	r25, Y+20	; 0x14
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	4f e7       	ldi	r20, 0x7F	; 127
    1602:	53 e4       	ldi	r21, 0x43	; 67
    1604:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1608:	18 16       	cp	r1, r24
    160a:	0c f0       	brlt	.+2      	; 0x160e <LCD_voidInit+0x530>
    160c:	7b c0       	rjmp	.+246    	; 0x1704 <LCD_voidInit+0x626>
	{
		_delay_ms(__us / 1000.0);
    160e:	6d 89       	ldd	r22, Y+21	; 0x15
    1610:	7e 89       	ldd	r23, Y+22	; 0x16
    1612:	8f 89       	ldd	r24, Y+23	; 0x17
    1614:	98 8d       	ldd	r25, Y+24	; 0x18
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	54 e4       	ldi	r21, 0x44	; 68
    161e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8c 87       	std	Y+12, r24	; 0x0c
    1628:	9d 87       	std	Y+13, r25	; 0x0d
    162a:	ae 87       	std	Y+14, r26	; 0x0e
    162c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1630:	7d 85       	ldd	r23, Y+13	; 0x0d
    1632:	8e 85       	ldd	r24, Y+14	; 0x0e
    1634:	9f 85       	ldd	r25, Y+15	; 0x0f
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	53 e4       	ldi	r21, 0x43	; 67
    163e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	88 87       	std	Y+8, r24	; 0x08
    1648:	99 87       	std	Y+9, r25	; 0x09
    164a:	aa 87       	std	Y+10, r26	; 0x0a
    164c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    164e:	68 85       	ldd	r22, Y+8	; 0x08
    1650:	79 85       	ldd	r23, Y+9	; 0x09
    1652:	8a 85       	ldd	r24, Y+10	; 0x0a
    1654:	9b 85       	ldd	r25, Y+11	; 0x0b
    1656:	20 e0       	ldi	r18, 0x00	; 0
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	40 e8       	ldi	r20, 0x80	; 128
    165c:	5f e3       	ldi	r21, 0x3F	; 63
    165e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1662:	88 23       	and	r24, r24
    1664:	2c f4       	brge	.+10     	; 0x1670 <LCD_voidInit+0x592>
		__ticks = 1;
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	9f 83       	std	Y+7, r25	; 0x07
    166c:	8e 83       	std	Y+6, r24	; 0x06
    166e:	3f c0       	rjmp	.+126    	; 0x16ee <LCD_voidInit+0x610>
	else if (__tmp > 65535)
    1670:	68 85       	ldd	r22, Y+8	; 0x08
    1672:	79 85       	ldd	r23, Y+9	; 0x09
    1674:	8a 85       	ldd	r24, Y+10	; 0x0a
    1676:	9b 85       	ldd	r25, Y+11	; 0x0b
    1678:	20 e0       	ldi	r18, 0x00	; 0
    167a:	3f ef       	ldi	r19, 0xFF	; 255
    167c:	4f e7       	ldi	r20, 0x7F	; 127
    167e:	57 e4       	ldi	r21, 0x47	; 71
    1680:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1684:	18 16       	cp	r1, r24
    1686:	4c f5       	brge	.+82     	; 0x16da <LCD_voidInit+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	6c 85       	ldd	r22, Y+12	; 0x0c
    168a:	7d 85       	ldd	r23, Y+13	; 0x0d
    168c:	8e 85       	ldd	r24, Y+14	; 0x0e
    168e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e2       	ldi	r20, 0x20	; 32
    1696:	51 e4       	ldi	r21, 0x41	; 65
    1698:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	9f 83       	std	Y+7, r25	; 0x07
    16ae:	8e 83       	std	Y+6, r24	; 0x06
    16b0:	0f c0       	rjmp	.+30     	; 0x16d0 <LCD_voidInit+0x5f2>
    16b2:	89 e1       	ldi	r24, 0x19	; 25
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	9d 83       	std	Y+5, r25	; 0x05
    16b8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16ba:	8c 81       	ldd	r24, Y+4	; 0x04
    16bc:	9d 81       	ldd	r25, Y+5	; 0x05
    16be:	01 97       	sbiw	r24, 0x01	; 1
    16c0:	f1 f7       	brne	.-4      	; 0x16be <LCD_voidInit+0x5e0>
    16c2:	9d 83       	std	Y+5, r25	; 0x05
    16c4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	9f 83       	std	Y+7, r25	; 0x07
    16ce:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d0:	8e 81       	ldd	r24, Y+6	; 0x06
    16d2:	9f 81       	ldd	r25, Y+7	; 0x07
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	69 f7       	brne	.-38     	; 0x16b2 <LCD_voidInit+0x5d4>
    16d8:	24 c0       	rjmp	.+72     	; 0x1722 <LCD_voidInit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16da:	68 85       	ldd	r22, Y+8	; 0x08
    16dc:	79 85       	ldd	r23, Y+9	; 0x09
    16de:	8a 85       	ldd	r24, Y+10	; 0x0a
    16e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e6:	dc 01       	movw	r26, r24
    16e8:	cb 01       	movw	r24, r22
    16ea:	9f 83       	std	Y+7, r25	; 0x07
    16ec:	8e 83       	std	Y+6, r24	; 0x06
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	9b 83       	std	Y+3, r25	; 0x03
    16f4:	8a 83       	std	Y+2, r24	; 0x02
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <LCD_voidInit+0x61c>
    16fe:	9b 83       	std	Y+3, r25	; 0x03
    1700:	8a 83       	std	Y+2, r24	; 0x02
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <LCD_voidInit+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1704:	69 89       	ldd	r22, Y+17	; 0x11
    1706:	7a 89       	ldd	r23, Y+18	; 0x12
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	9c 89       	ldd	r25, Y+20	; 0x14
    170c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	88 8b       	std	Y+16, r24	; 0x10
    1716:	88 89       	ldd	r24, Y+16	; 0x10
    1718:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	8a 95       	dec	r24
    171e:	f1 f7       	brne	.-4      	; 0x171c <LCD_voidInit+0x63e>
    1720:	89 83       	std	Y+1, r24	; 0x01
       _delay_us(5);
       LCD_voidSendCmnd(0B00000110);
    1722:	86 e0       	ldi	r24, 0x06	; 6
    1724:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>


   }
    1728:	ca 5a       	subi	r28, 0xAA	; 170
    172a:	df 4f       	sbci	r29, 0xFF	; 255
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	08 95       	ret

00001740 <LCD_voidSendCmnd>:


 void LCD_voidSendCmnd(u8 copy_u8Cmnd)
 {
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	69 97       	sbiw	r28, 0x19	; 25
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
    1754:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
     /*step1 Rs=0*/
	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	60 e0       	ldi	r22, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
     /*Rw=0*/
	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	40 e0       	ldi	r20, 0x00	; 0
    1766:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
     /*write comand*/
     DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Cmnd);
    176a:	83 e0       	ldi	r24, 0x03	; 3
    176c:	69 8d       	ldd	r22, Y+25	; 0x19
    176e:	0e 94 c9 19 	call	0x3392	; 0x3392 <DIO_u8SetPortValue>
     /*E=1*/
     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 e8       	ldi	r26, 0x80	; 128
    1782:	bf e3       	ldi	r27, 0x3F	; 63
    1784:	8d 8b       	std	Y+21, r24	; 0x15
    1786:	9e 8b       	std	Y+22, r25	; 0x16
    1788:	af 8b       	std	Y+23, r26	; 0x17
    178a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    178c:	6d 89       	ldd	r22, Y+21	; 0x15
    178e:	7e 89       	ldd	r23, Y+22	; 0x16
    1790:	8f 89       	ldd	r24, Y+23	; 0x17
    1792:	98 8d       	ldd	r25, Y+24	; 0x18
    1794:	2b ea       	ldi	r18, 0xAB	; 171
    1796:	3a ea       	ldi	r19, 0xAA	; 170
    1798:	4a ea       	ldi	r20, 0xAA	; 170
    179a:	5e e3       	ldi	r21, 0x3E	; 62
    179c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	89 8b       	std	Y+17, r24	; 0x11
    17a6:	9a 8b       	std	Y+18, r25	; 0x12
    17a8:	ab 8b       	std	Y+19, r26	; 0x13
    17aa:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    17ac:	69 89       	ldd	r22, Y+17	; 0x11
    17ae:	7a 89       	ldd	r23, Y+18	; 0x12
    17b0:	8b 89       	ldd	r24, Y+19	; 0x13
    17b2:	9c 89       	ldd	r25, Y+20	; 0x14
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	1c f4       	brge	.+6      	; 0x17ca <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	88 8b       	std	Y+16, r24	; 0x10
    17c8:	91 c0       	rjmp	.+290    	; 0x18ec <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    17ca:	69 89       	ldd	r22, Y+17	; 0x11
    17cc:	7a 89       	ldd	r23, Y+18	; 0x12
    17ce:	8b 89       	ldd	r24, Y+19	; 0x13
    17d0:	9c 89       	ldd	r25, Y+20	; 0x14
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <LCD_voidSendCmnd+0xa4>
    17e2:	7b c0       	rjmp	.+246    	; 0x18da <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    17e4:	6d 89       	ldd	r22, Y+21	; 0x15
    17e6:	7e 89       	ldd	r23, Y+22	; 0x16
    17e8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ea:	98 8d       	ldd	r25, Y+24	; 0x18
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a e7       	ldi	r20, 0x7A	; 122
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8c 87       	std	Y+12, r24	; 0x0c
    17fe:	9d 87       	std	Y+13, r25	; 0x0d
    1800:	ae 87       	std	Y+14, r26	; 0x0e
    1802:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1804:	6c 85       	ldd	r22, Y+12	; 0x0c
    1806:	7d 85       	ldd	r23, Y+13	; 0x0d
    1808:	8e 85       	ldd	r24, Y+14	; 0x0e
    180a:	9f 85       	ldd	r25, Y+15	; 0x0f
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a e7       	ldi	r20, 0x7A	; 122
    1812:	53 e4       	ldi	r21, 0x43	; 67
    1814:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	88 87       	std	Y+8, r24	; 0x08
    181e:	99 87       	std	Y+9, r25	; 0x09
    1820:	aa 87       	std	Y+10, r26	; 0x0a
    1822:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1824:	68 85       	ldd	r22, Y+8	; 0x08
    1826:	79 85       	ldd	r23, Y+9	; 0x09
    1828:	8a 85       	ldd	r24, Y+10	; 0x0a
    182a:	9b 85       	ldd	r25, Y+11	; 0x0b
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1838:	88 23       	and	r24, r24
    183a:	2c f4       	brge	.+10     	; 0x1846 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9f 83       	std	Y+7, r25	; 0x07
    1842:	8e 83       	std	Y+6, r24	; 0x06
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1846:	68 85       	ldd	r22, Y+8	; 0x08
    1848:	79 85       	ldd	r23, Y+9	; 0x09
    184a:	8a 85       	ldd	r24, Y+10	; 0x0a
    184c:	9b 85       	ldd	r25, Y+11	; 0x0b
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	4c f5       	brge	.+82     	; 0x18b0 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1860:	7d 85       	ldd	r23, Y+13	; 0x0d
    1862:	8e 85       	ldd	r24, Y+14	; 0x0e
    1864:	9f 85       	ldd	r25, Y+15	; 0x0f
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9f 83       	std	Y+7, r25	; 0x07
    1884:	8e 83       	std	Y+6, r24	; 0x06
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <LCD_voidSendCmnd+0x166>
    1888:	89 e1       	ldi	r24, 0x19	; 25
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9d 83       	std	Y+5, r25	; 0x05
    188e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1890:	8c 81       	ldd	r24, Y+4	; 0x04
    1892:	9d 81       	ldd	r25, Y+5	; 0x05
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_voidSendCmnd+0x154>
    1898:	9d 83       	std	Y+5, r25	; 0x05
    189a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189c:	8e 81       	ldd	r24, Y+6	; 0x06
    189e:	9f 81       	ldd	r25, Y+7	; 0x07
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9f 83       	std	Y+7, r25	; 0x07
    18a4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a6:	8e 81       	ldd	r24, Y+6	; 0x06
    18a8:	9f 81       	ldd	r25, Y+7	; 0x07
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	69 f7       	brne	.-38     	; 0x1888 <LCD_voidSendCmnd+0x148>
    18ae:	24 c0       	rjmp	.+72     	; 0x18f8 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b0:	68 85       	ldd	r22, Y+8	; 0x08
    18b2:	79 85       	ldd	r23, Y+9	; 0x09
    18b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    18b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    18b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9f 83       	std	Y+7, r25	; 0x07
    18c2:	8e 83       	std	Y+6, r24	; 0x06
    18c4:	8e 81       	ldd	r24, Y+6	; 0x06
    18c6:	9f 81       	ldd	r25, Y+7	; 0x07
    18c8:	9b 83       	std	Y+3, r25	; 0x03
    18ca:	8a 83       	std	Y+2, r24	; 0x02
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	9b 81       	ldd	r25, Y+3	; 0x03
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <LCD_voidSendCmnd+0x190>
    18d4:	9b 83       	std	Y+3, r25	; 0x03
    18d6:	8a 83       	std	Y+2, r24	; 0x02
    18d8:	0f c0       	rjmp	.+30     	; 0x18f8 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18da:	69 89       	ldd	r22, Y+17	; 0x11
    18dc:	7a 89       	ldd	r23, Y+18	; 0x12
    18de:	8b 89       	ldd	r24, Y+19	; 0x13
    18e0:	9c 89       	ldd	r25, Y+20	; 0x14
    18e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	88 8b       	std	Y+16, r24	; 0x10
    18ec:	88 89       	ldd	r24, Y+16	; 0x10
    18ee:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	8a 95       	dec	r24
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_voidSendCmnd+0x1b2>
    18f6:	89 83       	std	Y+1, r24	; 0x01
     _delay_us(1);
     /*E=0*/
     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	62 e0       	ldi	r22, 0x02	; 2
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	     	  /*E=0*/
	  DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
#endif


 }
    1902:	69 96       	adiw	r28, 0x19	; 25
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LCD_voidSendChar>:
 void LCD_voidSendChar(u8 copy_u8Char)
 {
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	69 97       	sbiw	r28, 0x19	; 25
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
	 /*step1 Rs=1*/
		 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	     /*Rw=0*/
		 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	     /*write comand*/
	     DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Char);
    193e:	83 e0       	ldi	r24, 0x03	; 3
    1940:	69 8d       	ldd	r22, Y+25	; 0x19
    1942:	0e 94 c9 19 	call	0x3392	; 0x3392 <DIO_u8SetPortValue>
	     /*E=1*/
	     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	62 e0       	ldi	r22, 0x02	; 2
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	a0 e8       	ldi	r26, 0x80	; 128
    1956:	bf e3       	ldi	r27, 0x3F	; 63
    1958:	8d 8b       	std	Y+21, r24	; 0x15
    195a:	9e 8b       	std	Y+22, r25	; 0x16
    195c:	af 8b       	std	Y+23, r26	; 0x17
    195e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	2b ea       	ldi	r18, 0xAB	; 171
    196a:	3a ea       	ldi	r19, 0xAA	; 170
    196c:	4a ea       	ldi	r20, 0xAA	; 170
    196e:	5e e3       	ldi	r21, 0x3E	; 62
    1970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	89 8b       	std	Y+17, r24	; 0x11
    197a:	9a 8b       	std	Y+18, r25	; 0x12
    197c:	ab 8b       	std	Y+19, r26	; 0x13
    197e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1980:	69 89       	ldd	r22, Y+17	; 0x11
    1982:	7a 89       	ldd	r23, Y+18	; 0x12
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	9c 89       	ldd	r25, Y+20	; 0x14
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e8       	ldi	r20, 0x80	; 128
    198e:	5f e3       	ldi	r21, 0x3F	; 63
    1990:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1994:	88 23       	and	r24, r24
    1996:	1c f4       	brge	.+6      	; 0x199e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	88 8b       	std	Y+16, r24	; 0x10
    199c:	91 c0       	rjmp	.+290    	; 0x1ac0 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    199e:	69 89       	ldd	r22, Y+17	; 0x11
    19a0:	7a 89       	ldd	r23, Y+18	; 0x12
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	53 e4       	ldi	r21, 0x43	; 67
    19ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	0c f0       	brlt	.+2      	; 0x19b8 <LCD_voidSendChar+0xa4>
    19b6:	7b c0       	rjmp	.+246    	; 0x1aae <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    19b8:	6d 89       	ldd	r22, Y+21	; 0x15
    19ba:	7e 89       	ldd	r23, Y+22	; 0x16
    19bc:	8f 89       	ldd	r24, Y+23	; 0x17
    19be:	98 8d       	ldd	r25, Y+24	; 0x18
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4a e7       	ldi	r20, 0x7A	; 122
    19c6:	54 e4       	ldi	r21, 0x44	; 68
    19c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	8c 87       	std	Y+12, r24	; 0x0c
    19d2:	9d 87       	std	Y+13, r25	; 0x0d
    19d4:	ae 87       	std	Y+14, r26	; 0x0e
    19d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    19da:	7d 85       	ldd	r23, Y+13	; 0x0d
    19dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    19de:	9f 85       	ldd	r25, Y+15	; 0x0f
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	4a e7       	ldi	r20, 0x7A	; 122
    19e6:	53 e4       	ldi	r21, 0x43	; 67
    19e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ec:	dc 01       	movw	r26, r24
    19ee:	cb 01       	movw	r24, r22
    19f0:	88 87       	std	Y+8, r24	; 0x08
    19f2:	99 87       	std	Y+9, r25	; 0x09
    19f4:	aa 87       	std	Y+10, r26	; 0x0a
    19f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    19f8:	68 85       	ldd	r22, Y+8	; 0x08
    19fa:	79 85       	ldd	r23, Y+9	; 0x09
    19fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    19fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e8       	ldi	r20, 0x80	; 128
    1a06:	5f e3       	ldi	r21, 0x3F	; 63
    1a08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a0c:	88 23       	and	r24, r24
    1a0e:	2c f4       	brge	.+10     	; 0x1a1a <LCD_voidSendChar+0x106>
		__ticks = 1;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9f 83       	std	Y+7, r25	; 0x07
    1a16:	8e 83       	std	Y+6, r24	; 0x06
    1a18:	3f c0       	rjmp	.+126    	; 0x1a98 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1a1a:	68 85       	ldd	r22, Y+8	; 0x08
    1a1c:	79 85       	ldd	r23, Y+9	; 0x09
    1a1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a20:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	3f ef       	ldi	r19, 0xFF	; 255
    1a26:	4f e7       	ldi	r20, 0x7F	; 127
    1a28:	57 e4       	ldi	r21, 0x47	; 71
    1a2a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a2e:	18 16       	cp	r1, r24
    1a30:	4c f5       	brge	.+82     	; 0x1a84 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a32:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a34:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a38:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e2       	ldi	r20, 0x20	; 32
    1a40:	51 e4       	ldi	r21, 0x41	; 65
    1a42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	bc 01       	movw	r22, r24
    1a4c:	cd 01       	movw	r24, r26
    1a4e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	9f 83       	std	Y+7, r25	; 0x07
    1a58:	8e 83       	std	Y+6, r24	; 0x06
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <LCD_voidSendChar+0x166>
    1a5c:	89 e1       	ldi	r24, 0x19	; 25
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	9d 83       	std	Y+5, r25	; 0x05
    1a62:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a64:	8c 81       	ldd	r24, Y+4	; 0x04
    1a66:	9d 81       	ldd	r25, Y+5	; 0x05
    1a68:	01 97       	sbiw	r24, 0x01	; 1
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_voidSendChar+0x154>
    1a6c:	9d 83       	std	Y+5, r25	; 0x05
    1a6e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a70:	8e 81       	ldd	r24, Y+6	; 0x06
    1a72:	9f 81       	ldd	r25, Y+7	; 0x07
    1a74:	01 97       	sbiw	r24, 0x01	; 1
    1a76:	9f 83       	std	Y+7, r25	; 0x07
    1a78:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	69 f7       	brne	.-38     	; 0x1a5c <LCD_voidSendChar+0x148>
    1a82:	24 c0       	rjmp	.+72     	; 0x1acc <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a84:	68 85       	ldd	r22, Y+8	; 0x08
    1a86:	79 85       	ldd	r23, Y+9	; 0x09
    1a88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	9f 83       	std	Y+7, r25	; 0x07
    1a96:	8e 83       	std	Y+6, r24	; 0x06
    1a98:	8e 81       	ldd	r24, Y+6	; 0x06
    1a9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <LCD_voidSendChar+0x190>
    1aa8:	9b 83       	std	Y+3, r25	; 0x03
    1aaa:	8a 83       	std	Y+2, r24	; 0x02
    1aac:	0f c0       	rjmp	.+30     	; 0x1acc <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1aae:	69 89       	ldd	r22, Y+17	; 0x11
    1ab0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ab2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	88 8b       	std	Y+16, r24	; 0x10
    1ac0:	88 89       	ldd	r24, Y+16	; 0x10
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	8a 95       	dec	r24
    1ac8:	f1 f7       	brne	.-4      	; 0x1ac6 <LCD_voidSendChar+0x1b2>
    1aca:	89 83       	std	Y+1, r24	; 0x01
	     _delay_us(1);
	     /*E=0*/
	     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	62 e0       	ldi	r22, 0x02	; 2
    1ad0:	40 e0       	ldi	r20, 0x00	; 0
    1ad2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	     	    DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
	     	  	 _delay_us(1);
	   	     /*E=0*/
	        	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
#endif
 }
    1ad6:	69 96       	adiw	r28, 0x19	; 25
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <LCD_u8GoToXY>:

 u8 LCD_u8GoToXY(u8 COPY_u8LineNum,u8 Copy_u8location)
 {
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <LCD_u8GoToXY+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <LCD_u8GoToXY+0x8>
    1af0:	0f 92       	push	r0
    1af2:	cd b7       	in	r28, 0x3d	; 61
    1af4:	de b7       	in	r29, 0x3e	; 62
    1af6:	8a 83       	std	Y+2, r24	; 0x02
    1af8:	6b 83       	std	Y+3, r22	; 0x03
     u8 local_u8Errorstate=STD_TYBES_OK;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	89 83       	std	Y+1, r24	; 0x01
     if(COPY_u8LineNum<=39){
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	88 32       	cpi	r24, 0x28	; 40
    1b02:	e8 f4       	brcc	.+58     	; 0x1b3e <LCD_u8GoToXY+0x56>
     switch(COPY_u8LineNum)
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	91 05       	cpc	r25, r1
    1b16:	31 f0       	breq	.+12     	; 0x1b24 <LCD_u8GoToXY+0x3c>
    1b18:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1c:	22 30       	cpi	r18, 0x02	; 2
    1b1e:	31 05       	cpc	r19, r1
    1b20:	31 f0       	breq	.+12     	; 0x1b2e <LCD_u8GoToXY+0x46>
    1b22:	0a c0       	rjmp	.+20     	; 0x1b38 <LCD_u8GoToXY+0x50>
     {
         case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8location);  break;
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	80 58       	subi	r24, 0x80	; 128
    1b28:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>
    1b2c:	0a c0       	rjmp	.+20     	; 0x1b42 <LCD_u8GoToXY+0x5a>
         case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8location);  break;
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	80 54       	subi	r24, 0x40	; 64
    1b32:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_voidSendCmnd>
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <LCD_u8GoToXY+0x5a>
         default :  local_u8Errorstate=STD_TYBES_OK;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	89 83       	std	Y+1, r24	; 0x01
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <LCD_u8GoToXY+0x5a>
     }
 }
 else { local_u8Errorstate=STD_TYBES_OK;}
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	89 83       	std	Y+1, r24	; 0x01
 return local_u8Errorstate;}
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <LCD_sendString>:
 void LCD_sendString(const char *str)
 {
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	00 d0       	rcall	.+0      	; 0x1b5a <LCD_sendString+0x6>
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	9b 83       	std	Y+3, r25	; 0x03
    1b62:	8a 83       	std	Y+2, r24	; 0x02
 	u8 i = 0;
    1b64:	19 82       	std	Y+1, r1	; 0x01
    1b66:	0e c0       	rjmp	.+28     	; 0x1b84 <LCD_sendString+0x30>
 	while (str[i] != '\0')
 	{
 		LCD_voidSendChar(str[i]);
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	fc 01       	movw	r30, r24
    1b74:	e2 0f       	add	r30, r18
    1b76:	f3 1f       	adc	r31, r19
    1b78:	80 81       	ld	r24, Z
    1b7a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
 		i++;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	89 83       	std	Y+1, r24	; 0x01
 else { local_u8Errorstate=STD_TYBES_OK;}
 return local_u8Errorstate;}
 void LCD_sendString(const char *str)
 {
 	u8 i = 0;
 	while (str[i] != '\0')
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	80 81       	ld	r24, Z
    1b96:	88 23       	and	r24, r24
    1b98:	39 f7       	brne	.-50     	; 0x1b68 <LCD_sendString+0x14>
 	{
 		LCD_voidSendChar(str[i]);
 		i++;
 	}}
    1b9a:	0f 90       	pop	r0
    1b9c:	0f 90       	pop	r0
    1b9e:	0f 90       	pop	r0
    1ba0:	cf 91       	pop	r28
    1ba2:	df 91       	pop	r29
    1ba4:	08 95       	ret

00001ba6 <main>:
#include "LCD_interface.h"
#include "KPD_interface.h"
#include "DC_MOTOR_interface.h"

int main(void)
{
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	c7 59       	subi	r28, 0x97	; 151
    1bb4:	d0 40       	sbci	r29, 0x00	; 0
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
	u8 passcode[3]={'1','2','3','4'};
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	81 57       	subi	r24, 0x71	; 113
    1bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc6:	cd 56       	subi	r28, 0x6D	; 109
    1bc8:	df 4f       	sbci	r29, 0xFF	; 255
    1bca:	99 83       	std	Y+1, r25	; 0x01
    1bcc:	88 83       	st	Y, r24
    1bce:	c3 59       	subi	r28, 0x93	; 147
    1bd0:	d0 40       	sbci	r29, 0x00	; 0
    1bd2:	85 ed       	ldi	r24, 0xD5	; 213
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	cb 56       	subi	r28, 0x6B	; 107
    1bd8:	df 4f       	sbci	r29, 0xFF	; 255
    1bda:	99 83       	std	Y+1, r25	; 0x01
    1bdc:	88 83       	st	Y, r24
    1bde:	c5 59       	subi	r28, 0x95	; 149
    1be0:	d0 40       	sbci	r29, 0x00	; 0
    1be2:	93 e0       	ldi	r25, 0x03	; 3
    1be4:	c9 56       	subi	r28, 0x69	; 105
    1be6:	df 4f       	sbci	r29, 0xFF	; 255
    1be8:	98 83       	st	Y, r25
    1bea:	c7 59       	subi	r28, 0x97	; 151
    1bec:	d0 40       	sbci	r29, 0x00	; 0
    1bee:	cb 56       	subi	r28, 0x6B	; 107
    1bf0:	df 4f       	sbci	r29, 0xFF	; 255
    1bf2:	e8 81       	ld	r30, Y
    1bf4:	f9 81       	ldd	r31, Y+1	; 0x01
    1bf6:	c5 59       	subi	r28, 0x95	; 149
    1bf8:	d0 40       	sbci	r29, 0x00	; 0
    1bfa:	00 80       	ld	r0, Z
    1bfc:	cb 56       	subi	r28, 0x6B	; 107
    1bfe:	df 4f       	sbci	r29, 0xFF	; 255
    1c00:	88 81       	ld	r24, Y
    1c02:	99 81       	ldd	r25, Y+1	; 0x01
    1c04:	c5 59       	subi	r28, 0x95	; 149
    1c06:	d0 40       	sbci	r29, 0x00	; 0
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	cb 56       	subi	r28, 0x6B	; 107
    1c0c:	df 4f       	sbci	r29, 0xFF	; 255
    1c0e:	99 83       	std	Y+1, r25	; 0x01
    1c10:	88 83       	st	Y, r24
    1c12:	c5 59       	subi	r28, 0x95	; 149
    1c14:	d0 40       	sbci	r29, 0x00	; 0
    1c16:	cd 56       	subi	r28, 0x6D	; 109
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	e8 81       	ld	r30, Y
    1c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c1e:	c3 59       	subi	r28, 0x93	; 147
    1c20:	d0 40       	sbci	r29, 0x00	; 0
    1c22:	00 82       	st	Z, r0
    1c24:	cd 56       	subi	r28, 0x6D	; 109
    1c26:	df 4f       	sbci	r29, 0xFF	; 255
    1c28:	88 81       	ld	r24, Y
    1c2a:	99 81       	ldd	r25, Y+1	; 0x01
    1c2c:	c3 59       	subi	r28, 0x93	; 147
    1c2e:	d0 40       	sbci	r29, 0x00	; 0
    1c30:	01 96       	adiw	r24, 0x01	; 1
    1c32:	cd 56       	subi	r28, 0x6D	; 109
    1c34:	df 4f       	sbci	r29, 0xFF	; 255
    1c36:	99 83       	std	Y+1, r25	; 0x01
    1c38:	88 83       	st	Y, r24
    1c3a:	c3 59       	subi	r28, 0x93	; 147
    1c3c:	d0 40       	sbci	r29, 0x00	; 0
    1c3e:	c9 56       	subi	r28, 0x69	; 105
    1c40:	df 4f       	sbci	r29, 0xFF	; 255
    1c42:	98 81       	ld	r25, Y
    1c44:	c7 59       	subi	r28, 0x97	; 151
    1c46:	d0 40       	sbci	r29, 0x00	; 0
    1c48:	91 50       	subi	r25, 0x01	; 1
    1c4a:	c9 56       	subi	r28, 0x69	; 105
    1c4c:	df 4f       	sbci	r29, 0xFF	; 255
    1c4e:	98 83       	st	Y, r25
    1c50:	c7 59       	subi	r28, 0x97	; 151
    1c52:	d0 40       	sbci	r29, 0x00	; 0
    1c54:	c9 56       	subi	r28, 0x69	; 105
    1c56:	df 4f       	sbci	r29, 0xFF	; 255
    1c58:	e8 81       	ld	r30, Y
    1c5a:	c7 59       	subi	r28, 0x97	; 151
    1c5c:	d0 40       	sbci	r29, 0x00	; 0
    1c5e:	ee 23       	and	r30, r30
    1c60:	31 f6       	brne	.-116    	; 0x1bee <main+0x48>

	u8 z,i;
	u8 Local_u8Key;
	DIO_voidInit();
    1c62:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <DIO_voidInit>
	LCD_voidInit();
    1c66:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	                     LCD_voidSendChar('E');
    1c6a:	85 e4       	ldi	r24, 0x45	; 69
    1c6c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar('N');
    1c70:	8e e4       	ldi	r24, 0x4E	; 78
    1c72:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar('T');
    1c76:	84 e5       	ldi	r24, 0x54	; 84
    1c78:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar('E');
    1c7c:	85 e4       	ldi	r24, 0x45	; 69
    1c7e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar('R');
    1c82:	82 e5       	ldi	r24, 0x52	; 82
    1c84:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar(' ');
    1c88:	80 e2       	ldi	r24, 0x20	; 32
    1c8a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	                     LCD_voidSendChar('P');
    1c8e:	80 e5       	ldi	r24, 0x50	; 80
    1c90:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('A');
    1c94:	81 e4       	ldi	r24, 0x41	; 65
    1c96:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('S');
    1c9a:	83 e5       	ldi	r24, 0x53	; 83
    1c9c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('S');
    1ca0:	83 e5       	ldi	r24, 0x53	; 83
    1ca2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('W');
    1ca6:	87 e5       	ldi	r24, 0x57	; 87
    1ca8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('O');
    1cac:	8f e4       	ldi	r24, 0x4F	; 79
    1cae:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('R');
    1cb2:	82 e5       	ldi	r24, 0x52	; 82
    1cb4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('D');
    1cb8:	84 e4       	ldi	r24, 0x44	; 68
    1cba:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
	while(1)
	{LCD_u8GoToXY(2,1);
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
    1cc6:	2d c0       	rjmp	.+90     	; 0x1d22 <main+0x17c>


	 while (i<4)
	 {
		     KPD_u8GetKeyState(&Local_u8Key);
    1cc8:	ce 01       	movw	r24, r28
    1cca:	8e 56       	subi	r24, 0x6E	; 110
    1ccc:	9f 4f       	sbci	r25, 0xFF	; 255
    1cce:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
			 if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	ee 56       	subi	r30, 0x6E	; 110
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 81       	ld	r24, Z
    1cda:	8f 3f       	cpi	r24, 0xFF	; 255
    1cdc:	11 f1       	breq	.+68     	; 0x1d22 <main+0x17c>
			 {
				 LCD_voidSendChar(Local_u8Key);
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ee 56       	subi	r30, 0x6E	; 110
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 81       	ld	r24, Z
    1ce6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_voidSendChar>
				 if(passcode[i] == Local_u8Key){
    1cea:	fe 01       	movw	r30, r28
    1cec:	e3 57       	subi	r30, 0x73	; 115
    1cee:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	ce 01       	movw	r24, r28
    1cf8:	81 57       	subi	r24, 0x71	; 113
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	e2 0f       	add	r30, r18
    1d00:	f3 1f       	adc	r31, r19
    1d02:	90 81       	ld	r25, Z
    1d04:	fe 01       	movw	r30, r28
    1d06:	ee 56       	subi	r30, 0x6E	; 110
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	98 17       	cp	r25, r24
    1d0e:	79 f4       	brne	.+30     	; 0x1d2e <main+0x188>
				 i++;}
    1d10:	de 01       	movw	r26, r28
    1d12:	a3 57       	subi	r26, 0x73	; 115
    1d14:	bf 4f       	sbci	r27, 0xFF	; 255
    1d16:	fe 01       	movw	r30, r28
    1d18:	e3 57       	subi	r30, 0x73	; 115
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8f 5f       	subi	r24, 0xFF	; 255
    1d20:	8c 93       	st	X, r24
		 		 		 LCD_voidSendChar('D');
	while(1)
	{LCD_u8GoToXY(2,1);


	 while (i<4)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e3 57       	subi	r30, 0x73	; 115
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	84 30       	cpi	r24, 0x04	; 4
    1d2c:	68 f2       	brcs	.-102    	; 0x1cc8 <main+0x122>
				 i++;}
				 else{break;}
			 }

	 }
	 if (i>=4)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	e3 57       	subi	r30, 0x73	; 115
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	84 30       	cpi	r24, 0x04	; 4
    1d38:	08 f4       	brcc	.+2      	; 0x1d3c <main+0x196>
    1d3a:	47 c7       	rjmp	.+3726   	; 0x2bca <main+0x1024>
	 	 {
		 LCD_voidInit();
    1d3c:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	 		 LCD_sendString("1dc motor 3exist");
    1d40:	80 e6       	ldi	r24, 0x60	; 96
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 		 LCD_u8GoToXY(2,0);
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	60 e0       	ldi	r22, 0x00	; 0
    1d4c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
	 		 LCD_sendString("2stepper motor");
    1d50:	81 e7       	ldi	r24, 0x71	; 113
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 		while(1){
	 	 		KPD_u8GetKeyState(&Local_u8Key);
    1d58:	ce 01       	movw	r24, r28
    1d5a:	8e 56       	subi	r24, 0x6E	; 110
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
	 	 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    1d62:	fe 01       	movw	r30, r28
    1d64:	ee 56       	subi	r30, 0x6E	; 110
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d6c:	a9 f3       	breq	.-22     	; 0x1d58 <main+0x1b2>
	 	 					 {
	 	 						if(Local_u8Key=='1')
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ee 56       	subi	r30, 0x6E	; 110
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	81 33       	cpi	r24, 0x31	; 49
    1d78:	69 f5       	brne	.+90     	; 0x1dd4 <main+0x22e>
	 	 						{LCD_voidInit();
    1d7a:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	 	 						 LCD_sendString("1 CW");
    1d7e:	80 e8       	ldi	r24, 0x80	; 128
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 						 LCD_u8GoToXY(2,0);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
	 	 						 LCD_sendString("2 CCW");
    1d8e:	85 e8       	ldi	r24, 0x85	; 133
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 		 while(1)
	 	 				 		 {
	 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    1d96:	ce 01       	movw	r24, r28
    1d98:	8e 56       	subi	r24, 0x6E	; 110
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
	 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    1da0:	fe 01       	movw	r30, r28
    1da2:	ee 56       	subi	r30, 0x6E	; 110
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	80 81       	ld	r24, Z
    1da8:	8f 3f       	cpi	r24, 0xFF	; 255
    1daa:	a9 f3       	breq	.-22     	; 0x1d96 <main+0x1f0>
	 	 				 				 		{
	 	 				 				 			if(Local_u8Key=='1')
    1dac:	fe 01       	movw	r30, r28
    1dae:	ee 56       	subi	r30, 0x6E	; 110
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	81 33       	cpi	r24, 0x31	; 49
    1db6:	21 f4       	brne	.+8      	; 0x1dc0 <main+0x21a>
	 	 				 				 			{
	 	 				 				 				DC_MOTOR_u8rotatedirection(DC_MOTOR_FORWARD);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	0e 94 47 06 	call	0xc8e	; 0xc8e <DC_MOTOR_u8rotatedirection>
    1dbe:	cc cf       	rjmp	.-104    	; 0x1d58 <main+0x1b2>
	 	 				 				 				break;
	 	 				 				 			}
	 	 				 				 			else if(Local_u8Key=='2')
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	ee 56       	subi	r30, 0x6E	; 110
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	80 81       	ld	r24, Z
    1dc8:	82 33       	cpi	r24, 0x32	; 50
    1dca:	29 f7       	brne	.-54     	; 0x1d96 <main+0x1f0>
	 	 				 				 			{
	 	 				 				 				DC_MOTOR_u8rotatedirection(DC_MOTOR_REVERSE);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 47 06 	call	0xc8e	; 0xc8e <DC_MOTOR_u8rotatedirection>
    1dd2:	c2 cf       	rjmp	.-124    	; 0x1d58 <main+0x1b2>
	 	 				 				 			}
	 	 				 				 		}
	 	 				 		 }

	 	 	}
	 	 		else if(Local_u8Key=='2')
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ee 56       	subi	r30, 0x6E	; 110
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	82 33       	cpi	r24, 0x32	; 50
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <main+0x23c>
    1de0:	bb cf       	rjmp	.-138    	; 0x1d58 <main+0x1b2>
	 	 		{
	 	 			LCD_voidInit();
    1de2:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	 	 		 LCD_sendString("1 CW");
    1de6:	80 e8       	ldi	r24, 0x80	; 128
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 		 LCD_u8GoToXY(2,0);
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	60 e0       	ldi	r22, 0x00	; 0
    1df2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
	 	 		 LCD_sendString("2 CCW");
    1df6:	85 e8       	ldi	r24, 0x85	; 133
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 	 					 while(1)
	 	 				 	 						 	 				 		 {
	 	 				 	 						 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    1dfe:	ce 01       	movw	r24, r28
    1e00:	8e 56       	subi	r24, 0x6E	; 110
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ee 56       	subi	r30, 0x6E	; 110
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 3f       	cpi	r24, 0xFF	; 255
    1e12:	a9 f3       	breq	.-22     	; 0x1dfe <main+0x258>
	 	 				 	 						 	 				 				 		{
	 	 				 	 						 	 				 				 			if(Local_u8Key=='1')
    1e14:	fe 01       	movw	r30, r28
    1e16:	ee 56       	subi	r30, 0x6E	; 110
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	81 33       	cpi	r24, 0x31	; 49
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <main+0x27c>
    1e20:	fd c3       	rjmp	.+2042   	; 0x261c <main+0xa76>
	 	 				 	 						 	 				 				 			{LCD_voidInit();
    1e22:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	 	 				 	 						 	 				 				 				LCD_sendString("1-90 2-180 3-270");
    1e26:	8b e8       	ldi	r24, 0x8B	; 139
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 	 						 	 				 				 				LCD_u8GoToXY(2,0);
    1e2e:	82 e0       	ldi	r24, 0x02	; 2
    1e30:	60 e0       	ldi	r22, 0x00	; 0
    1e32:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
	 	 				 	 						 	 				 				 				LCD_sendString("4-360");
    1e36:	8c e9       	ldi	r24, 0x9C	; 156
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 	 						 	 				 				 		 while(1)
	 	 				 	 						 	 				 				 			 	 				 		 {
	 	 				 	 						 	 				 				 			 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    1e3e:	ce 01       	movw	r24, r28
    1e40:	8e 56       	subi	r24, 0x6E	; 110
    1e42:	9f 4f       	sbci	r25, 0xFF	; 255
    1e44:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 			 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ee 56       	subi	r30, 0x6E	; 110
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	8f 3f       	cpi	r24, 0xFF	; 255
    1e52:	a9 f3       	breq	.-22     	; 0x1e3e <main+0x298>
	 	 				 	 						 	 				 				 			 	 				 				 		{
	 	 				 	 						 	 				 				 			 	 				 				 			if(Local_u8Key=='1')
    1e54:	fe 01       	movw	r30, r28
    1e56:	ee 56       	subi	r30, 0x6E	; 110
    1e58:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5a:	80 81       	ld	r24, Z
    1e5c:	81 33       	cpi	r24, 0x31	; 49
    1e5e:	09 f0       	breq	.+2      	; 0x1e62 <main+0x2bc>
    1e60:	be c0       	rjmp	.+380    	; 0x1fde <main+0x438>
	 	 				 	 						 	 				 				 			 	 				 				 			{
	 	 				 	 						 	 				 				 			 	 				 				 				DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    1e62:	82 e0       	ldi	r24, 0x02	; 2
    1e64:	62 e0       	ldi	r22, 0x02	; 2
    1e66:	41 e0       	ldi	r20, 0x01	; 1
    1e68:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e7 57       	subi	r30, 0x77	; 119
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a8 e4       	ldi	r26, 0x48	; 72
    1e78:	b3 e4       	ldi	r27, 0x43	; 67
    1e7a:	80 83       	st	Z, r24
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	a2 83       	std	Z+2, r26	; 0x02
    1e80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	8e 01       	movw	r16, r28
    1e84:	0b 57       	subi	r16, 0x7B	; 123
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e7 57       	subi	r30, 0x77	; 119
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	53 e4       	ldi	r21, 0x43	; 67
    1e9e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	a2 83       	std	Z+2, r26	; 0x02
    1eae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	eb 57       	subi	r30, 0x7B	; 123
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	44 f4       	brge	.+16     	; 0x1ede <main+0x338>
		__ticks = 1;
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 57       	subi	r30, 0x7D	; 125
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	64 c0       	rjmp	.+200    	; 0x1fa6 <main+0x400>
	else if (__tmp > 65535)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	eb 57       	subi	r30, 0x7B	; 123
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <main+0x358>
    1efc:	43 c0       	rjmp	.+134    	; 0x1f84 <main+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 57       	subi	r30, 0x77	; 119
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	0d 57       	subi	r16, 0x7D	; 125
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	1f c0       	rjmp	.+62     	; 0x1f74 <main+0x3ce>
    1f36:	fe 01       	movw	r30, r28
    1f38:	ef 57       	subi	r30, 0x7F	; 127
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	89 e1       	ldi	r24, 0x19	; 25
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f44:	fe 01       	movw	r30, r28
    1f46:	ef 57       	subi	r30, 0x7F	; 127
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <main+0x3a8>
    1f52:	fe 01       	movw	r30, r28
    1f54:	ef 57       	subi	r30, 0x7F	; 127
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	de 01       	movw	r26, r28
    1f5e:	ad 57       	subi	r26, 0x7D	; 125
    1f60:	bf 4f       	sbci	r27, 0xFF	; 255
    1f62:	fe 01       	movw	r30, r28
    1f64:	ed 57       	subi	r30, 0x7D	; 125
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	11 96       	adiw	r26, 0x01	; 1
    1f70:	9c 93       	st	X, r25
    1f72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 57       	subi	r30, 0x7D	; 125
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	d1 f6       	brne	.-76     	; 0x1f36 <main+0x390>
    1f82:	27 c0       	rjmp	.+78     	; 0x1fd2 <main+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	8e 01       	movw	r16, r28
    1f86:	0d 57       	subi	r16, 0x7D	; 125
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	eb 57       	subi	r30, 0x7B	; 123
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	de 01       	movw	r26, r28
    1fa8:	a1 58       	subi	r26, 0x81	; 129
    1faa:	bf 4f       	sbci	r27, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	ed 57       	subi	r30, 0x7D	; 125
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	8d 93       	st	X+, r24
    1fb8:	9c 93       	st	X, r25
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e1 58       	subi	r30, 0x81	; 129
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <main+0x41e>
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e1 58       	subi	r30, 0x81	; 129
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 				 				_delay_ms(200);
	 	 				 	 						 	 				 				 			 	 				 				 	            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	63 e0       	ldi	r22, 0x03	; 3
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    1fdc:	bd ce       	rjmp	.-646    	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				 			else if(Local_u8Key=='2')
    1fde:	fe 01       	movw	r30, r28
    1fe0:	ee 56       	subi	r30, 0x6E	; 110
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	82 33       	cpi	r24, 0x32	; 50
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <main+0x450>
	 	 				 	 						 	 				 				 			 	 				 				 			{


	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	63 e0       	ldi	r22, 0x03	; 3
    1fee:	41 e0       	ldi	r20, 0x01	; 1
    1ff0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    1ff4:	b1 ce       	rjmp	.-670    	; 0x1d58 <main+0x1b2>



	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				 			else if(Local_u8Key=='3')
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ee 56       	subi	r30, 0x6E	; 110
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	83 33       	cpi	r24, 0x33	; 51
    2000:	09 f0       	breq	.+2      	; 0x2004 <main+0x45e>
    2002:	c8 c0       	rjmp	.+400    	; 0x2194 <main+0x5ee>
	 	 				 	 						 	 				 				 			 	 				 				 			{

	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2004:	82 e0       	ldi	r24, 0x02	; 2
    2006:	63 e0       	ldi	r22, 0x03	; 3
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    200e:	82 e0       	ldi	r24, 0x02	; 2
    2010:	64 e0       	ldi	r22, 0x04	; 4
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2018:	fe 01       	movw	r30, r28
    201a:	e5 58       	subi	r30, 0x85	; 133
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	80 e0       	ldi	r24, 0x00	; 0
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	aa ef       	ldi	r26, 0xFA	; 250
    2024:	b4 e4       	ldi	r27, 0x44	; 68
    2026:	80 83       	st	Z, r24
    2028:	91 83       	std	Z+1, r25	; 0x01
    202a:	a2 83       	std	Z+2, r26	; 0x02
    202c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202e:	8e 01       	movw	r16, r28
    2030:	09 58       	subi	r16, 0x89	; 137
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e5 58       	subi	r30, 0x85	; 133
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a e7       	ldi	r20, 0x7A	; 122
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	f8 01       	movw	r30, r16
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205c:	fe 01       	movw	r30, r28
    205e:	e9 58       	subi	r30, 0x89	; 137
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	44 f4       	brge	.+16     	; 0x208a <main+0x4e4>
		__ticks = 1;
    207a:	fe 01       	movw	r30, r28
    207c:	eb 58       	subi	r30, 0x8B	; 139
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	80 83       	st	Z, r24
    2088:	64 c0       	rjmp	.+200    	; 0x2152 <main+0x5ac>
	else if (__tmp > 65535)
    208a:	fe 01       	movw	r30, r28
    208c:	e9 58       	subi	r30, 0x89	; 137
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	3f ef       	ldi	r19, 0xFF	; 255
    209c:	4f e7       	ldi	r20, 0x7F	; 127
    209e:	57 e4       	ldi	r21, 0x47	; 71
    20a0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20a4:	18 16       	cp	r1, r24
    20a6:	0c f0       	brlt	.+2      	; 0x20aa <main+0x504>
    20a8:	43 c0       	rjmp	.+134    	; 0x2130 <main+0x58a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20aa:	fe 01       	movw	r30, r28
    20ac:	e5 58       	subi	r30, 0x85	; 133
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e 01       	movw	r16, r28
    20ca:	0b 58       	subi	r16, 0x8B	; 139
    20cc:	1f 4f       	sbci	r17, 0xFF	; 255
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	f8 01       	movw	r30, r16
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	80 83       	st	Z, r24
    20e0:	1f c0       	rjmp	.+62     	; 0x2120 <main+0x57a>
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 58       	subi	r30, 0x8D	; 141
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	89 e1       	ldi	r24, 0x19	; 25
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	fe 01       	movw	r30, r28
    20f2:	ed 58       	subi	r30, 0x8D	; 141
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	91 81       	ldd	r25, Z+1	; 0x01
    20fa:	01 97       	sbiw	r24, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <main+0x554>
    20fe:	fe 01       	movw	r30, r28
    2100:	ed 58       	subi	r30, 0x8D	; 141
    2102:	ff 4f       	sbci	r31, 0xFF	; 255
    2104:	91 83       	std	Z+1, r25	; 0x01
    2106:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2108:	de 01       	movw	r26, r28
    210a:	ab 58       	subi	r26, 0x8B	; 139
    210c:	bf 4f       	sbci	r27, 0xFF	; 255
    210e:	fe 01       	movw	r30, r28
    2110:	eb 58       	subi	r30, 0x8B	; 139
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	11 96       	adiw	r26, 0x01	; 1
    211c:	9c 93       	st	X, r25
    211e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2120:	fe 01       	movw	r30, r28
    2122:	eb 58       	subi	r30, 0x8B	; 139
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	d1 f6       	brne	.-76     	; 0x20e2 <main+0x53c>
    212e:	27 c0       	rjmp	.+78     	; 0x217e <main+0x5d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	8e 01       	movw	r16, r28
    2132:	0b 58       	subi	r16, 0x8B	; 139
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	e9 58       	subi	r30, 0x89	; 137
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	f8 01       	movw	r30, r16
    214e:	91 83       	std	Z+1, r25	; 0x01
    2150:	80 83       	st	Z, r24
    2152:	de 01       	movw	r26, r28
    2154:	af 58       	subi	r26, 0x8F	; 143
    2156:	bf 4f       	sbci	r27, 0xFF	; 255
    2158:	fe 01       	movw	r30, r28
    215a:	eb 58       	subi	r30, 0x8B	; 139
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	91 81       	ldd	r25, Z+1	; 0x01
    2162:	8d 93       	st	X+, r24
    2164:	9c 93       	st	X, r25
    2166:	fe 01       	movw	r30, r28
    2168:	ef 58       	subi	r30, 0x8F	; 143
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	80 81       	ld	r24, Z
    216e:	91 81       	ldd	r25, Z+1	; 0x01
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <main+0x5ca>
    2174:	fe 01       	movw	r30, r28
    2176:	ef 58       	subi	r30, 0x8F	; 143
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	91 83       	std	Z+1, r25	; 0x01
    217c:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                   _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    217e:	82 e0       	ldi	r24, 0x02	; 2
    2180:	63 e0       	ldi	r22, 0x03	; 3
    2182:	40 e0       	ldi	r20, 0x00	; 0
    2184:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	65 e0       	ldi	r22, 0x05	; 5
    218c:	41 e0       	ldi	r20, 0x01	; 1
    218e:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2192:	e2 cd       	rjmp	.-1084   	; 0x1d58 <main+0x1b2>


	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				           else if(Local_u8Key=='4')
    2194:	fe 01       	movw	r30, r28
    2196:	ee 56       	subi	r30, 0x6E	; 110
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	84 33       	cpi	r24, 0x34	; 52
    219e:	09 f0       	breq	.+2      	; 0x21a2 <main+0x5fc>
    21a0:	4e ce       	rjmp	.-868    	; 0x1e3e <main+0x298>
	 	 				 	 						 	 				 				 			 	 				 				           {
	 	 				 	 						 	 				 				 			 	 				 				        	   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	63 e0       	ldi	r22, 0x03	; 3
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 				 	 						 	 				 				 			 	 				 			                       DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    21ac:	82 e0       	ldi	r24, 0x02	; 2
    21ae:	64 e0       	ldi	r22, 0x04	; 4
    21b0:	41 e0       	ldi	r20, 0x01	; 1
    21b2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    21b6:	fe 01       	movw	r30, r28
    21b8:	e3 59       	subi	r30, 0x93	; 147
    21ba:	ff 4f       	sbci	r31, 0xFF	; 255
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	aa ef       	ldi	r26, 0xFA	; 250
    21c2:	b4 e4       	ldi	r27, 0x44	; 68
    21c4:	80 83       	st	Z, r24
    21c6:	91 83       	std	Z+1, r25	; 0x01
    21c8:	a2 83       	std	Z+2, r26	; 0x02
    21ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	8e 01       	movw	r16, r28
    21ce:	07 59       	subi	r16, 0x97	; 151
    21d0:	1f 4f       	sbci	r17, 0xFF	; 255
    21d2:	fe 01       	movw	r30, r28
    21d4:	e3 59       	subi	r30, 0x93	; 147
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	60 81       	ld	r22, Z
    21da:	71 81       	ldd	r23, Z+1	; 0x01
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	93 81       	ldd	r25, Z+3	; 0x03
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	4a e7       	ldi	r20, 0x7A	; 122
    21e6:	53 e4       	ldi	r21, 0x43	; 67
    21e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 83       	st	Z, r24
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	a2 83       	std	Z+2, r26	; 0x02
    21f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21fa:	fe 01       	movw	r30, r28
    21fc:	e7 59       	subi	r30, 0x97	; 151
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e8       	ldi	r20, 0x80	; 128
    220e:	5f e3       	ldi	r21, 0x3F	; 63
    2210:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2214:	88 23       	and	r24, r24
    2216:	44 f4       	brge	.+16     	; 0x2228 <main+0x682>
		__ticks = 1;
    2218:	fe 01       	movw	r30, r28
    221a:	e9 59       	subi	r30, 0x99	; 153
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	64 c0       	rjmp	.+200    	; 0x22f0 <main+0x74a>
	else if (__tmp > 65535)
    2228:	fe 01       	movw	r30, r28
    222a:	e7 59       	subi	r30, 0x97	; 151
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	60 81       	ld	r22, Z
    2230:	71 81       	ldd	r23, Z+1	; 0x01
    2232:	82 81       	ldd	r24, Z+2	; 0x02
    2234:	93 81       	ldd	r25, Z+3	; 0x03
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	4f e7       	ldi	r20, 0x7F	; 127
    223c:	57 e4       	ldi	r21, 0x47	; 71
    223e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2242:	18 16       	cp	r1, r24
    2244:	0c f0       	brlt	.+2      	; 0x2248 <main+0x6a2>
    2246:	43 c0       	rjmp	.+134    	; 0x22ce <main+0x728>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	fe 01       	movw	r30, r28
    224a:	e3 59       	subi	r30, 0x93	; 147
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	60 81       	ld	r22, Z
    2250:	71 81       	ldd	r23, Z+1	; 0x01
    2252:	82 81       	ldd	r24, Z+2	; 0x02
    2254:	93 81       	ldd	r25, Z+3	; 0x03
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	40 e2       	ldi	r20, 0x20	; 32
    225c:	51 e4       	ldi	r21, 0x41	; 65
    225e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8e 01       	movw	r16, r28
    2268:	09 59       	subi	r16, 0x99	; 153
    226a:	1f 4f       	sbci	r17, 0xFF	; 255
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	f8 01       	movw	r30, r16
    227a:	91 83       	std	Z+1, r25	; 0x01
    227c:	80 83       	st	Z, r24
    227e:	1f c0       	rjmp	.+62     	; 0x22be <main+0x718>
    2280:	fe 01       	movw	r30, r28
    2282:	eb 59       	subi	r30, 0x9B	; 155
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	89 e1       	ldi	r24, 0x19	; 25
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	fe 01       	movw	r30, r28
    2290:	eb 59       	subi	r30, 0x9B	; 155
    2292:	ff 4f       	sbci	r31, 0xFF	; 255
    2294:	80 81       	ld	r24, Z
    2296:	91 81       	ldd	r25, Z+1	; 0x01
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <main+0x6f2>
    229c:	fe 01       	movw	r30, r28
    229e:	eb 59       	subi	r30, 0x9B	; 155
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	91 83       	std	Z+1, r25	; 0x01
    22a4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	de 01       	movw	r26, r28
    22a8:	a9 59       	subi	r26, 0x99	; 153
    22aa:	bf 4f       	sbci	r27, 0xFF	; 255
    22ac:	fe 01       	movw	r30, r28
    22ae:	e9 59       	subi	r30, 0x99	; 153
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	11 96       	adiw	r26, 0x01	; 1
    22ba:	9c 93       	st	X, r25
    22bc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22be:	fe 01       	movw	r30, r28
    22c0:	e9 59       	subi	r30, 0x99	; 153
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	80 81       	ld	r24, Z
    22c6:	91 81       	ldd	r25, Z+1	; 0x01
    22c8:	00 97       	sbiw	r24, 0x00	; 0
    22ca:	d1 f6       	brne	.-76     	; 0x2280 <main+0x6da>
    22cc:	27 c0       	rjmp	.+78     	; 0x231c <main+0x776>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ce:	8e 01       	movw	r16, r28
    22d0:	09 59       	subi	r16, 0x99	; 153
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	fe 01       	movw	r30, r28
    22d6:	e7 59       	subi	r30, 0x97	; 151
    22d8:	ff 4f       	sbci	r31, 0xFF	; 255
    22da:	60 81       	ld	r22, Z
    22dc:	71 81       	ldd	r23, Z+1	; 0x01
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	f8 01       	movw	r30, r16
    22ec:	91 83       	std	Z+1, r25	; 0x01
    22ee:	80 83       	st	Z, r24
    22f0:	de 01       	movw	r26, r28
    22f2:	ad 59       	subi	r26, 0x9D	; 157
    22f4:	bf 4f       	sbci	r27, 0xFF	; 255
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 59       	subi	r30, 0x99	; 153
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	8d 93       	st	X+, r24
    2302:	9c 93       	st	X, r25
    2304:	fe 01       	movw	r30, r28
    2306:	ed 59       	subi	r30, 0x9D	; 157
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	80 81       	ld	r24, Z
    230c:	91 81       	ldd	r25, Z+1	; 0x01
    230e:	01 97       	sbiw	r24, 0x01	; 1
    2310:	f1 f7       	brne	.-4      	; 0x230e <main+0x768>
    2312:	fe 01       	movw	r30, r28
    2314:	ed 59       	subi	r30, 0x9D	; 157
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	91 83       	std	Z+1, r25	; 0x01
    231a:	80 83       	st	Z, r24
	 				 	 						 	 				 				 			 	 				 			                       _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    231c:	82 e0       	ldi	r24, 0x02	; 2
    231e:	64 e0       	ldi	r22, 0x04	; 4
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2326:	fe 01       	movw	r30, r28
    2328:	e1 5a       	subi	r30, 0xA1	; 161
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	a8 e4       	ldi	r26, 0x48	; 72
    2332:	b3 e4       	ldi	r27, 0x43	; 67
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    233c:	8e 01       	movw	r16, r28
    233e:	05 5a       	subi	r16, 0xA5	; 165
    2340:	1f 4f       	sbci	r17, 0xFF	; 255
    2342:	fe 01       	movw	r30, r28
    2344:	e1 5a       	subi	r30, 0xA1	; 161
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	60 81       	ld	r22, Z
    234a:	71 81       	ldd	r23, Z+1	; 0x01
    234c:	82 81       	ldd	r24, Z+2	; 0x02
    234e:	93 81       	ldd	r25, Z+3	; 0x03
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	4a e7       	ldi	r20, 0x7A	; 122
    2356:	53 e4       	ldi	r21, 0x43	; 67
    2358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	f8 01       	movw	r30, r16
    2362:	80 83       	st	Z, r24
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	a2 83       	std	Z+2, r26	; 0x02
    2368:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    236a:	fe 01       	movw	r30, r28
    236c:	e5 5a       	subi	r30, 0xA5	; 165
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	40 e8       	ldi	r20, 0x80	; 128
    237e:	5f e3       	ldi	r21, 0x3F	; 63
    2380:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2384:	88 23       	and	r24, r24
    2386:	44 f4       	brge	.+16     	; 0x2398 <main+0x7f2>
		__ticks = 1;
    2388:	fe 01       	movw	r30, r28
    238a:	e7 5a       	subi	r30, 0xA7	; 167
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
    2396:	64 c0       	rjmp	.+200    	; 0x2460 <main+0x8ba>
	else if (__tmp > 65535)
    2398:	fe 01       	movw	r30, r28
    239a:	e5 5a       	subi	r30, 0xA5	; 165
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	3f ef       	ldi	r19, 0xFF	; 255
    23aa:	4f e7       	ldi	r20, 0x7F	; 127
    23ac:	57 e4       	ldi	r21, 0x47	; 71
    23ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23b2:	18 16       	cp	r1, r24
    23b4:	0c f0       	brlt	.+2      	; 0x23b8 <main+0x812>
    23b6:	43 c0       	rjmp	.+134    	; 0x243e <main+0x898>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b8:	fe 01       	movw	r30, r28
    23ba:	e1 5a       	subi	r30, 0xA1	; 161
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e2       	ldi	r20, 0x20	; 32
    23cc:	51 e4       	ldi	r21, 0x41	; 65
    23ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8e 01       	movw	r16, r28
    23d8:	07 5a       	subi	r16, 0xA7	; 167
    23da:	1f 4f       	sbci	r17, 0xFF	; 255
    23dc:	bc 01       	movw	r22, r24
    23de:	cd 01       	movw	r24, r26
    23e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	91 83       	std	Z+1, r25	; 0x01
    23ec:	80 83       	st	Z, r24
    23ee:	1f c0       	rjmp	.+62     	; 0x242e <main+0x888>
    23f0:	fe 01       	movw	r30, r28
    23f2:	e9 5a       	subi	r30, 0xA9	; 169
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	89 e1       	ldi	r24, 0x19	; 25
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
    23fe:	fe 01       	movw	r30, r28
    2400:	e9 5a       	subi	r30, 0xA9	; 169
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	91 81       	ldd	r25, Z+1	; 0x01
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <main+0x862>
    240c:	fe 01       	movw	r30, r28
    240e:	e9 5a       	subi	r30, 0xA9	; 169
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	91 83       	std	Z+1, r25	; 0x01
    2414:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	de 01       	movw	r26, r28
    2418:	a7 5a       	subi	r26, 0xA7	; 167
    241a:	bf 4f       	sbci	r27, 0xFF	; 255
    241c:	fe 01       	movw	r30, r28
    241e:	e7 5a       	subi	r30, 0xA7	; 167
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	11 96       	adiw	r26, 0x01	; 1
    242a:	9c 93       	st	X, r25
    242c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242e:	fe 01       	movw	r30, r28
    2430:	e7 5a       	subi	r30, 0xA7	; 167
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	80 81       	ld	r24, Z
    2436:	91 81       	ldd	r25, Z+1	; 0x01
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	d1 f6       	brne	.-76     	; 0x23f0 <main+0x84a>
    243c:	27 c0       	rjmp	.+78     	; 0x248c <main+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	8e 01       	movw	r16, r28
    2440:	07 5a       	subi	r16, 0xA7	; 167
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	fe 01       	movw	r30, r28
    2446:	e5 5a       	subi	r30, 0xA5	; 165
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	60 81       	ld	r22, Z
    244c:	71 81       	ldd	r23, Z+1	; 0x01
    244e:	82 81       	ldd	r24, Z+2	; 0x02
    2450:	93 81       	ldd	r25, Z+3	; 0x03
    2452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	f8 01       	movw	r30, r16
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	de 01       	movw	r26, r28
    2462:	ab 5a       	subi	r26, 0xAB	; 171
    2464:	bf 4f       	sbci	r27, 0xFF	; 255
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5a       	subi	r30, 0xA7	; 167
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	8d 93       	st	X+, r24
    2472:	9c 93       	st	X, r25
    2474:	fe 01       	movw	r30, r28
    2476:	eb 5a       	subi	r30, 0xAB	; 171
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <main+0x8d8>
    2482:	fe 01       	movw	r30, r28
    2484:	eb 5a       	subi	r30, 0xAB	; 171
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                   _delay_ms(200);
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	63 e0       	ldi	r22, 0x03	; 3
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	65 e0       	ldi	r22, 0x05	; 5
    249a:	41 e0       	ldi	r20, 0x01	; 1
    249c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    24a0:	fe 01       	movw	r30, r28
    24a2:	ef 5a       	subi	r30, 0xAF	; 175
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	aa ef       	ldi	r26, 0xFA	; 250
    24ac:	b4 e4       	ldi	r27, 0x44	; 68
    24ae:	80 83       	st	Z, r24
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	a2 83       	std	Z+2, r26	; 0x02
    24b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	8e 01       	movw	r16, r28
    24b8:	03 5b       	subi	r16, 0xB3	; 179
    24ba:	1f 4f       	sbci	r17, 0xFF	; 255
    24bc:	fe 01       	movw	r30, r28
    24be:	ef 5a       	subi	r30, 0xAF	; 175
    24c0:	ff 4f       	sbci	r31, 0xFF	; 255
    24c2:	60 81       	ld	r22, Z
    24c4:	71 81       	ldd	r23, Z+1	; 0x01
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	30 e0       	ldi	r19, 0x00	; 0
    24ce:	4a e7       	ldi	r20, 0x7A	; 122
    24d0:	53 e4       	ldi	r21, 0x43	; 67
    24d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	f8 01       	movw	r30, r16
    24dc:	80 83       	st	Z, r24
    24de:	91 83       	std	Z+1, r25	; 0x01
    24e0:	a2 83       	std	Z+2, r26	; 0x02
    24e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e4:	fe 01       	movw	r30, r28
    24e6:	e3 5b       	subi	r30, 0xB3	; 179
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	44 f4       	brge	.+16     	; 0x2512 <main+0x96c>
		__ticks = 1;
    2502:	fe 01       	movw	r30, r28
    2504:	e5 5b       	subi	r30, 0xB5	; 181
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
    2510:	64 c0       	rjmp	.+200    	; 0x25da <main+0xa34>
	else if (__tmp > 65535)
    2512:	fe 01       	movw	r30, r28
    2514:	e3 5b       	subi	r30, 0xB3	; 179
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	60 81       	ld	r22, Z
    251a:	71 81       	ldd	r23, Z+1	; 0x01
    251c:	82 81       	ldd	r24, Z+2	; 0x02
    251e:	93 81       	ldd	r25, Z+3	; 0x03
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	0c f0       	brlt	.+2      	; 0x2532 <main+0x98c>
    2530:	43 c0       	rjmp	.+134    	; 0x25b8 <main+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2532:	fe 01       	movw	r30, r28
    2534:	ef 5a       	subi	r30, 0xAF	; 175
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	40 e2       	ldi	r20, 0x20	; 32
    2546:	51 e4       	ldi	r21, 0x41	; 65
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8e 01       	movw	r16, r28
    2552:	05 5b       	subi	r16, 0xB5	; 181
    2554:	1f 4f       	sbci	r17, 0xFF	; 255
    2556:	bc 01       	movw	r22, r24
    2558:	cd 01       	movw	r24, r26
    255a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	f8 01       	movw	r30, r16
    2564:	91 83       	std	Z+1, r25	; 0x01
    2566:	80 83       	st	Z, r24
    2568:	1f c0       	rjmp	.+62     	; 0x25a8 <main+0xa02>
    256a:	fe 01       	movw	r30, r28
    256c:	e7 5b       	subi	r30, 0xB7	; 183
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	89 e1       	ldi	r24, 0x19	; 25
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	80 83       	st	Z, r24
    2578:	fe 01       	movw	r30, r28
    257a:	e7 5b       	subi	r30, 0xB7	; 183
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 81       	ld	r24, Z
    2580:	91 81       	ldd	r25, Z+1	; 0x01
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <main+0x9dc>
    2586:	fe 01       	movw	r30, r28
    2588:	e7 5b       	subi	r30, 0xB7	; 183
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	91 83       	std	Z+1, r25	; 0x01
    258e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2590:	de 01       	movw	r26, r28
    2592:	a5 5b       	subi	r26, 0xB5	; 181
    2594:	bf 4f       	sbci	r27, 0xFF	; 255
    2596:	fe 01       	movw	r30, r28
    2598:	e5 5b       	subi	r30, 0xB5	; 181
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 81       	ld	r24, Z
    259e:	91 81       	ldd	r25, Z+1	; 0x01
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	11 96       	adiw	r26, 0x01	; 1
    25a4:	9c 93       	st	X, r25
    25a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5b       	subi	r30, 0xB5	; 181
    25ac:	ff 4f       	sbci	r31, 0xFF	; 255
    25ae:	80 81       	ld	r24, Z
    25b0:	91 81       	ldd	r25, Z+1	; 0x01
    25b2:	00 97       	sbiw	r24, 0x00	; 0
    25b4:	d1 f6       	brne	.-76     	; 0x256a <main+0x9c4>
    25b6:	27 c0       	rjmp	.+78     	; 0x2606 <main+0xa60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b8:	8e 01       	movw	r16, r28
    25ba:	05 5b       	subi	r16, 0xB5	; 181
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	fe 01       	movw	r30, r28
    25c0:	e3 5b       	subi	r30, 0xB3	; 179
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	60 81       	ld	r22, Z
    25c6:	71 81       	ldd	r23, Z+1	; 0x01
    25c8:	82 81       	ldd	r24, Z+2	; 0x02
    25ca:	93 81       	ldd	r25, Z+3	; 0x03
    25cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	f8 01       	movw	r30, r16
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	80 83       	st	Z, r24
    25da:	de 01       	movw	r26, r28
    25dc:	a9 5b       	subi	r26, 0xB9	; 185
    25de:	bf 4f       	sbci	r27, 0xFF	; 255
    25e0:	fe 01       	movw	r30, r28
    25e2:	e5 5b       	subi	r30, 0xB5	; 181
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 81       	ld	r24, Z
    25e8:	91 81       	ldd	r25, Z+1	; 0x01
    25ea:	8d 93       	st	X+, r24
    25ec:	9c 93       	st	X, r25
    25ee:	fe 01       	movw	r30, r28
    25f0:	e9 5b       	subi	r30, 0xB9	; 185
    25f2:	ff 4f       	sbci	r31, 0xFF	; 255
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <main+0xa52>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e9 5b       	subi	r30, 0xB9	; 185
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	91 83       	std	Z+1, r25	; 0x01
    2604:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                    _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2606:	82 e0       	ldi	r24, 0x02	; 2
    2608:	62 e0       	ldi	r22, 0x02	; 2
    260a:	41 e0       	ldi	r20, 0x01	; 1
    260c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	40 e0       	ldi	r20, 0x00	; 0
    2616:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    261a:	9e cb       	rjmp	.-2244   	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 				 		}
	 	 				 	 						 	 				 				 			 	 				 		 }

	 	 				 	 						 	 				 				 				break;
	 	 				 	 						 	 				 				 			}
	 	 				 	 						 	 				 				 			else if(Local_u8Key=='2')
    261c:	fe 01       	movw	r30, r28
    261e:	ee 56       	subi	r30, 0x6E	; 110
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	82 33       	cpi	r24, 0x32	; 50
    2626:	09 f0       	breq	.+2      	; 0x262a <main+0xa84>
    2628:	ea cb       	rjmp	.-2092   	; 0x1dfe <main+0x258>
	 	 				 	 						 	 				 				 			{LCD_voidInit();
    262a:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
	 	 				 	 						 	 				 				 		       LCD_sendString("1-90 2-180 3-270");
    262e:	8b e8       	ldi	r24, 0x8B	; 139
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 	 						 	 				 				 		       LCD_u8GoToXY(2,0);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_u8GoToXY>
	 	 				 	 						 	 				 				 		       LCD_sendString("4-360");
    263e:	8c e9       	ldi	r24, 0x9C	; 156
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
	 	 				 	 						 	 				 				 		 while(1)
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		 {
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    2646:	ce 01       	movw	r24, r28
    2648:	8e 56       	subi	r24, 0x6E	; 110
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	0e 94 61 07 	call	0xec2	; 0xec2 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    2650:	fe 01       	movw	r30, r28
    2652:	ee 56       	subi	r30, 0x6E	; 110
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 81       	ld	r24, Z
    2658:	8f 3f       	cpi	r24, 0xFF	; 255
    265a:	a9 f3       	breq	.-22     	; 0x2646 <main+0xaa0>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 				 		{if(Local_u8Key=='1')
    265c:	fe 01       	movw	r30, r28
    265e:	ee 56       	subi	r30, 0x6E	; 110
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	80 81       	ld	r24, Z
    2664:	81 33       	cpi	r24, 0x31	; 49
    2666:	09 f0       	breq	.+2      	; 0x266a <main+0xac4>
    2668:	90 c0       	rjmp	.+288    	; 0x278a <main+0xbe4>
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 			    {
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    266a:	82 e0       	ldi	r24, 0x02	; 2
    266c:	65 e0       	ldi	r22, 0x05	; 5
    266e:	41 e0       	ldi	r20, 0x01	; 1
    2670:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2674:	fe 01       	movw	r30, r28
    2676:	ed 5b       	subi	r30, 0xBD	; 189
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 e0       	ldi	r24, 0x00	; 0
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	a8 e4       	ldi	r26, 0x48	; 72
    2680:	b3 e4       	ldi	r27, 0x43	; 67
    2682:	80 83       	st	Z, r24
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	a2 83       	std	Z+2, r26	; 0x02
    2688:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268a:	8e 01       	movw	r16, r28
    268c:	01 5c       	subi	r16, 0xC1	; 193
    268e:	1f 4f       	sbci	r17, 0xFF	; 255
    2690:	fe 01       	movw	r30, r28
    2692:	ed 5b       	subi	r30, 0xBD	; 189
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	60 81       	ld	r22, Z
    2698:	71 81       	ldd	r23, Z+1	; 0x01
    269a:	82 81       	ldd	r24, Z+2	; 0x02
    269c:	93 81       	ldd	r25, Z+3	; 0x03
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	4a e7       	ldi	r20, 0x7A	; 122
    26a4:	53 e4       	ldi	r21, 0x43	; 67
    26a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	80 83       	st	Z, r24
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	a2 83       	std	Z+2, r26	; 0x02
    26b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26b8:	fe 01       	movw	r30, r28
    26ba:	ff 96       	adiw	r30, 0x3f	; 63
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e8       	ldi	r20, 0x80	; 128
    26ca:	5f e3       	ldi	r21, 0x3F	; 63
    26cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	2c f4       	brge	.+10     	; 0x26de <main+0xb38>
		__ticks = 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	9e af       	std	Y+62, r25	; 0x3e
    26da:	8d af       	std	Y+61, r24	; 0x3d
    26dc:	46 c0       	rjmp	.+140    	; 0x276a <main+0xbc4>
	else if (__tmp > 65535)
    26de:	fe 01       	movw	r30, r28
    26e0:	ff 96       	adiw	r30, 0x3f	; 63
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	3f ef       	ldi	r19, 0xFF	; 255
    26ee:	4f e7       	ldi	r20, 0x7F	; 127
    26f0:	57 e4       	ldi	r21, 0x47	; 71
    26f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	64 f5       	brge	.+88     	; 0x2752 <main+0xbac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fa:	fe 01       	movw	r30, r28
    26fc:	ed 5b       	subi	r30, 0xBD	; 189
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 81       	ld	r22, Z
    2702:	71 81       	ldd	r23, Z+1	; 0x01
    2704:	82 81       	ldd	r24, Z+2	; 0x02
    2706:	93 81       	ldd	r25, Z+3	; 0x03
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	40 e2       	ldi	r20, 0x20	; 32
    270e:	51 e4       	ldi	r21, 0x41	; 65
    2710:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	bc 01       	movw	r22, r24
    271a:	cd 01       	movw	r24, r26
    271c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9e af       	std	Y+62, r25	; 0x3e
    2726:	8d af       	std	Y+61, r24	; 0x3d
    2728:	0f c0       	rjmp	.+30     	; 0x2748 <main+0xba2>
    272a:	89 e1       	ldi	r24, 0x19	; 25
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	9c af       	std	Y+60, r25	; 0x3c
    2730:	8b af       	std	Y+59, r24	; 0x3b
    2732:	8b ad       	ldd	r24, Y+59	; 0x3b
    2734:	9c ad       	ldd	r25, Y+60	; 0x3c
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <main+0xb90>
    273a:	9c af       	std	Y+60, r25	; 0x3c
    273c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2740:	9e ad       	ldd	r25, Y+62	; 0x3e
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	9e af       	std	Y+62, r25	; 0x3e
    2746:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2748:	8d ad       	ldd	r24, Y+61	; 0x3d
    274a:	9e ad       	ldd	r25, Y+62	; 0x3e
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	69 f7       	brne	.-38     	; 0x272a <main+0xb84>
    2750:	16 c0       	rjmp	.+44     	; 0x277e <main+0xbd8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	fe 01       	movw	r30, r28
    2754:	ff 96       	adiw	r30, 0x3f	; 63
    2756:	60 81       	ld	r22, Z
    2758:	71 81       	ldd	r23, Z+1	; 0x01
    275a:	82 81       	ldd	r24, Z+2	; 0x02
    275c:	93 81       	ldd	r25, Z+3	; 0x03
    275e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9e af       	std	Y+62, r25	; 0x3e
    2768:	8d af       	std	Y+61, r24	; 0x3d
    276a:	8d ad       	ldd	r24, Y+61	; 0x3d
    276c:	9e ad       	ldd	r25, Y+62	; 0x3e
    276e:	9a af       	std	Y+58, r25	; 0x3a
    2770:	89 af       	std	Y+57, r24	; 0x39
    2772:	89 ad       	ldd	r24, Y+57	; 0x39
    2774:	9a ad       	ldd	r25, Y+58	; 0x3a
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0xbd0>
    277a:	9a af       	std	Y+58, r25	; 0x3a
    277c:	89 af       	std	Y+57, r24	; 0x39
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				_delay_ms(200);
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 	            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    277e:	82 e0       	ldi	r24, 0x02	; 2
    2780:	64 e0       	ldi	r22, 0x04	; 4
    2782:	41 e0       	ldi	r20, 0x01	; 1
    2784:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2788:	e7 ca       	rjmp	.-2610   	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 			    }
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		        else if(Local_u8Key=='2')
    278a:	fe 01       	movw	r30, r28
    278c:	ee 56       	subi	r30, 0x6E	; 110
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	82 33       	cpi	r24, 0x32	; 50
    2794:	59 f4       	brne	.+22     	; 0x27ac <main+0xc06>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		{DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2796:	82 e0       	ldi	r24, 0x02	; 2
    2798:	64 e0       	ldi	r22, 0x04	; 4
    279a:	41 e0       	ldi	r20, 0x01	; 1
    279c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                 DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    27a0:	82 e0       	ldi	r24, 0x02	; 2
    27a2:	63 e0       	ldi	r22, 0x03	; 3
    27a4:	41 e0       	ldi	r20, 0x01	; 1
    27a6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    27aa:	d6 ca       	rjmp	.-2644   	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                 break;
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		}
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        else if(Local_u8Key=='3')
    27ac:	fe 01       	movw	r30, r28
    27ae:	ee 56       	subi	r30, 0x6E	; 110
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	83 33       	cpi	r24, 0x33	; 51
    27b6:	09 f0       	breq	.+2      	; 0x27ba <main+0xc14>
    27b8:	87 c0       	rjmp	.+270    	; 0x28c8 <main+0xd22>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        {DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    27ba:	82 e0       	ldi	r24, 0x02	; 2
    27bc:	64 e0       	ldi	r22, 0x04	; 4
    27be:	41 e0       	ldi	r20, 0x01	; 1
    27c0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	63 e0       	ldi	r22, 0x03	; 3
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	aa ef       	ldi	r26, 0xFA	; 250
    27d4:	b4 e4       	ldi	r27, 0x44	; 68
    27d6:	8d ab       	std	Y+53, r24	; 0x35
    27d8:	9e ab       	std	Y+54, r25	; 0x36
    27da:	af ab       	std	Y+55, r26	; 0x37
    27dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27de:	6d a9       	ldd	r22, Y+53	; 0x35
    27e0:	7e a9       	ldd	r23, Y+54	; 0x36
    27e2:	8f a9       	ldd	r24, Y+55	; 0x37
    27e4:	98 ad       	ldd	r25, Y+56	; 0x38
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a e7       	ldi	r20, 0x7A	; 122
    27ec:	53 e4       	ldi	r21, 0x43	; 67
    27ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	89 ab       	std	Y+49, r24	; 0x31
    27f8:	9a ab       	std	Y+50, r25	; 0x32
    27fa:	ab ab       	std	Y+51, r26	; 0x33
    27fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27fe:	69 a9       	ldd	r22, Y+49	; 0x31
    2800:	7a a9       	ldd	r23, Y+50	; 0x32
    2802:	8b a9       	ldd	r24, Y+51	; 0x33
    2804:	9c a9       	ldd	r25, Y+52	; 0x34
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	40 e8       	ldi	r20, 0x80	; 128
    280c:	5f e3       	ldi	r21, 0x3F	; 63
    280e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2812:	88 23       	and	r24, r24
    2814:	2c f4       	brge	.+10     	; 0x2820 <main+0xc7a>
		__ticks = 1;
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	98 ab       	std	Y+48, r25	; 0x30
    281c:	8f a7       	std	Y+47, r24	; 0x2f
    281e:	3f c0       	rjmp	.+126    	; 0x289e <main+0xcf8>
	else if (__tmp > 65535)
    2820:	69 a9       	ldd	r22, Y+49	; 0x31
    2822:	7a a9       	ldd	r23, Y+50	; 0x32
    2824:	8b a9       	ldd	r24, Y+51	; 0x33
    2826:	9c a9       	ldd	r25, Y+52	; 0x34
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	3f ef       	ldi	r19, 0xFF	; 255
    282c:	4f e7       	ldi	r20, 0x7F	; 127
    282e:	57 e4       	ldi	r21, 0x47	; 71
    2830:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2834:	18 16       	cp	r1, r24
    2836:	4c f5       	brge	.+82     	; 0x288a <main+0xce4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2838:	6d a9       	ldd	r22, Y+53	; 0x35
    283a:	7e a9       	ldd	r23, Y+54	; 0x36
    283c:	8f a9       	ldd	r24, Y+55	; 0x37
    283e:	98 ad       	ldd	r25, Y+56	; 0x38
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	98 ab       	std	Y+48, r25	; 0x30
    285e:	8f a7       	std	Y+47, r24	; 0x2f
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <main+0xcda>
    2862:	89 e1       	ldi	r24, 0x19	; 25
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e a7       	std	Y+46, r25	; 0x2e
    2868:	8d a7       	std	Y+45, r24	; 0x2d
    286a:	8d a5       	ldd	r24, Y+45	; 0x2d
    286c:	9e a5       	ldd	r25, Y+46	; 0x2e
    286e:	01 97       	sbiw	r24, 0x01	; 1
    2870:	f1 f7       	brne	.-4      	; 0x286e <main+0xcc8>
    2872:	9e a7       	std	Y+46, r25	; 0x2e
    2874:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2876:	8f a5       	ldd	r24, Y+47	; 0x2f
    2878:	98 a9       	ldd	r25, Y+48	; 0x30
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	98 ab       	std	Y+48, r25	; 0x30
    287e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2880:	8f a5       	ldd	r24, Y+47	; 0x2f
    2882:	98 a9       	ldd	r25, Y+48	; 0x30
    2884:	00 97       	sbiw	r24, 0x00	; 0
    2886:	69 f7       	brne	.-38     	; 0x2862 <main+0xcbc>
    2888:	14 c0       	rjmp	.+40     	; 0x28b2 <main+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288a:	69 a9       	ldd	r22, Y+49	; 0x31
    288c:	7a a9       	ldd	r23, Y+50	; 0x32
    288e:	8b a9       	ldd	r24, Y+51	; 0x33
    2890:	9c a9       	ldd	r25, Y+52	; 0x34
    2892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	98 ab       	std	Y+48, r25	; 0x30
    289c:	8f a7       	std	Y+47, r24	; 0x2f
    289e:	8f a5       	ldd	r24, Y+47	; 0x2f
    28a0:	98 a9       	ldd	r25, Y+48	; 0x30
    28a2:	9c a7       	std	Y+44, r25	; 0x2c
    28a4:	8b a7       	std	Y+43, r24	; 0x2b
    28a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    28a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <main+0xd04>
    28ae:	9c a7       	std	Y+44, r25	; 0x2c
    28b0:	8b a7       	std	Y+43, r24	; 0x2b
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         _delay_ms(2000);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	64 e0       	ldi	r22, 0x04	; 4
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	62 e0       	ldi	r22, 0x02	; 2
    28c0:	41 e0       	ldi	r20, 0x01	; 1
    28c2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    28c6:	48 ca       	rjmp	.-2928   	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         break;
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        }
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                       else if(Local_u8Key=='4')
    28c8:	fe 01       	movw	r30, r28
    28ca:	ee 56       	subi	r30, 0x6E	; 110
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	84 33       	cpi	r24, 0x34	; 52
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <main+0xd30>
    28d4:	b8 ce       	rjmp	.-656    	; 0x2646 <main+0xaa0>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                       {DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	64 e0       	ldi	r22, 0x04	; 4
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	aa ef       	ldi	r26, 0xFA	; 250
    28f0:	b4 e4       	ldi	r27, 0x44	; 68
    28f2:	8f a3       	std	Y+39, r24	; 0x27
    28f4:	98 a7       	std	Y+40, r25	; 0x28
    28f6:	a9 a7       	std	Y+41, r26	; 0x29
    28f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	6f a1       	ldd	r22, Y+39	; 0x27
    28fc:	78 a5       	ldd	r23, Y+40	; 0x28
    28fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2900:	9a a5       	ldd	r25, Y+42	; 0x2a
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a e7       	ldi	r20, 0x7A	; 122
    2908:	53 e4       	ldi	r21, 0x43	; 67
    290a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8b a3       	std	Y+35, r24	; 0x23
    2914:	9c a3       	std	Y+36, r25	; 0x24
    2916:	ad a3       	std	Y+37, r26	; 0x25
    2918:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    291a:	6b a1       	ldd	r22, Y+35	; 0x23
    291c:	7c a1       	ldd	r23, Y+36	; 0x24
    291e:	8d a1       	ldd	r24, Y+37	; 0x25
    2920:	9e a1       	ldd	r25, Y+38	; 0x26
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <main+0xd96>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9a a3       	std	Y+34, r25	; 0x22
    2938:	89 a3       	std	Y+33, r24	; 0x21
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <main+0xe14>
	else if (__tmp > 65535)
    293c:	6b a1       	ldd	r22, Y+35	; 0x23
    293e:	7c a1       	ldd	r23, Y+36	; 0x24
    2940:	8d a1       	ldd	r24, Y+37	; 0x25
    2942:	9e a1       	ldd	r25, Y+38	; 0x26
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <main+0xe00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	6f a1       	ldd	r22, Y+39	; 0x27
    2956:	78 a5       	ldd	r23, Y+40	; 0x28
    2958:	89 a5       	ldd	r24, Y+41	; 0x29
    295a:	9a a5       	ldd	r25, Y+42	; 0x2a
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9a a3       	std	Y+34, r25	; 0x22
    297a:	89 a3       	std	Y+33, r24	; 0x21
    297c:	0f c0       	rjmp	.+30     	; 0x299c <main+0xdf6>
    297e:	89 e1       	ldi	r24, 0x19	; 25
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	98 a3       	std	Y+32, r25	; 0x20
    2984:	8f 8f       	std	Y+31, r24	; 0x1f
    2986:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2988:	98 a1       	ldd	r25, Y+32	; 0x20
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <main+0xde4>
    298e:	98 a3       	std	Y+32, r25	; 0x20
    2990:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	89 a1       	ldd	r24, Y+33	; 0x21
    2994:	9a a1       	ldd	r25, Y+34	; 0x22
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9a a3       	std	Y+34, r25	; 0x22
    299a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	89 a1       	ldd	r24, Y+33	; 0x21
    299e:	9a a1       	ldd	r25, Y+34	; 0x22
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <main+0xdd8>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <main+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6b a1       	ldd	r22, Y+35	; 0x23
    29a8:	7c a1       	ldd	r23, Y+36	; 0x24
    29aa:	8d a1       	ldd	r24, Y+37	; 0x25
    29ac:	9e a1       	ldd	r25, Y+38	; 0x26
    29ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9a a3       	std	Y+34, r25	; 0x22
    29b8:	89 a3       	std	Y+33, r24	; 0x21
    29ba:	89 a1       	ldd	r24, Y+33	; 0x21
    29bc:	9a a1       	ldd	r25, Y+34	; 0x22
    29be:	9e 8f       	std	Y+30, r25	; 0x1e
    29c0:	8d 8f       	std	Y+29, r24	; 0x1d
    29c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <main+0xe20>
    29ca:	9e 8f       	std	Y+30, r25	; 0x1e
    29cc:	8d 8f       	std	Y+29, r24	; 0x1d
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                            _delay_ms(2000);
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                             DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	63 e0       	ldi	r22, 0x03	; 3
    29d2:	41 e0       	ldi	r20, 0x01	; 1
    29d4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a8 e4       	ldi	r26, 0x48	; 72
    29de:	b3 e4       	ldi	r27, 0x43	; 67
    29e0:	89 8f       	std	Y+25, r24	; 0x19
    29e2:	9a 8f       	std	Y+26, r25	; 0x1a
    29e4:	ab 8f       	std	Y+27, r26	; 0x1b
    29e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	69 8d       	ldd	r22, Y+25	; 0x19
    29ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a e7       	ldi	r20, 0x7A	; 122
    29f6:	53 e4       	ldi	r21, 0x43	; 67
    29f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8d 8b       	std	Y+21, r24	; 0x15
    2a02:	9e 8b       	std	Y+22, r25	; 0x16
    2a04:	af 8b       	std	Y+23, r26	; 0x17
    2a06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a08:	6d 89       	ldd	r22, Y+21	; 0x15
    2a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <main+0xe84>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9c 8b       	std	Y+20, r25	; 0x14
    2a26:	8b 8b       	std	Y+19, r24	; 0x13
    2a28:	3f c0       	rjmp	.+126    	; 0x2aa8 <main+0xf02>
	else if (__tmp > 65535)
    2a2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a30:	98 8d       	ldd	r25, Y+24	; 0x18
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	4c f5       	brge	.+82     	; 0x2a94 <main+0xeee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a42:	69 8d       	ldd	r22, Y+25	; 0x19
    2a44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9c 8b       	std	Y+20, r25	; 0x14
    2a68:	8b 8b       	std	Y+19, r24	; 0x13
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <main+0xee4>
    2a6c:	89 e1       	ldi	r24, 0x19	; 25
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9a 8b       	std	Y+18, r25	; 0x12
    2a72:	89 8b       	std	Y+17, r24	; 0x11
    2a74:	89 89       	ldd	r24, Y+17	; 0x11
    2a76:	9a 89       	ldd	r25, Y+18	; 0x12
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <main+0xed2>
    2a7c:	9a 8b       	std	Y+18, r25	; 0x12
    2a7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	8b 89       	ldd	r24, Y+19	; 0x13
    2a82:	9c 89       	ldd	r25, Y+20	; 0x14
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	9c 8b       	std	Y+20, r25	; 0x14
    2a88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <main+0xec6>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <main+0xf16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	6d 89       	ldd	r22, Y+21	; 0x15
    2a96:	7e 89       	ldd	r23, Y+22	; 0x16
    2a98:	8f 89       	ldd	r24, Y+23	; 0x17
    2a9a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9c 8b       	std	Y+20, r25	; 0x14
    2aa6:	8b 8b       	std	Y+19, r24	; 0x13
    2aa8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aaa:	9c 89       	ldd	r25, Y+20	; 0x14
    2aac:	98 8b       	std	Y+16, r25	; 0x10
    2aae:	8f 87       	std	Y+15, r24	; 0x0f
    2ab0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ab2:	98 89       	ldd	r25, Y+16	; 0x10
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <main+0xf0e>
    2ab8:	98 8b       	std	Y+16, r25	; 0x10
    2aba:	8f 87       	std	Y+15, r24	; 0x0f
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                             _delay_ms(200);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	64 e0       	ldi	r22, 0x04	; 4
    2ac0:	40 e0       	ldi	r20, 0x00	; 0
    2ac2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                          DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2ac6:	82 e0       	ldi	r24, 0x02	; 2
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	41 e0       	ldi	r20, 0x01	; 1
    2acc:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	aa ef       	ldi	r26, 0xFA	; 250
    2ad6:	b4 e4       	ldi	r27, 0x44	; 68
    2ad8:	8b 87       	std	Y+11, r24	; 0x0b
    2ada:	9c 87       	std	Y+12, r25	; 0x0c
    2adc:	ad 87       	std	Y+13, r26	; 0x0d
    2ade:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae8:	20 e0       	ldi	r18, 0x00	; 0
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	4a e7       	ldi	r20, 0x7A	; 122
    2aee:	53 e4       	ldi	r21, 0x43	; 67
    2af0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2af4:	dc 01       	movw	r26, r24
    2af6:	cb 01       	movw	r24, r22
    2af8:	8f 83       	std	Y+7, r24	; 0x07
    2afa:	98 87       	std	Y+8, r25	; 0x08
    2afc:	a9 87       	std	Y+9, r26	; 0x09
    2afe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b00:	6f 81       	ldd	r22, Y+7	; 0x07
    2b02:	78 85       	ldd	r23, Y+8	; 0x08
    2b04:	89 85       	ldd	r24, Y+9	; 0x09
    2b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b08:	20 e0       	ldi	r18, 0x00	; 0
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e8       	ldi	r20, 0x80	; 128
    2b0e:	5f e3       	ldi	r21, 0x3F	; 63
    2b10:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b14:	88 23       	and	r24, r24
    2b16:	2c f4       	brge	.+10     	; 0x2b22 <main+0xf7c>
		__ticks = 1;
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9e 83       	std	Y+6, r25	; 0x06
    2b1e:	8d 83       	std	Y+5, r24	; 0x05
    2b20:	3f c0       	rjmp	.+126    	; 0x2ba0 <main+0xffa>
	else if (__tmp > 65535)
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	3f ef       	ldi	r19, 0xFF	; 255
    2b2e:	4f e7       	ldi	r20, 0x7F	; 127
    2b30:	57 e4       	ldi	r21, 0x47	; 71
    2b32:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b36:	18 16       	cp	r1, r24
    2b38:	4c f5       	brge	.+82     	; 0x2b8c <main+0xfe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	40 e2       	ldi	r20, 0x20	; 32
    2b48:	51 e4       	ldi	r21, 0x41	; 65
    2b4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	bc 01       	movw	r22, r24
    2b54:	cd 01       	movw	r24, r26
    2b56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	9e 83       	std	Y+6, r25	; 0x06
    2b60:	8d 83       	std	Y+5, r24	; 0x05
    2b62:	0f c0       	rjmp	.+30     	; 0x2b82 <main+0xfdc>
    2b64:	89 e1       	ldi	r24, 0x19	; 25
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	9c 83       	std	Y+4, r25	; 0x04
    2b6a:	8b 83       	std	Y+3, r24	; 0x03
    2b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <main+0xfca>
    2b74:	9c 83       	std	Y+4, r25	; 0x04
    2b76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b78:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7c:	01 97       	sbiw	r24, 0x01	; 1
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	8d 81       	ldd	r24, Y+5	; 0x05
    2b84:	9e 81       	ldd	r25, Y+6	; 0x06
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	69 f7       	brne	.-38     	; 0x2b64 <main+0xfbe>
    2b8a:	14 c0       	rjmp	.+40     	; 0x2bb4 <main+0x100e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8e:	78 85       	ldd	r23, Y+8	; 0x08
    2b90:	89 85       	ldd	r24, Y+9	; 0x09
    2b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	9a 83       	std	Y+2, r25	; 0x02
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <main+0x1006>
    2bb0:	9a 83       	std	Y+2, r25	; 0x02
    2bb2:	89 83       	std	Y+1, r24	; 0x01
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                          _delay_ms(2000);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2bb4:	82 e0       	ldi	r24, 0x02	; 2
    2bb6:	65 e0       	ldi	r22, 0x05	; 5
    2bb8:	41 e0       	ldi	r20, 0x01	; 1
    2bba:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	63 e0       	ldi	r22, 0x03	; 3
    2bc2:	40 e0       	ldi	r20, 0x00	; 0
    2bc4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <DIO_u8SetpinValue>
    2bc8:	c7 c8       	rjmp	.-3698   	; 0x1d58 <main+0x1b2>
	 	 				 	 						 	 				 		 }
	 	 		}

	 		}}}
	 else
		 	 {      LCD_voidInit();
    2bca:	0e 94 6f 08 	call	0x10de	; 0x10de <LCD_voidInit>
		 		 		         LCD_sendString("incorrect password");
    2bce:	82 ea       	ldi	r24, 0xA2	; 162
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_sendString>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
		 		 		 		 break;}}}
    2bda:	c9 56       	subi	r28, 0x69	; 105
    2bdc:	df 4f       	sbci	r29, 0xFF	; 255
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_privat.h"
#include "DIO_config.h"

void DIO_voidInit (void)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	cd b7       	in	r28, 0x3d	; 61
    2bf8:	de b7       	in	r29, 0x3e	; 62
DIO_u8_DDRA_REG=  conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
    2bfa:	ea e3       	ldi	r30, 0x3A	; 58
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	8f e0       	ldi	r24, 0x0F	; 15
    2c00:	80 83       	st	Z, r24
                     DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

DIO_u8_DDRD_REG= conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
    2c02:	e1 e3       	ldi	r30, 0x31	; 49
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	8f ef       	ldi	r24, 0xFF	; 255
    2c08:	80 83       	st	Z, r24
                     DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

DIO_u8_DDRC_REG=conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
    2c0a:	e4 e3       	ldi	r30, 0x34	; 52
    2c0c:	f0 e0       	ldi	r31, 0x00	; 0
    2c0e:	8f e3       	ldi	r24, 0x3F	; 63
    2c10:	80 83       	st	Z, r24
                     DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

DIO_u8_DDRB_REG=conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
    2c12:	e7 e3       	ldi	r30, 0x37	; 55
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	87 e0       	ldi	r24, 0x07	; 7
    2c18:	80 83       	st	Z, r24
                     DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);


DIO_u8_PORTA_REG=conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
    2c1a:	eb e3       	ldi	r30, 0x3B	; 59
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	8f ef       	ldi	r24, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
                     DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

DIO_u8_PORTD_REG=conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
    2c22:	e2 e3       	ldi	r30, 0x32	; 50
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	10 82       	st	Z, r1
                     DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);

DIO_u8_PORTC_REG= conc( DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
    2c28:	e5 e3       	ldi	r30, 0x35	; 53
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 ec       	ldi	r24, 0xC0	; 192
    2c2e:	80 83       	st	Z, r24
                     DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

DIO_u8_PORTB_REG= conc( DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
    2c30:	e8 e3       	ldi	r30, 0x38	; 56
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	88 ef       	ldi	r24, 0xF8	; 248
    2c36:	80 83       	st	Z, r24
                     DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
}
    2c38:	cf 91       	pop	r28
    2c3a:	df 91       	pop	r29
    2c3c:	08 95       	ret

00002c3e <DIO_u8SetPinDirection>:
u8 DIO_u8SetPinDirection        (u8 copy_u8portID,u8 copy_u8pinID,u8 copy_u8pinDirection){
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	2e 97       	sbiw	r28, 0x0e	; 14
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	8a 83       	std	Y+2, r24	; 0x02
    2c54:	6b 83       	std	Y+3, r22	; 0x03
    2c56:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYBES_OK ;
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8portID<=DIO_u8_PORTD )&&(copy_u8pinID <=DIO_u8_PIN7 )&&((copy_u8pinDirection>=DIO_u8_OUTPUT)||(copy_u8pinDirection<=DIO_u8_INPUT)))
    2c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5e:	84 30       	cpi	r24, 0x04	; 4
    2c60:	08 f0       	brcs	.+2      	; 0x2c64 <DIO_u8SetPinDirection+0x26>
    2c62:	0c c1       	rjmp	.+536    	; 0x2e7c <DIO_u8SetPinDirection+0x23e>
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	88 30       	cpi	r24, 0x08	; 8
    2c68:	08 f0       	brcs	.+2      	; 0x2c6c <DIO_u8SetPinDirection+0x2e>
    2c6a:	08 c1       	rjmp	.+528    	; 0x2e7c <DIO_u8SetPinDirection+0x23e>
    2c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c6e:	88 23       	and	r24, r24
    2c70:	21 f4       	brne	.+8      	; 0x2c7a <DIO_u8SetPinDirection+0x3c>
    2c72:	8c 81       	ldd	r24, Y+4	; 0x04
    2c74:	88 23       	and	r24, r24
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <DIO_u8SetPinDirection+0x3c>
    2c78:	01 c1       	rjmp	.+514    	; 0x2e7c <DIO_u8SetPinDirection+0x23e>
    {


		switch(copy_u8portID)
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	3e 87       	std	Y+14, r19	; 0x0e
    2c82:	2d 87       	std	Y+13, r18	; 0x0d
    2c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c88:	81 30       	cpi	r24, 0x01	; 1
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <DIO_u8SetPinDirection+0x52>
    2c8e:	4f c0       	rjmp	.+158    	; 0x2d2e <DIO_u8SetPinDirection+0xf0>
    2c90:	2d 85       	ldd	r18, Y+13	; 0x0d
    2c92:	3e 85       	ldd	r19, Y+14	; 0x0e
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <DIO_u8SetPinDirection+0x66>
    2c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	71 f0       	breq	.+28     	; 0x2cbe <DIO_u8SetPinDirection+0x80>
    2ca2:	ed c0       	rjmp	.+474    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
    2ca4:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ca6:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <DIO_u8SetPinDirection+0x72>
    2cae:	77 c0       	rjmp	.+238    	; 0x2d9e <DIO_u8SetPinDirection+0x160>
    2cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb4:	83 30       	cpi	r24, 0x03	; 3
    2cb6:	91 05       	cpc	r25, r1
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <DIO_u8SetPinDirection+0x7e>
    2cba:	a9 c0       	rjmp	.+338    	; 0x2e0e <DIO_u8SetPinDirection+0x1d0>
    2cbc:	e0 c0       	rjmp	.+448    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(copy_u8pinDirection)
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	3c 87       	std	Y+12, r19	; 0x0c
    2cc6:	2b 87       	std	Y+11, r18	; 0x0b
    2cc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	d1 f0       	breq	.+52     	; 0x2d04 <DIO_u8SetPinDirection+0xc6>
    2cd0:	2b 85       	ldd	r18, Y+11	; 0x0b
    2cd2:	3c 85       	ldd	r19, Y+12	; 0x0c
    2cd4:	21 30       	cpi	r18, 0x01	; 1
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <DIO_u8SetPinDirection+0x9e>
    2cda:	d1 c0       	rjmp	.+418    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,copy_u8pinID); break;
    2cdc:	aa e3       	ldi	r26, 0x3A	; 58
    2cde:	b0 e0       	ldi	r27, 0x00	; 0
    2ce0:	ea e3       	ldi	r30, 0x3A	; 58
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	48 2f       	mov	r20, r24
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	28 2f       	mov	r18, r24
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	02 2e       	mov	r0, r18
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <DIO_u8SetPinDirection+0xbc>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	0a 94       	dec	r0
    2cfc:	e2 f7       	brpl	.-8      	; 0x2cf6 <DIO_u8SetPinDirection+0xb8>
    2cfe:	84 2b       	or	r24, r20
    2d00:	8c 93       	st	X, r24
    2d02:	bd c0       	rjmp	.+378    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,copy_u8pinID); break;
    2d04:	aa e3       	ldi	r26, 0x3A	; 58
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	ea e3       	ldi	r30, 0x3A	; 58
    2d0a:	f0 e0       	ldi	r31, 0x00	; 0
    2d0c:	80 81       	ld	r24, Z
    2d0e:	48 2f       	mov	r20, r24
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	28 2f       	mov	r18, r24
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	02 2e       	mov	r0, r18
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <DIO_u8SetPinDirection+0xe4>
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	0a 94       	dec	r0
    2d24:	e2 f7       	brpl	.-8      	; 0x2d1e <DIO_u8SetPinDirection+0xe0>
    2d26:	80 95       	com	r24
    2d28:	84 23       	and	r24, r20
    2d2a:	8c 93       	st	X, r24
    2d2c:	a8 c0       	rjmp	.+336    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTB:
			switch(copy_u8pinDirection)
    2d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	3a 87       	std	Y+10, r19	; 0x0a
    2d36:	29 87       	std	Y+9, r18	; 0x09
    2d38:	89 85       	ldd	r24, Y+9	; 0x09
    2d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	d1 f0       	breq	.+52     	; 0x2d74 <DIO_u8SetPinDirection+0x136>
    2d40:	29 85       	ldd	r18, Y+9	; 0x09
    2d42:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d44:	21 30       	cpi	r18, 0x01	; 1
    2d46:	31 05       	cpc	r19, r1
    2d48:	09 f0       	breq	.+2      	; 0x2d4c <DIO_u8SetPinDirection+0x10e>
    2d4a:	99 c0       	rjmp	.+306    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,copy_u8pinID); break;
    2d4c:	a7 e3       	ldi	r26, 0x37	; 55
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e7 e3       	ldi	r30, 0x37	; 55
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 2e       	mov	r0, r18
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <DIO_u8SetPinDirection+0x12c>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <DIO_u8SetPinDirection+0x128>
    2d6e:	84 2b       	or	r24, r20
    2d70:	8c 93       	st	X, r24
    2d72:	85 c0       	rjmp	.+266    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,copy_u8pinID); break;
    2d74:	a7 e3       	ldi	r26, 0x37	; 55
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e7 e3       	ldi	r30, 0x37	; 55
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	48 2f       	mov	r20, r24
    2d80:	8b 81       	ldd	r24, Y+3	; 0x03
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	02 2e       	mov	r0, r18
    2d8c:	02 c0       	rjmp	.+4      	; 0x2d92 <DIO_u8SetPinDirection+0x154>
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	0a 94       	dec	r0
    2d94:	e2 f7       	brpl	.-8      	; 0x2d8e <DIO_u8SetPinDirection+0x150>
    2d96:	80 95       	com	r24
    2d98:	84 23       	and	r24, r20
    2d9a:	8c 93       	st	X, r24
    2d9c:	70 c0       	rjmp	.+224    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTC:
			switch(copy_u8pinDirection)
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	38 87       	std	Y+8, r19	; 0x08
    2da6:	2f 83       	std	Y+7, r18	; 0x07
    2da8:	8f 81       	ldd	r24, Y+7	; 0x07
    2daa:	98 85       	ldd	r25, Y+8	; 0x08
    2dac:	00 97       	sbiw	r24, 0x00	; 0
    2dae:	d1 f0       	breq	.+52     	; 0x2de4 <DIO_u8SetPinDirection+0x1a6>
    2db0:	2f 81       	ldd	r18, Y+7	; 0x07
    2db2:	38 85       	ldd	r19, Y+8	; 0x08
    2db4:	21 30       	cpi	r18, 0x01	; 1
    2db6:	31 05       	cpc	r19, r1
    2db8:	09 f0       	breq	.+2      	; 0x2dbc <DIO_u8SetPinDirection+0x17e>
    2dba:	61 c0       	rjmp	.+194    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,copy_u8pinID); break;
    2dbc:	a4 e3       	ldi	r26, 0x34	; 52
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	e4 e3       	ldi	r30, 0x34	; 52
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	48 2f       	mov	r20, r24
    2dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	02 2e       	mov	r0, r18
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <DIO_u8SetPinDirection+0x19c>
    2dd6:	88 0f       	add	r24, r24
    2dd8:	99 1f       	adc	r25, r25
    2dda:	0a 94       	dec	r0
    2ddc:	e2 f7       	brpl	.-8      	; 0x2dd6 <DIO_u8SetPinDirection+0x198>
    2dde:	84 2b       	or	r24, r20
    2de0:	8c 93       	st	X, r24
    2de2:	4d c0       	rjmp	.+154    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,copy_u8pinID); break;
    2de4:	a4 e3       	ldi	r26, 0x34	; 52
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	e4 e3       	ldi	r30, 0x34	; 52
    2dea:	f0 e0       	ldi	r31, 0x00	; 0
    2dec:	80 81       	ld	r24, Z
    2dee:	48 2f       	mov	r20, r24
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	28 2f       	mov	r18, r24
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	02 2e       	mov	r0, r18
    2dfc:	02 c0       	rjmp	.+4      	; 0x2e02 <DIO_u8SetPinDirection+0x1c4>
    2dfe:	88 0f       	add	r24, r24
    2e00:	99 1f       	adc	r25, r25
    2e02:	0a 94       	dec	r0
    2e04:	e2 f7       	brpl	.-8      	; 0x2dfe <DIO_u8SetPinDirection+0x1c0>
    2e06:	80 95       	com	r24
    2e08:	84 23       	and	r24, r20
    2e0a:	8c 93       	st	X, r24
    2e0c:	38 c0       	rjmp	.+112    	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTD:
			switch(copy_u8pinDirection)
    2e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	3e 83       	std	Y+6, r19	; 0x06
    2e16:	2d 83       	std	Y+5, r18	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	c9 f0       	breq	.+50     	; 0x2e52 <DIO_u8SetPinDirection+0x214>
    2e20:	2d 81       	ldd	r18, Y+5	; 0x05
    2e22:	3e 81       	ldd	r19, Y+6	; 0x06
    2e24:	21 30       	cpi	r18, 0x01	; 1
    2e26:	31 05       	cpc	r19, r1
    2e28:	51 f5       	brne	.+84     	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,copy_u8pinID); break;
    2e2a:	a1 e3       	ldi	r26, 0x31	; 49
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e1 e3       	ldi	r30, 0x31	; 49
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	48 2f       	mov	r20, r24
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	28 2f       	mov	r18, r24
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	02 2e       	mov	r0, r18
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <DIO_u8SetPinDirection+0x20a>
    2e44:	88 0f       	add	r24, r24
    2e46:	99 1f       	adc	r25, r25
    2e48:	0a 94       	dec	r0
    2e4a:	e2 f7       	brpl	.-8      	; 0x2e44 <DIO_u8SetPinDirection+0x206>
    2e4c:	84 2b       	or	r24, r20
    2e4e:	8c 93       	st	X, r24
    2e50:	16 c0       	rjmp	.+44     	; 0x2e7e <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,copy_u8pinID); break;
    2e52:	a1 e3       	ldi	r26, 0x31	; 49
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e1 e3       	ldi	r30, 0x31	; 49
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	48 2f       	mov	r20, r24
    2e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e60:	28 2f       	mov	r18, r24
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	02 2e       	mov	r0, r18
    2e6a:	02 c0       	rjmp	.+4      	; 0x2e70 <DIO_u8SetPinDirection+0x232>
    2e6c:	88 0f       	add	r24, r24
    2e6e:	99 1f       	adc	r25, r25
    2e70:	0a 94       	dec	r0
    2e72:	e2 f7       	brpl	.-8      	; 0x2e6c <DIO_u8SetPinDirection+0x22e>
    2e74:	80 95       	com	r24
    2e76:	84 23       	and	r24, r20
    2e78:	8c 93       	st	X, r24
    2e7a:	01 c0       	rjmp	.+2      	; 0x2e7e <DIO_u8SetPinDirection+0x240>
		}
		break;
	}
	}
	else{Local_u8ErrorState=STD_TYBES_NOK;}
    2e7c:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;}
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	2e 96       	adiw	r28, 0x0e	; 14
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <DIO_u8SetpinValue>:

u8 DIO_u8SetpinValue             (u8 copy_u8portID,u8 copy_u8pinID,u8 copy_u8pinValue)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	2e 97       	sbiw	r28, 0x0e	; 14
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	6b 83       	std	Y+3, r22	; 0x03
    2eaa:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState =STD_TYBES_OK;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8pinID <=DIO_u8_PIN7 ){
    2eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb2:	88 30       	cpi	r24, 0x08	; 8
    2eb4:	08 f0       	brcs	.+2      	; 0x2eb8 <DIO_u8SetpinValue+0x26>
    2eb6:	08 c1       	rjmp	.+528    	; 0x30c8 <DIO_u8SetpinValue+0x236>
    switch (copy_u8portID)
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	3e 87       	std	Y+14, r19	; 0x0e
    2ec0:	2d 87       	std	Y+13, r18	; 0x0d
    2ec2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	09 f4       	brne	.+2      	; 0x2ece <DIO_u8SetpinValue+0x3c>
    2ecc:	50 c0       	rjmp	.+160    	; 0x2f6e <DIO_u8SetpinValue+0xdc>
    2ece:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ed0:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ed2:	22 30       	cpi	r18, 0x02	; 2
    2ed4:	31 05       	cpc	r19, r1
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <DIO_u8SetpinValue+0x50>
    2ed8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	71 f0       	breq	.+28     	; 0x2efc <DIO_u8SetpinValue+0x6a>
    2ee0:	f1 c0       	rjmp	.+482    	; 0x30c4 <DIO_u8SetpinValue+0x232>
    2ee2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ee4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ee6:	22 30       	cpi	r18, 0x02	; 2
    2ee8:	31 05       	cpc	r19, r1
    2eea:	09 f4       	brne	.+2      	; 0x2eee <DIO_u8SetpinValue+0x5c>
    2eec:	79 c0       	rjmp	.+242    	; 0x2fe0 <DIO_u8SetpinValue+0x14e>
    2eee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ef2:	83 30       	cpi	r24, 0x03	; 3
    2ef4:	91 05       	cpc	r25, r1
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <DIO_u8SetpinValue+0x68>
    2ef8:	ac c0       	rjmp	.+344    	; 0x3052 <DIO_u8SetpinValue+0x1c0>
    2efa:	e4 c0       	rjmp	.+456    	; 0x30c4 <DIO_u8SetpinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch(copy_u8pinValue)
    2efc:	8c 81       	ldd	r24, Y+4	; 0x04
    2efe:	28 2f       	mov	r18, r24
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	3c 87       	std	Y+12, r19	; 0x0c
    2f04:	2b 87       	std	Y+11, r18	; 0x0b
    2f06:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f08:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f0a:	00 97       	sbiw	r24, 0x00	; 0
    2f0c:	c9 f0       	breq	.+50     	; 0x2f40 <DIO_u8SetpinValue+0xae>
    2f0e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2f10:	3c 85       	ldd	r19, Y+12	; 0x0c
    2f12:	21 30       	cpi	r18, 0x01	; 1
    2f14:	31 05       	cpc	r19, r1
    2f16:	49 f5       	brne	.+82     	; 0x2f6a <DIO_u8SetpinValue+0xd8>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,copy_u8pinID);break;
    2f18:	ab e3       	ldi	r26, 0x3B	; 59
    2f1a:	b0 e0       	ldi	r27, 0x00	; 0
    2f1c:	eb e3       	ldi	r30, 0x3B	; 59
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	80 81       	ld	r24, Z
    2f22:	48 2f       	mov	r20, r24
    2f24:	8b 81       	ldd	r24, Y+3	; 0x03
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	02 2e       	mov	r0, r18
    2f30:	02 c0       	rjmp	.+4      	; 0x2f36 <DIO_u8SetpinValue+0xa4>
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	0a 94       	dec	r0
    2f38:	e2 f7       	brpl	.-8      	; 0x2f32 <DIO_u8SetpinValue+0xa0>
    2f3a:	84 2b       	or	r24, r20
    2f3c:	8c 93       	st	X, r24
    2f3e:	c5 c0       	rjmp	.+394    	; 0x30ca <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTA_REG,copy_u8pinID);break;
    2f40:	ab e3       	ldi	r26, 0x3B	; 59
    2f42:	b0 e0       	ldi	r27, 0x00	; 0
    2f44:	eb e3       	ldi	r30, 0x3B	; 59
    2f46:	f0 e0       	ldi	r31, 0x00	; 0
    2f48:	80 81       	ld	r24, Z
    2f4a:	48 2f       	mov	r20, r24
    2f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4e:	28 2f       	mov	r18, r24
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	02 2e       	mov	r0, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <DIO_u8SetpinValue+0xcc>
    2f5a:	88 0f       	add	r24, r24
    2f5c:	99 1f       	adc	r25, r25
    2f5e:	0a 94       	dec	r0
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <DIO_u8SetpinValue+0xc8>
    2f62:	80 95       	com	r24
    2f64:	84 23       	and	r24, r20
    2f66:	8c 93       	st	X, r24
    2f68:	b0 c0       	rjmp	.+352    	; 0x30ca <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    2f6a:	19 82       	std	Y+1, r1	; 0x01
    2f6c:	ae c0       	rjmp	.+348    	; 0x30ca <DIO_u8SetpinValue+0x238>
        }
        break;
        case DIO_u8_PORTB:
        switch(copy_u8pinValue)
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	3a 87       	std	Y+10, r19	; 0x0a
    2f76:	29 87       	std	Y+9, r18	; 0x09
    2f78:	89 85       	ldd	r24, Y+9	; 0x09
    2f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	c9 f0       	breq	.+50     	; 0x2fb2 <DIO_u8SetpinValue+0x120>
    2f80:	29 85       	ldd	r18, Y+9	; 0x09
    2f82:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f84:	21 30       	cpi	r18, 0x01	; 1
    2f86:	31 05       	cpc	r19, r1
    2f88:	49 f5       	brne	.+82     	; 0x2fdc <DIO_u8SetpinValue+0x14a>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,copy_u8pinID);break;
    2f8a:	a8 e3       	ldi	r26, 0x38	; 56
    2f8c:	b0 e0       	ldi	r27, 0x00	; 0
    2f8e:	e8 e3       	ldi	r30, 0x38	; 56
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	48 2f       	mov	r20, r24
    2f96:	8b 81       	ldd	r24, Y+3	; 0x03
    2f98:	28 2f       	mov	r18, r24
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	02 2e       	mov	r0, r18
    2fa2:	02 c0       	rjmp	.+4      	; 0x2fa8 <DIO_u8SetpinValue+0x116>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	0a 94       	dec	r0
    2faa:	e2 f7       	brpl	.-8      	; 0x2fa4 <DIO_u8SetpinValue+0x112>
    2fac:	84 2b       	or	r24, r20
    2fae:	8c 93       	st	X, r24
    2fb0:	8c c0       	rjmp	.+280    	; 0x30ca <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTB_REG,copy_u8pinID);break;
    2fb2:	a8 e3       	ldi	r26, 0x38	; 56
    2fb4:	b0 e0       	ldi	r27, 0x00	; 0
    2fb6:	e8 e3       	ldi	r30, 0x38	; 56
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	80 81       	ld	r24, Z
    2fbc:	48 2f       	mov	r20, r24
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	28 2f       	mov	r18, r24
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	02 2e       	mov	r0, r18
    2fca:	02 c0       	rjmp	.+4      	; 0x2fd0 <DIO_u8SetpinValue+0x13e>
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	0a 94       	dec	r0
    2fd2:	e2 f7       	brpl	.-8      	; 0x2fcc <DIO_u8SetpinValue+0x13a>
    2fd4:	80 95       	com	r24
    2fd6:	84 23       	and	r24, r20
    2fd8:	8c 93       	st	X, r24
    2fda:	77 c0       	rjmp	.+238    	; 0x30ca <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    2fdc:	19 82       	std	Y+1, r1	; 0x01
    2fde:	75 c0       	rjmp	.+234    	; 0x30ca <DIO_u8SetpinValue+0x238>
        }break;
        case DIO_u8_PORTC:
        switch(copy_u8pinValue)
    2fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	38 87       	std	Y+8, r19	; 0x08
    2fe8:	2f 83       	std	Y+7, r18	; 0x07
    2fea:	8f 81       	ldd	r24, Y+7	; 0x07
    2fec:	98 85       	ldd	r25, Y+8	; 0x08
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	c9 f0       	breq	.+50     	; 0x3024 <DIO_u8SetpinValue+0x192>
    2ff2:	2f 81       	ldd	r18, Y+7	; 0x07
    2ff4:	38 85       	ldd	r19, Y+8	; 0x08
    2ff6:	21 30       	cpi	r18, 0x01	; 1
    2ff8:	31 05       	cpc	r19, r1
    2ffa:	49 f5       	brne	.+82     	; 0x304e <DIO_u8SetpinValue+0x1bc>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,copy_u8pinID);break;
    2ffc:	a5 e3       	ldi	r26, 0x35	; 53
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e5 e3       	ldi	r30, 0x35	; 53
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	48 2f       	mov	r20, r24
    3008:	8b 81       	ldd	r24, Y+3	; 0x03
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	02 2e       	mov	r0, r18
    3014:	02 c0       	rjmp	.+4      	; 0x301a <DIO_u8SetpinValue+0x188>
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	0a 94       	dec	r0
    301c:	e2 f7       	brpl	.-8      	; 0x3016 <DIO_u8SetpinValue+0x184>
    301e:	84 2b       	or	r24, r20
    3020:	8c 93       	st	X, r24
    3022:	53 c0       	rjmp	.+166    	; 0x30ca <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTC_REG,copy_u8pinID);break;
    3024:	a5 e3       	ldi	r26, 0x35	; 53
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	e5 e3       	ldi	r30, 0x35	; 53
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	48 2f       	mov	r20, r24
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	28 2f       	mov	r18, r24
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	02 2e       	mov	r0, r18
    303c:	02 c0       	rjmp	.+4      	; 0x3042 <DIO_u8SetpinValue+0x1b0>
    303e:	88 0f       	add	r24, r24
    3040:	99 1f       	adc	r25, r25
    3042:	0a 94       	dec	r0
    3044:	e2 f7       	brpl	.-8      	; 0x303e <DIO_u8SetpinValue+0x1ac>
    3046:	80 95       	com	r24
    3048:	84 23       	and	r24, r20
    304a:	8c 93       	st	X, r24
    304c:	3e c0       	rjmp	.+124    	; 0x30ca <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    304e:	19 82       	std	Y+1, r1	; 0x01
    3050:	3c c0       	rjmp	.+120    	; 0x30ca <DIO_u8SetpinValue+0x238>
        }break;
        case DIO_u8_PORTD:
        switch(copy_u8pinValue)
    3052:	8c 81       	ldd	r24, Y+4	; 0x04
    3054:	28 2f       	mov	r18, r24
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	3e 83       	std	Y+6, r19	; 0x06
    305a:	2d 83       	std	Y+5, r18	; 0x05
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	9e 81       	ldd	r25, Y+6	; 0x06
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	c9 f0       	breq	.+50     	; 0x3096 <DIO_u8SetpinValue+0x204>
    3064:	2d 81       	ldd	r18, Y+5	; 0x05
    3066:	3e 81       	ldd	r19, Y+6	; 0x06
    3068:	21 30       	cpi	r18, 0x01	; 1
    306a:	31 05       	cpc	r19, r1
    306c:	49 f5       	brne	.+82     	; 0x30c0 <DIO_u8SetpinValue+0x22e>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,copy_u8pinID);break;
    306e:	a2 e3       	ldi	r26, 0x32	; 50
    3070:	b0 e0       	ldi	r27, 0x00	; 0
    3072:	e2 e3       	ldi	r30, 0x32	; 50
    3074:	f0 e0       	ldi	r31, 0x00	; 0
    3076:	80 81       	ld	r24, Z
    3078:	48 2f       	mov	r20, r24
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	28 2f       	mov	r18, r24
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	02 2e       	mov	r0, r18
    3086:	02 c0       	rjmp	.+4      	; 0x308c <DIO_u8SetpinValue+0x1fa>
    3088:	88 0f       	add	r24, r24
    308a:	99 1f       	adc	r25, r25
    308c:	0a 94       	dec	r0
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <DIO_u8SetpinValue+0x1f6>
    3090:	84 2b       	or	r24, r20
    3092:	8c 93       	st	X, r24
    3094:	1a c0       	rjmp	.+52     	; 0x30ca <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTD_REG,copy_u8pinID);break;
    3096:	a2 e3       	ldi	r26, 0x32	; 50
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	e2 e3       	ldi	r30, 0x32	; 50
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	48 2f       	mov	r20, r24
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	02 2e       	mov	r0, r18
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <DIO_u8SetpinValue+0x222>
    30b0:	88 0f       	add	r24, r24
    30b2:	99 1f       	adc	r25, r25
    30b4:	0a 94       	dec	r0
    30b6:	e2 f7       	brpl	.-8      	; 0x30b0 <DIO_u8SetpinValue+0x21e>
    30b8:	80 95       	com	r24
    30ba:	84 23       	and	r24, r20
    30bc:	8c 93       	st	X, r24
    30be:	05 c0       	rjmp	.+10     	; 0x30ca <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    30c0:	19 82       	std	Y+1, r1	; 0x01
    30c2:	03 c0       	rjmp	.+6      	; 0x30ca <DIO_u8SetpinValue+0x238>
        }break;
    default:Local_u8ErrorState=STD_TYBES_NOK;}
    30c4:	19 82       	std	Y+1, r1	; 0x01
    30c6:	01 c0       	rjmp	.+2      	; 0x30ca <DIO_u8SetpinValue+0x238>

    }
    else{Local_u8ErrorState=STD_TYBES_NOK;}
    30c8:	19 82       	std	Y+1, r1	; 0x01
	return Local_u8ErrorState ;}
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	2e 96       	adiw	r28, 0x0e	; 14
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue             (u8 copy_u8portID,u8 copy_u8pinID,u8 * copy_pu8Returnedpinvalue)
{
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	28 97       	sbiw	r28, 0x08	; 8
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	8b 83       	std	Y+3, r24	; 0x03
    30f4:	6c 83       	std	Y+4, r22	; 0x04
    30f6:	5e 83       	std	Y+6, r21	; 0x06
    30f8:	4d 83       	std	Y+5, r20	; 0x05
   u8 Local_u8ErrorState=STD_TYBES_OK;
    30fa:	81 e0       	ldi	r24, 0x01	; 1
    30fc:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_pinvalue;
   if ((copy_u8portID<=DIO_u8_PORTD )&&(copy_u8pinID <=DIO_u8_PIN7 )&&(copy_pu8Returnedpinvalue !=NULL))
    30fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3100:	84 30       	cpi	r24, 0x04	; 4
    3102:	08 f0       	brcs	.+2      	; 0x3106 <DIO_u8GetPinValue+0x28>
    3104:	9e c0       	rjmp	.+316    	; 0x3242 <DIO_u8GetPinValue+0x164>
    3106:	8c 81       	ldd	r24, Y+4	; 0x04
    3108:	88 30       	cpi	r24, 0x08	; 8
    310a:	08 f0       	brcs	.+2      	; 0x310e <DIO_u8GetPinValue+0x30>
    310c:	9a c0       	rjmp	.+308    	; 0x3242 <DIO_u8GetPinValue+0x164>
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	09 f4       	brne	.+2      	; 0x3118 <DIO_u8GetPinValue+0x3a>
    3116:	95 c0       	rjmp	.+298    	; 0x3242 <DIO_u8GetPinValue+0x164>
    {switch(copy_u8portID){
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	38 87       	std	Y+8, r19	; 0x08
    3120:	2f 83       	std	Y+7, r18	; 0x07
    3122:	4f 81       	ldd	r20, Y+7	; 0x07
    3124:	58 85       	ldd	r21, Y+8	; 0x08
    3126:	41 30       	cpi	r20, 0x01	; 1
    3128:	51 05       	cpc	r21, r1
    312a:	a9 f1       	breq	.+106    	; 0x3196 <DIO_u8GetPinValue+0xb8>
    312c:	8f 81       	ldd	r24, Y+7	; 0x07
    312e:	98 85       	ldd	r25, Y+8	; 0x08
    3130:	82 30       	cpi	r24, 0x02	; 2
    3132:	91 05       	cpc	r25, r1
    3134:	34 f4       	brge	.+12     	; 0x3142 <DIO_u8GetPinValue+0x64>
    3136:	2f 81       	ldd	r18, Y+7	; 0x07
    3138:	38 85       	ldd	r19, Y+8	; 0x08
    313a:	21 15       	cp	r18, r1
    313c:	31 05       	cpc	r19, r1
    313e:	71 f0       	breq	.+28     	; 0x315c <DIO_u8GetPinValue+0x7e>
    3140:	80 c0       	rjmp	.+256    	; 0x3242 <DIO_u8GetPinValue+0x164>
    3142:	4f 81       	ldd	r20, Y+7	; 0x07
    3144:	58 85       	ldd	r21, Y+8	; 0x08
    3146:	42 30       	cpi	r20, 0x02	; 2
    3148:	51 05       	cpc	r21, r1
    314a:	09 f4       	brne	.+2      	; 0x314e <DIO_u8GetPinValue+0x70>
    314c:	41 c0       	rjmp	.+130    	; 0x31d0 <DIO_u8GetPinValue+0xf2>
    314e:	8f 81       	ldd	r24, Y+7	; 0x07
    3150:	98 85       	ldd	r25, Y+8	; 0x08
    3152:	83 30       	cpi	r24, 0x03	; 3
    3154:	91 05       	cpc	r25, r1
    3156:	09 f4       	brne	.+2      	; 0x315a <DIO_u8GetPinValue+0x7c>
    3158:	58 c0       	rjmp	.+176    	; 0x320a <DIO_u8GetPinValue+0x12c>
    315a:	73 c0       	rjmp	.+230    	; 0x3242 <DIO_u8GetPinValue+0x164>
    case DIO_u8_PORTA:local_pinvalue=GET_BIT(DIO_u8_PINA_REG,copy_u8pinID);
    315c:	e9 e3       	ldi	r30, 0x39	; 57
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	28 2f       	mov	r18, r24
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	88 2f       	mov	r24, r24
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a9 01       	movw	r20, r18
    316e:	02 c0       	rjmp	.+4      	; 0x3174 <DIO_u8GetPinValue+0x96>
    3170:	55 95       	asr	r21
    3172:	47 95       	ror	r20
    3174:	8a 95       	dec	r24
    3176:	e2 f7       	brpl	.-8      	; 0x3170 <DIO_u8GetPinValue+0x92>
    3178:	ca 01       	movw	r24, r20
    317a:	81 70       	andi	r24, 0x01	; 1
    317c:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	88 23       	and	r24, r24
    3182:	21 f4       	brne	.+8      	; 0x318c <DIO_u8GetPinValue+0xae>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    3184:	ed 81       	ldd	r30, Y+5	; 0x05
    3186:	fe 81       	ldd	r31, Y+6	; 0x06
    3188:	10 82       	st	Z, r1
    318a:	5b c0       	rjmp	.+182    	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    318c:	ed 81       	ldd	r30, Y+5	; 0x05
    318e:	fe 81       	ldd	r31, Y+6	; 0x06
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	80 83       	st	Z, r24
    3194:	56 c0       	rjmp	.+172    	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
       break;
    case DIO_u8_PORTB:local_pinvalue=GET_BIT(DIO_u8_PINB_REG,copy_u8pinID);
    3196:	e6 e3       	ldi	r30, 0x36	; 54
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	8c 81       	ldd	r24, Y+4	; 0x04
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	a9 01       	movw	r20, r18
    31a8:	02 c0       	rjmp	.+4      	; 0x31ae <DIO_u8GetPinValue+0xd0>
    31aa:	55 95       	asr	r21
    31ac:	47 95       	ror	r20
    31ae:	8a 95       	dec	r24
    31b0:	e2 f7       	brpl	.-8      	; 0x31aa <DIO_u8GetPinValue+0xcc>
    31b2:	ca 01       	movw	r24, r20
    31b4:	81 70       	andi	r24, 0x01	; 1
    31b6:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	88 23       	and	r24, r24
    31bc:	21 f4       	brne	.+8      	; 0x31c6 <DIO_u8GetPinValue+0xe8>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    31be:	ed 81       	ldd	r30, Y+5	; 0x05
    31c0:	fe 81       	ldd	r31, Y+6	; 0x06
    31c2:	10 82       	st	Z, r1
    31c4:	3e c0       	rjmp	.+124    	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    31c6:	ed 81       	ldd	r30, Y+5	; 0x05
    31c8:	fe 81       	ldd	r31, Y+6	; 0x06
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	80 83       	st	Z, r24
    31ce:	39 c0       	rjmp	.+114    	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
    break;

    case DIO_u8_PORTC:local_pinvalue=GET_BIT(DIO_u8_PINC_REG,copy_u8pinID);
    31d0:	e3 e3       	ldi	r30, 0x33	; 51
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	28 2f       	mov	r18, r24
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	8c 81       	ldd	r24, Y+4	; 0x04
    31dc:	88 2f       	mov	r24, r24
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	a9 01       	movw	r20, r18
    31e2:	02 c0       	rjmp	.+4      	; 0x31e8 <DIO_u8GetPinValue+0x10a>
    31e4:	55 95       	asr	r21
    31e6:	47 95       	ror	r20
    31e8:	8a 95       	dec	r24
    31ea:	e2 f7       	brpl	.-8      	; 0x31e4 <DIO_u8GetPinValue+0x106>
    31ec:	ca 01       	movw	r24, r20
    31ee:	81 70       	andi	r24, 0x01	; 1
    31f0:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	88 23       	and	r24, r24
    31f6:	21 f4       	brne	.+8      	; 0x3200 <DIO_u8GetPinValue+0x122>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    31f8:	ed 81       	ldd	r30, Y+5	; 0x05
    31fa:	fe 81       	ldd	r31, Y+6	; 0x06
    31fc:	10 82       	st	Z, r1
    31fe:	21 c0       	rjmp	.+66     	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    3200:	ed 81       	ldd	r30, Y+5	; 0x05
    3202:	fe 81       	ldd	r31, Y+6	; 0x06
    3204:	81 e0       	ldi	r24, 0x01	; 1
    3206:	80 83       	st	Z, r24
    3208:	1c c0       	rjmp	.+56     	; 0x3242 <DIO_u8GetPinValue+0x164>
    }break;

    case DIO_u8_PORTD:local_pinvalue=GET_BIT(DIO_u8_PIND_REG,copy_u8pinID);
    320a:	e0 e3       	ldi	r30, 0x30	; 48
    320c:	f0 e0       	ldi	r31, 0x00	; 0
    320e:	80 81       	ld	r24, Z
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	8c 81       	ldd	r24, Y+4	; 0x04
    3216:	88 2f       	mov	r24, r24
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	a9 01       	movw	r20, r18
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <DIO_u8GetPinValue+0x144>
    321e:	55 95       	asr	r21
    3220:	47 95       	ror	r20
    3222:	8a 95       	dec	r24
    3224:	e2 f7       	brpl	.-8      	; 0x321e <DIO_u8GetPinValue+0x140>
    3226:	ca 01       	movw	r24, r20
    3228:	81 70       	andi	r24, 0x01	; 1
    322a:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	88 23       	and	r24, r24
    3230:	21 f4       	brne	.+8      	; 0x323a <DIO_u8GetPinValue+0x15c>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    3232:	ed 81       	ldd	r30, Y+5	; 0x05
    3234:	fe 81       	ldd	r31, Y+6	; 0x06
    3236:	10 82       	st	Z, r1
    3238:	04 c0       	rjmp	.+8      	; 0x3242 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    323a:	ed 81       	ldd	r30, Y+5	; 0x05
    323c:	fe 81       	ldd	r31, Y+6	; 0x06
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	80 83       	st	Z, r24
    }
    break;
}}	return Local_u8ErrorState ;}
    3242:	8a 81       	ldd	r24, Y+2	; 0x02
    3244:	28 96       	adiw	r28, 0x08	; 8
    3246:	0f b6       	in	r0, 0x3f	; 63
    3248:	f8 94       	cli
    324a:	de bf       	out	0x3e, r29	; 62
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	cd bf       	out	0x3d, r28	; 61
    3250:	cf 91       	pop	r28
    3252:	df 91       	pop	r29
    3254:	08 95       	ret

00003256 <DIO_u8setPortDirection>:

u8 DIO_u8setPortDirection       (u8 copy_u8portID,u8 copy_u8PortDirection)
{
    3256:	df 93       	push	r29
    3258:	cf 93       	push	r28
    325a:	cd b7       	in	r28, 0x3d	; 61
    325c:	de b7       	in	r29, 0x3e	; 62
    325e:	2d 97       	sbiw	r28, 0x0d	; 13
    3260:	0f b6       	in	r0, 0x3f	; 63
    3262:	f8 94       	cli
    3264:	de bf       	out	0x3e, r29	; 62
    3266:	0f be       	out	0x3f, r0	; 63
    3268:	cd bf       	out	0x3d, r28	; 61
    326a:	8a 83       	std	Y+2, r24	; 0x02
    326c:	6b 83       	std	Y+3, r22	; 0x03
    	   u8 Local_u8ErrorState=STD_TYBES_OK;
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	89 83       	std	Y+1, r24	; 0x01
    	    if((copy_u8PortDirection==DIO_u8_OUTPUT)||(copy_u8PortDirection==DIO_u8_INPUT))
    3272:	8b 81       	ldd	r24, Y+3	; 0x03
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	21 f0       	breq	.+8      	; 0x3280 <DIO_u8setPortDirection+0x2a>
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	88 23       	and	r24, r24
    327c:	09 f0       	breq	.+2      	; 0x3280 <DIO_u8setPortDirection+0x2a>
    327e:	7d c0       	rjmp	.+250    	; 0x337a <DIO_u8setPortDirection+0x124>
                {
                    switch(copy_u8portID)
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	28 2f       	mov	r18, r24
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	3d 87       	std	Y+13, r19	; 0x0d
    3288:	2c 87       	std	Y+12, r18	; 0x0c
    328a:	8c 85       	ldd	r24, Y+12	; 0x0c
    328c:	9d 85       	ldd	r25, Y+13	; 0x0d
    328e:	81 30       	cpi	r24, 0x01	; 1
    3290:	91 05       	cpc	r25, r1
    3292:	71 f1       	breq	.+92     	; 0x32f0 <DIO_u8setPortDirection+0x9a>
    3294:	2c 85       	ldd	r18, Y+12	; 0x0c
    3296:	3d 85       	ldd	r19, Y+13	; 0x0d
    3298:	22 30       	cpi	r18, 0x02	; 2
    329a:	31 05       	cpc	r19, r1
    329c:	2c f4       	brge	.+10     	; 0x32a8 <DIO_u8setPortDirection+0x52>
    329e:	8c 85       	ldd	r24, Y+12	; 0x0c
    32a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	69 f0       	breq	.+26     	; 0x32c0 <DIO_u8setPortDirection+0x6a>
    32a6:	6b c0       	rjmp	.+214    	; 0x337e <DIO_u8setPortDirection+0x128>
    32a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    32aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    32ac:	22 30       	cpi	r18, 0x02	; 2
    32ae:	31 05       	cpc	r19, r1
    32b0:	b1 f1       	breq	.+108    	; 0x331e <DIO_u8setPortDirection+0xc8>
    32b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    32b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    32b6:	83 30       	cpi	r24, 0x03	; 3
    32b8:	91 05       	cpc	r25, r1
    32ba:	09 f4       	brne	.+2      	; 0x32be <DIO_u8setPortDirection+0x68>
    32bc:	47 c0       	rjmp	.+142    	; 0x334c <DIO_u8setPortDirection+0xf6>
    32be:	5f c0       	rjmp	.+190    	; 0x337e <DIO_u8setPortDirection+0x128>
                    {
                    case DIO_u8_PORTA:
                        switch(copy_u8PortDirection)
    32c0:	8b 81       	ldd	r24, Y+3	; 0x03
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	3b 87       	std	Y+11, r19	; 0x0b
    32c8:	2a 87       	std	Y+10, r18	; 0x0a
    32ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    32cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32ce:	00 97       	sbiw	r24, 0x00	; 0
    32d0:	59 f0       	breq	.+22     	; 0x32e8 <DIO_u8setPortDirection+0x92>
    32d2:	2a 85       	ldd	r18, Y+10	; 0x0a
    32d4:	3b 85       	ldd	r19, Y+11	; 0x0b
    32d6:	21 30       	cpi	r18, 0x01	; 1
    32d8:	31 05       	cpc	r19, r1
    32da:	09 f0       	breq	.+2      	; 0x32de <DIO_u8setPortDirection+0x88>
    32dc:	50 c0       	rjmp	.+160    	; 0x337e <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRA_REG=0xff;break;
    32de:	ea e3       	ldi	r30, 0x3A	; 58
    32e0:	f0 e0       	ldi	r31, 0x00	; 0
    32e2:	8f ef       	ldi	r24, 0xFF	; 255
    32e4:	80 83       	st	Z, r24
    32e6:	4b c0       	rjmp	.+150    	; 0x337e <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRA_REG=0x00;break;
    32e8:	ea e3       	ldi	r30, 0x3A	; 58
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	10 82       	st	Z, r1
    32ee:	47 c0       	rjmp	.+142    	; 0x337e <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTB:
                        switch(copy_u8PortDirection)
    32f0:	8b 81       	ldd	r24, Y+3	; 0x03
    32f2:	28 2f       	mov	r18, r24
    32f4:	30 e0       	ldi	r19, 0x00	; 0
    32f6:	39 87       	std	Y+9, r19	; 0x09
    32f8:	28 87       	std	Y+8, r18	; 0x08
    32fa:	88 85       	ldd	r24, Y+8	; 0x08
    32fc:	99 85       	ldd	r25, Y+9	; 0x09
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	51 f0       	breq	.+20     	; 0x3316 <DIO_u8setPortDirection+0xc0>
    3302:	28 85       	ldd	r18, Y+8	; 0x08
    3304:	39 85       	ldd	r19, Y+9	; 0x09
    3306:	21 30       	cpi	r18, 0x01	; 1
    3308:	31 05       	cpc	r19, r1
    330a:	c9 f5       	brne	.+114    	; 0x337e <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRB_REG=0xff;break;
    330c:	e7 e3       	ldi	r30, 0x37	; 55
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	8f ef       	ldi	r24, 0xFF	; 255
    3312:	80 83       	st	Z, r24
    3314:	34 c0       	rjmp	.+104    	; 0x337e <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRB_REG=0x00;break;
    3316:	e7 e3       	ldi	r30, 0x37	; 55
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	10 82       	st	Z, r1
    331c:	30 c0       	rjmp	.+96     	; 0x337e <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTC:
                        switch(copy_u8PortDirection)
    331e:	8b 81       	ldd	r24, Y+3	; 0x03
    3320:	28 2f       	mov	r18, r24
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	3f 83       	std	Y+7, r19	; 0x07
    3326:	2e 83       	std	Y+6, r18	; 0x06
    3328:	8e 81       	ldd	r24, Y+6	; 0x06
    332a:	9f 81       	ldd	r25, Y+7	; 0x07
    332c:	00 97       	sbiw	r24, 0x00	; 0
    332e:	51 f0       	breq	.+20     	; 0x3344 <DIO_u8setPortDirection+0xee>
    3330:	2e 81       	ldd	r18, Y+6	; 0x06
    3332:	3f 81       	ldd	r19, Y+7	; 0x07
    3334:	21 30       	cpi	r18, 0x01	; 1
    3336:	31 05       	cpc	r19, r1
    3338:	11 f5       	brne	.+68     	; 0x337e <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRC_REG=0xff;break;
    333a:	e4 e3       	ldi	r30, 0x34	; 52
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	8f ef       	ldi	r24, 0xFF	; 255
    3340:	80 83       	st	Z, r24
    3342:	1d c0       	rjmp	.+58     	; 0x337e <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRC_REG=0x00;break;
    3344:	e4 e3       	ldi	r30, 0x34	; 52
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	10 82       	st	Z, r1
    334a:	19 c0       	rjmp	.+50     	; 0x337e <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTD:
                        switch(copy_u8PortDirection)
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	28 2f       	mov	r18, r24
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	3d 83       	std	Y+5, r19	; 0x05
    3354:	2c 83       	std	Y+4, r18	; 0x04
    3356:	8c 81       	ldd	r24, Y+4	; 0x04
    3358:	9d 81       	ldd	r25, Y+5	; 0x05
    335a:	00 97       	sbiw	r24, 0x00	; 0
    335c:	51 f0       	breq	.+20     	; 0x3372 <DIO_u8setPortDirection+0x11c>
    335e:	2c 81       	ldd	r18, Y+4	; 0x04
    3360:	3d 81       	ldd	r19, Y+5	; 0x05
    3362:	21 30       	cpi	r18, 0x01	; 1
    3364:	31 05       	cpc	r19, r1
    3366:	59 f4       	brne	.+22     	; 0x337e <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRD_REG=0xff;break;
    3368:	e1 e3       	ldi	r30, 0x31	; 49
    336a:	f0 e0       	ldi	r31, 0x00	; 0
    336c:	8f ef       	ldi	r24, 0xFF	; 255
    336e:	80 83       	st	Z, r24
    3370:	06 c0       	rjmp	.+12     	; 0x337e <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRD_REG=0x00;break;
    3372:	e1 e3       	ldi	r30, 0x31	; 49
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	10 82       	st	Z, r1
    3378:	02 c0       	rjmp	.+4      	; 0x337e <DIO_u8setPortDirection+0x128>
                        }
                        break;
                    }
                }
            else{Local_u8ErrorState=STD_TYBES_OK;}
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	89 83       	std	Y+1, r24	; 0x01
    	return Local_u8ErrorState ;
    337e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3380:	2d 96       	adiw	r28, 0x0d	; 13
    3382:	0f b6       	in	r0, 0x3f	; 63
    3384:	f8 94       	cli
    3386:	de bf       	out	0x3e, r29	; 62
    3388:	0f be       	out	0x3f, r0	; 63
    338a:	cd bf       	out	0x3d, r28	; 61
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue           (u8 copy_u8portID,u8 copy_u8PortValue)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <DIO_u8SetPortValue+0x6>
    3398:	00 d0       	rcall	.+0      	; 0x339a <DIO_u8SetPortValue+0x8>
    339a:	0f 92       	push	r0
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	8a 83       	std	Y+2, r24	; 0x02
    33a2:	6b 83       	std	Y+3, r22	; 0x03
  u8  Local_u8ErrorState=STD_TYBES_OK;
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	89 83       	std	Y+1, r24	; 0x01
  switch(copy_u8portID)
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	3d 83       	std	Y+5, r19	; 0x05
    33b0:	2c 83       	std	Y+4, r18	; 0x04
    33b2:	8c 81       	ldd	r24, Y+4	; 0x04
    33b4:	9d 81       	ldd	r25, Y+5	; 0x05
    33b6:	81 30       	cpi	r24, 0x01	; 1
    33b8:	91 05       	cpc	r25, r1
    33ba:	d1 f0       	breq	.+52     	; 0x33f0 <DIO_u8SetPortValue+0x5e>
    33bc:	2c 81       	ldd	r18, Y+4	; 0x04
    33be:	3d 81       	ldd	r19, Y+5	; 0x05
    33c0:	22 30       	cpi	r18, 0x02	; 2
    33c2:	31 05       	cpc	r19, r1
    33c4:	2c f4       	brge	.+10     	; 0x33d0 <DIO_u8SetPortValue+0x3e>
    33c6:	8c 81       	ldd	r24, Y+4	; 0x04
    33c8:	9d 81       	ldd	r25, Y+5	; 0x05
    33ca:	00 97       	sbiw	r24, 0x00	; 0
    33cc:	61 f0       	breq	.+24     	; 0x33e6 <DIO_u8SetPortValue+0x54>
    33ce:	1f c0       	rjmp	.+62     	; 0x340e <DIO_u8SetPortValue+0x7c>
    33d0:	2c 81       	ldd	r18, Y+4	; 0x04
    33d2:	3d 81       	ldd	r19, Y+5	; 0x05
    33d4:	22 30       	cpi	r18, 0x02	; 2
    33d6:	31 05       	cpc	r19, r1
    33d8:	81 f0       	breq	.+32     	; 0x33fa <DIO_u8SetPortValue+0x68>
    33da:	8c 81       	ldd	r24, Y+4	; 0x04
    33dc:	9d 81       	ldd	r25, Y+5	; 0x05
    33de:	83 30       	cpi	r24, 0x03	; 3
    33e0:	91 05       	cpc	r25, r1
    33e2:	81 f0       	breq	.+32     	; 0x3404 <DIO_u8SetPortValue+0x72>
    33e4:	14 c0       	rjmp	.+40     	; 0x340e <DIO_u8SetPortValue+0x7c>
  {
      case DIO_u8_PORTA: DIO_u8_PORTA_REG=copy_u8PortValue;break;
    33e6:	eb e3       	ldi	r30, 0x3B	; 59
    33e8:	f0 e0       	ldi	r31, 0x00	; 0
    33ea:	8b 81       	ldd	r24, Y+3	; 0x03
    33ec:	80 83       	st	Z, r24
    33ee:	10 c0       	rjmp	.+32     	; 0x3410 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTB: DIO_u8_PORTB_REG=copy_u8PortValue;break;
    33f0:	e8 e3       	ldi	r30, 0x38	; 56
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	80 83       	st	Z, r24
    33f8:	0b c0       	rjmp	.+22     	; 0x3410 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTC: DIO_u8_PORTC_REG=copy_u8PortValue;break;
    33fa:	e5 e3       	ldi	r30, 0x35	; 53
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3400:	80 83       	st	Z, r24
    3402:	06 c0       	rjmp	.+12     	; 0x3410 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTD: DIO_u8_PORTD_REG=copy_u8PortValue;break;
    3404:	e2 e3       	ldi	r30, 0x32	; 50
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	80 83       	st	Z, r24
    340c:	01 c0       	rjmp	.+2      	; 0x3410 <DIO_u8SetPortValue+0x7e>
      default:Local_u8ErrorState=STD_TYBES_NOK;
    340e:	19 82       	std	Y+1, r1	; 0x01
  }
    return Local_u8ErrorState ;
    3410:	89 81       	ldd	r24, Y+1	; 0x01
}
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue           (u8 copy_u8portID,u8 * copy_pu8ReturenedPortValue)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	00 d0       	rcall	.+0      	; 0x3428 <DIO_u8GetPortValue+0x6>
    3428:	00 d0       	rcall	.+0      	; 0x342a <DIO_u8GetPortValue+0x8>
    342a:	00 d0       	rcall	.+0      	; 0x342c <DIO_u8GetPortValue+0xa>
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
    3430:	8a 83       	std	Y+2, r24	; 0x02
    3432:	7c 83       	std	Y+4, r23	; 0x04
    3434:	6b 83       	std	Y+3, r22	; 0x03
        	 u8   Local_u8ErrorState=STD_TYBES_OK;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	89 83       	std	Y+1, r24	; 0x01
        	 if (copy_pu8ReturenedPortValue!= NULL)
    343a:	8b 81       	ldd	r24, Y+3	; 0x03
    343c:	9c 81       	ldd	r25, Y+4	; 0x04
    343e:	00 97       	sbiw	r24, 0x00	; 0
    3440:	e9 f1       	breq	.+122    	; 0x34bc <DIO_u8GetPortValue+0x9a>
             {
                 switch(copy_u8portID)
    3442:	8a 81       	ldd	r24, Y+2	; 0x02
    3444:	28 2f       	mov	r18, r24
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	3e 83       	std	Y+6, r19	; 0x06
    344a:	2d 83       	std	Y+5, r18	; 0x05
    344c:	8d 81       	ldd	r24, Y+5	; 0x05
    344e:	9e 81       	ldd	r25, Y+6	; 0x06
    3450:	81 30       	cpi	r24, 0x01	; 1
    3452:	91 05       	cpc	r25, r1
    3454:	e1 f0       	breq	.+56     	; 0x348e <DIO_u8GetPortValue+0x6c>
    3456:	2d 81       	ldd	r18, Y+5	; 0x05
    3458:	3e 81       	ldd	r19, Y+6	; 0x06
    345a:	22 30       	cpi	r18, 0x02	; 2
    345c:	31 05       	cpc	r19, r1
    345e:	2c f4       	brge	.+10     	; 0x346a <DIO_u8GetPortValue+0x48>
    3460:	8d 81       	ldd	r24, Y+5	; 0x05
    3462:	9e 81       	ldd	r25, Y+6	; 0x06
    3464:	00 97       	sbiw	r24, 0x00	; 0
    3466:	61 f0       	breq	.+24     	; 0x3480 <DIO_u8GetPortValue+0x5e>
    3468:	27 c0       	rjmp	.+78     	; 0x34b8 <DIO_u8GetPortValue+0x96>
    346a:	2d 81       	ldd	r18, Y+5	; 0x05
    346c:	3e 81       	ldd	r19, Y+6	; 0x06
    346e:	22 30       	cpi	r18, 0x02	; 2
    3470:	31 05       	cpc	r19, r1
    3472:	a1 f0       	breq	.+40     	; 0x349c <DIO_u8GetPortValue+0x7a>
    3474:	8d 81       	ldd	r24, Y+5	; 0x05
    3476:	9e 81       	ldd	r25, Y+6	; 0x06
    3478:	83 30       	cpi	r24, 0x03	; 3
    347a:	91 05       	cpc	r25, r1
    347c:	b1 f0       	breq	.+44     	; 0x34aa <DIO_u8GetPortValue+0x88>
    347e:	1c c0       	rjmp	.+56     	; 0x34b8 <DIO_u8GetPortValue+0x96>
  {
      case DIO_u8_PORTA:*copy_pu8ReturenedPortValue=DIO_u8_PINA_REG;break;
    3480:	e9 e3       	ldi	r30, 0x39	; 57
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	eb 81       	ldd	r30, Y+3	; 0x03
    3488:	fc 81       	ldd	r31, Y+4	; 0x04
    348a:	80 83       	st	Z, r24
    348c:	19 c0       	rjmp	.+50     	; 0x34c0 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTB:*copy_pu8ReturenedPortValue=DIO_u8_PINB_REG;break;
    348e:	e6 e3       	ldi	r30, 0x36	; 54
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	eb 81       	ldd	r30, Y+3	; 0x03
    3496:	fc 81       	ldd	r31, Y+4	; 0x04
    3498:	80 83       	st	Z, r24
    349a:	12 c0       	rjmp	.+36     	; 0x34c0 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTC:*copy_pu8ReturenedPortValue=DIO_u8_PINC_REG;break;
    349c:	e3 e3       	ldi	r30, 0x33	; 51
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	eb 81       	ldd	r30, Y+3	; 0x03
    34a4:	fc 81       	ldd	r31, Y+4	; 0x04
    34a6:	80 83       	st	Z, r24
    34a8:	0b c0       	rjmp	.+22     	; 0x34c0 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTD:*copy_pu8ReturenedPortValue=DIO_u8_PIND_REG;break;
    34aa:	e0 e3       	ldi	r30, 0x30	; 48
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	eb 81       	ldd	r30, Y+3	; 0x03
    34b2:	fc 81       	ldd	r31, Y+4	; 0x04
    34b4:	80 83       	st	Z, r24
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <DIO_u8GetPortValue+0x9e>
      default:Local_u8ErrorState=STD_TYBES_NOK;
    34b8:	19 82       	std	Y+1, r1	; 0x01
    34ba:	02 c0       	rjmp	.+4      	; 0x34c0 <DIO_u8GetPortValue+0x9e>
             }
             }
              else{Local_u8ErrorState=STD_TYBES_OK;}
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	89 83       	std	Y+1, r24	; 0x01
        	 return Local_u8ErrorState;
    34c0:	89 81       	ldd	r24, Y+1	; 0x01

}
    34c2:	26 96       	adiw	r28, 0x06	; 6
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	f8 94       	cli
    34c8:	de bf       	out	0x3e, r29	; 62
    34ca:	0f be       	out	0x3f, r0	; 63
    34cc:	cd bf       	out	0x3d, r28	; 61
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <__prologue_saves__>:
    34d4:	2f 92       	push	r2
    34d6:	3f 92       	push	r3
    34d8:	4f 92       	push	r4
    34da:	5f 92       	push	r5
    34dc:	6f 92       	push	r6
    34de:	7f 92       	push	r7
    34e0:	8f 92       	push	r8
    34e2:	9f 92       	push	r9
    34e4:	af 92       	push	r10
    34e6:	bf 92       	push	r11
    34e8:	cf 92       	push	r12
    34ea:	df 92       	push	r13
    34ec:	ef 92       	push	r14
    34ee:	ff 92       	push	r15
    34f0:	0f 93       	push	r16
    34f2:	1f 93       	push	r17
    34f4:	cf 93       	push	r28
    34f6:	df 93       	push	r29
    34f8:	cd b7       	in	r28, 0x3d	; 61
    34fa:	de b7       	in	r29, 0x3e	; 62
    34fc:	ca 1b       	sub	r28, r26
    34fe:	db 0b       	sbc	r29, r27
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	09 94       	ijmp

0000350c <__epilogue_restores__>:
    350c:	2a 88       	ldd	r2, Y+18	; 0x12
    350e:	39 88       	ldd	r3, Y+17	; 0x11
    3510:	48 88       	ldd	r4, Y+16	; 0x10
    3512:	5f 84       	ldd	r5, Y+15	; 0x0f
    3514:	6e 84       	ldd	r6, Y+14	; 0x0e
    3516:	7d 84       	ldd	r7, Y+13	; 0x0d
    3518:	8c 84       	ldd	r8, Y+12	; 0x0c
    351a:	9b 84       	ldd	r9, Y+11	; 0x0b
    351c:	aa 84       	ldd	r10, Y+10	; 0x0a
    351e:	b9 84       	ldd	r11, Y+9	; 0x09
    3520:	c8 84       	ldd	r12, Y+8	; 0x08
    3522:	df 80       	ldd	r13, Y+7	; 0x07
    3524:	ee 80       	ldd	r14, Y+6	; 0x06
    3526:	fd 80       	ldd	r15, Y+5	; 0x05
    3528:	0c 81       	ldd	r16, Y+4	; 0x04
    352a:	1b 81       	ldd	r17, Y+3	; 0x03
    352c:	aa 81       	ldd	r26, Y+2	; 0x02
    352e:	b9 81       	ldd	r27, Y+1	; 0x01
    3530:	ce 0f       	add	r28, r30
    3532:	d1 1d       	adc	r29, r1
    3534:	0f b6       	in	r0, 0x3f	; 63
    3536:	f8 94       	cli
    3538:	de bf       	out	0x3e, r29	; 62
    353a:	0f be       	out	0x3f, r0	; 63
    353c:	cd bf       	out	0x3d, r28	; 61
    353e:	ed 01       	movw	r28, r26
    3540:	08 95       	ret

00003542 <_exit>:
    3542:	f8 94       	cli

00003544 <__stop_program>:
    3544:	ff cf       	rjmp	.-2      	; 0x3544 <__stop_program>
