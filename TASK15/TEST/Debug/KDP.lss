
KDP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00003a78  00003b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000d8  008000d8  00003b84  2**0
                  ALLOC
  3 .stab         00002ea4  00000000  00000000  00003b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d15  00000000  00000000  00006a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000773d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000789d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009a71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ab72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000baf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bc74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000bf36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c7c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_1>
       8:	0c 94 58 09 	jmp	0x12b0	; 0x12b0 <__vector_2>
       c:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3d       	cpi	r26, 0xD8	; 216
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ed       	ldi	r26, 0xD8	; 216
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 75 18 	call	0x30ea	; 0x30ea <main>
      8a:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 eb       	ldi	r26, 0xB5	; 181
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 eb       	ldi	r24, 0xB5	; 181
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 eb       	ldi	r22, 0xB5	; 181
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 27 1d 	jmp	0x3a4e	; 0x3a4e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 1d 	jmp	0x3a26	; 0x3a26 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2f 1d 	jmp	0x3a5e	; 0x3a5e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DC_MOTOR_u8rotatedirection>:
 /*HAL*/
 #include "DC_MOTOR_config.h"
 #include"DC_MOTOR_interface.h"
 #include"DC_MOTOR_privat.h"
u8 DC_MOTOR_u8rotatedirection(u8 copy_u8direction)
{u8 local_u8ErrorState = STD_TYBES_OK;
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	6f 97       	sbiw	r28, 0x1f	; 31
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8f 8f       	std	Y+31, r24	; 0x1f
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	8e 8f       	std	Y+30, r24	; 0x1e
if (copy_u8direction==DC_MOTOR_FORWARD)
     cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DC_MOTOR_u8rotatedirection+0x22>
     cbe:	7d c0       	rjmp	.+250    	; 0xdba <DC_MOTOR_u8rotatedirection+0x11c>
    {

       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN1,DIO_u8_HIGH);
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	41 e0       	ldi	r20, 0x01	; 1
     cc6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN2,DIO_u8_LOW);
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	a8 e4       	ldi	r26, 0x48	; 72
     cda:	b3 e4       	ldi	r27, 0x43	; 67
     cdc:	89 8f       	std	Y+25, r24	; 0x19
     cde:	9a 8f       	std	Y+26, r25	; 0x1a
     ce0:	ab 8f       	std	Y+27, r26	; 0x1b
     ce2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	69 8d       	ldd	r22, Y+25	; 0x19
     ce6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ce8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cea:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8d 8b       	std	Y+21, r24	; 0x15
     cfe:	9e 8b       	std	Y+22, r25	; 0x16
     d00:	af 8b       	std	Y+23, r26	; 0x17
     d02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d04:	6d 89       	ldd	r22, Y+21	; 0x15
     d06:	7e 89       	ldd	r23, Y+22	; 0x16
     d08:	8f 89       	ldd	r24, Y+23	; 0x17
     d0a:	98 8d       	ldd	r25, Y+24	; 0x18
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d18:	88 23       	and	r24, r24
     d1a:	2c f4       	brge	.+10     	; 0xd26 <DC_MOTOR_u8rotatedirection+0x88>
		__ticks = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	3f c0       	rjmp	.+126    	; 0xda4 <DC_MOTOR_u8rotatedirection+0x106>
	else if (__tmp > 65535)
     d26:	6d 89       	ldd	r22, Y+21	; 0x15
     d28:	7e 89       	ldd	r23, Y+22	; 0x16
     d2a:	8f 89       	ldd	r24, Y+23	; 0x17
     d2c:	98 8d       	ldd	r25, Y+24	; 0x18
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	4c f5       	brge	.+82     	; 0xd90 <DC_MOTOR_u8rotatedirection+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3e:	69 8d       	ldd	r22, Y+25	; 0x19
     d40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9c 8b       	std	Y+20, r25	; 0x14
     d64:	8b 8b       	std	Y+19, r24	; 0x13
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <DC_MOTOR_u8rotatedirection+0xe8>
     d68:	89 e1       	ldi	r24, 0x19	; 25
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9a 8b       	std	Y+18, r25	; 0x12
     d6e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d70:	89 89       	ldd	r24, Y+17	; 0x11
     d72:	9a 89       	ldd	r25, Y+18	; 0x12
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <DC_MOTOR_u8rotatedirection+0xd6>
     d78:	9a 8b       	std	Y+18, r25	; 0x12
     d7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7c:	8b 89       	ldd	r24, Y+19	; 0x13
     d7e:	9c 89       	ldd	r25, Y+20	; 0x14
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9c 8b       	std	Y+20, r25	; 0x14
     d84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d86:	8b 89       	ldd	r24, Y+19	; 0x13
     d88:	9c 89       	ldd	r25, Y+20	; 0x14
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f7       	brne	.-38     	; 0xd68 <DC_MOTOR_u8rotatedirection+0xca>
     d8e:	97 c0       	rjmp	.+302    	; 0xebe <DC_MOTOR_u8rotatedirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d90:	6d 89       	ldd	r22, Y+21	; 0x15
     d92:	7e 89       	ldd	r23, Y+22	; 0x16
     d94:	8f 89       	ldd	r24, Y+23	; 0x17
     d96:	98 8d       	ldd	r25, Y+24	; 0x18
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9c 8b       	std	Y+20, r25	; 0x14
     da2:	8b 8b       	std	Y+19, r24	; 0x13
     da4:	8b 89       	ldd	r24, Y+19	; 0x13
     da6:	9c 89       	ldd	r25, Y+20	; 0x14
     da8:	98 8b       	std	Y+16, r25	; 0x10
     daa:	8f 87       	std	Y+15, r24	; 0x0f
     dac:	8f 85       	ldd	r24, Y+15	; 0x0f
     dae:	98 89       	ldd	r25, Y+16	; 0x10
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <DC_MOTOR_u8rotatedirection+0x112>
     db4:	98 8b       	std	Y+16, r25	; 0x10
     db6:	8f 87       	std	Y+15, r24	; 0x0f
     db8:	82 c0       	rjmp	.+260    	; 0xebe <DC_MOTOR_u8rotatedirection+0x220>
       _delay_ms(200);
    }
else if (copy_u8direction==DC_MOTOR_REVERSE)
     dba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     dbc:	88 23       	and	r24, r24
     dbe:	09 f0       	breq	.+2      	; 0xdc2 <DC_MOTOR_u8rotatedirection+0x124>
     dc0:	7d c0       	rjmp	.+250    	; 0xebc <DC_MOTOR_u8rotatedirection+0x21e>
    {
        DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN1,DIO_u8_LOW);
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	40 e0       	ldi	r20, 0x00	; 0
     dc8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
       DIO_u8SetpinValue(DC_MOTOR_PORT,DC_MOTOR_IN2,DIO_u8_HIGH);
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	a8 e4       	ldi	r26, 0x48	; 72
     ddc:	b3 e4       	ldi	r27, 0x43	; 67
     dde:	8b 87       	std	Y+11, r24	; 0x0b
     de0:	9c 87       	std	Y+12, r25	; 0x0c
     de2:	ad 87       	std	Y+13, r26	; 0x0d
     de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de6:	6b 85       	ldd	r22, Y+11	; 0x0b
     de8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dea:	8d 85       	ldd	r24, Y+13	; 0x0d
     dec:	9e 85       	ldd	r25, Y+14	; 0x0e
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	4a e7       	ldi	r20, 0x7A	; 122
     df4:	53 e4       	ldi	r21, 0x43	; 67
     df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfa:	dc 01       	movw	r26, r24
     dfc:	cb 01       	movw	r24, r22
     dfe:	8f 83       	std	Y+7, r24	; 0x07
     e00:	98 87       	std	Y+8, r25	; 0x08
     e02:	a9 87       	std	Y+9, r26	; 0x09
     e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e8       	ldi	r20, 0x80	; 128
     e14:	5f e3       	ldi	r21, 0x3F	; 63
     e16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e1a:	88 23       	and	r24, r24
     e1c:	2c f4       	brge	.+10     	; 0xe28 <DC_MOTOR_u8rotatedirection+0x18a>
		__ticks = 1;
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	9e 83       	std	Y+6, r25	; 0x06
     e24:	8d 83       	std	Y+5, r24	; 0x05
     e26:	3f c0       	rjmp	.+126    	; 0xea6 <DC_MOTOR_u8rotatedirection+0x208>
	else if (__tmp > 65535)
     e28:	6f 81       	ldd	r22, Y+7	; 0x07
     e2a:	78 85       	ldd	r23, Y+8	; 0x08
     e2c:	89 85       	ldd	r24, Y+9	; 0x09
     e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	3f ef       	ldi	r19, 0xFF	; 255
     e34:	4f e7       	ldi	r20, 0x7F	; 127
     e36:	57 e4       	ldi	r21, 0x47	; 71
     e38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e3c:	18 16       	cp	r1, r24
     e3e:	4c f5       	brge	.+82     	; 0xe92 <DC_MOTOR_u8rotatedirection+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e40:	6b 85       	ldd	r22, Y+11	; 0x0b
     e42:	7c 85       	ldd	r23, Y+12	; 0x0c
     e44:	8d 85       	ldd	r24, Y+13	; 0x0d
     e46:	9e 85       	ldd	r25, Y+14	; 0x0e
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	40 e2       	ldi	r20, 0x20	; 32
     e4e:	51 e4       	ldi	r21, 0x41	; 65
     e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e54:	dc 01       	movw	r26, r24
     e56:	cb 01       	movw	r24, r22
     e58:	bc 01       	movw	r22, r24
     e5a:	cd 01       	movw	r24, r26
     e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
     e68:	0f c0       	rjmp	.+30     	; 0xe88 <DC_MOTOR_u8rotatedirection+0x1ea>
     e6a:	89 e1       	ldi	r24, 0x19	; 25
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	9c 83       	std	Y+4, r25	; 0x04
     e70:	8b 83       	std	Y+3, r24	; 0x03
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	f1 f7       	brne	.-4      	; 0xe76 <DC_MOTOR_u8rotatedirection+0x1d8>
     e7a:	9c 83       	std	Y+4, r25	; 0x04
     e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7e:	8d 81       	ldd	r24, Y+5	; 0x05
     e80:	9e 81       	ldd	r25, Y+6	; 0x06
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	9e 83       	std	Y+6, r25	; 0x06
     e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e88:	8d 81       	ldd	r24, Y+5	; 0x05
     e8a:	9e 81       	ldd	r25, Y+6	; 0x06
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	69 f7       	brne	.-38     	; 0xe6a <DC_MOTOR_u8rotatedirection+0x1cc>
     e90:	16 c0       	rjmp	.+44     	; 0xebe <DC_MOTOR_u8rotatedirection+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e92:	6f 81       	ldd	r22, Y+7	; 0x07
     e94:	78 85       	ldd	r23, Y+8	; 0x08
     e96:	89 85       	ldd	r24, Y+9	; 0x09
     e98:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	9e 83       	std	Y+6, r25	; 0x06
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	8d 81       	ldd	r24, Y+5	; 0x05
     ea8:	9e 81       	ldd	r25, Y+6	; 0x06
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	89 81       	ldd	r24, Y+1	; 0x01
     eb0:	9a 81       	ldd	r25, Y+2	; 0x02
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	f1 f7       	brne	.-4      	; 0xeb2 <DC_MOTOR_u8rotatedirection+0x214>
     eb6:	9a 83       	std	Y+2, r25	; 0x02
     eb8:	89 83       	std	Y+1, r24	; 0x01
     eba:	01 c0       	rjmp	.+2      	; 0xebe <DC_MOTOR_u8rotatedirection+0x220>
       _delay_ms(200);
    }
else{u8 localErrorState = STD_TYBES_NOK;}
     ebc:	1d 8e       	std	Y+29, r1	; 0x1d
return local_u8ErrorState;}
     ebe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ec0:	6f 96       	adiw	r28, 0x1f	; 31
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	cf 91       	pop	r28
     ece:	df 91       	pop	r29
     ed0:	08 95       	ret

00000ed2 <EXTI_u8EXTIEnable>:
#include "EXTI_ privet.h"
#include "EXTI_ config.h"
static void(*EXTI_ApfEXTI[NUM])(void)={NULL,NULL,NULL};

 u8 EXTI_u8EXTIEnable(u8 copy_u8EXTIIndex,u8 copy_u8EXTIEdgeIndex)
 {
     ed2:	df 93       	push	r29
     ed4:	cf 93       	push	r28
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	2b 97       	sbiw	r28, 0x0b	; 11
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	8a 83       	std	Y+2, r24	; 0x02
     ee8:	6b 83       	std	Y+3, r22	; 0x03
     u8 Local_u8ErrorState =STD_TYBES_OK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
     switch(copy_u8EXTIIndex)
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3b 87       	std	Y+11, r19	; 0x0b
     ef6:	2a 87       	std	Y+10, r18	; 0x0a
     ef8:	8a 85       	ldd	r24, Y+10	; 0x0a
     efa:	9b 85       	ldd	r25, Y+11	; 0x0b
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <EXTI_u8EXTIEnable+0x32>
     f02:	85 c0       	rjmp	.+266    	; 0x100e <EXTI_u8EXTIEnable+0x13c>
     f04:	2a 85       	ldd	r18, Y+10	; 0x0a
     f06:	3b 85       	ldd	r19, Y+11	; 0x0b
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <EXTI_u8EXTIEnable+0x3e>
     f0e:	f9 c0       	rjmp	.+498    	; 0x1102 <EXTI_u8EXTIEnable+0x230>
     f10:	8a 85       	ldd	r24, Y+10	; 0x0a
     f12:	9b 85       	ldd	r25, Y+11	; 0x0b
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	09 f0       	breq	.+2      	; 0xf1a <EXTI_u8EXTIEnable+0x48>
     f18:	23 c1       	rjmp	.+582    	; 0x1160 <EXTI_u8EXTIEnable+0x28e>
     {
     case EXTI_u8_INT0:
        switch(copy_u8EXTIEdgeIndex)
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	39 87       	std	Y+9, r19	; 0x09
     f22:	28 87       	std	Y+8, r18	; 0x08
     f24:	88 85       	ldd	r24, Y+8	; 0x08
     f26:	99 85       	ldd	r25, Y+9	; 0x09
     f28:	81 30       	cpi	r24, 0x01	; 1
     f2a:	91 05       	cpc	r25, r1
     f2c:	61 f1       	breq	.+88     	; 0xf86 <EXTI_u8EXTIEnable+0xb4>
     f2e:	28 85       	ldd	r18, Y+8	; 0x08
     f30:	39 85       	ldd	r19, Y+9	; 0x09
     f32:	22 30       	cpi	r18, 0x02	; 2
     f34:	31 05       	cpc	r19, r1
     f36:	2c f4       	brge	.+10     	; 0xf42 <EXTI_u8EXTIEnable+0x70>
     f38:	88 85       	ldd	r24, Y+8	; 0x08
     f3a:	99 85       	ldd	r25, Y+9	; 0x09
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	69 f0       	breq	.+26     	; 0xf5a <EXTI_u8EXTIEnable+0x88>
     f40:	64 c0       	rjmp	.+200    	; 0x100a <EXTI_u8EXTIEnable+0x138>
     f42:	28 85       	ldd	r18, Y+8	; 0x08
     f44:	39 85       	ldd	r19, Y+9	; 0x09
     f46:	23 30       	cpi	r18, 0x03	; 3
     f48:	31 05       	cpc	r19, r1
     f4a:	99 f1       	breq	.+102    	; 0xfb2 <EXTI_u8EXTIEnable+0xe0>
     f4c:	88 85       	ldd	r24, Y+8	; 0x08
     f4e:	99 85       	ldd	r25, Y+9	; 0x09
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	91 05       	cpc	r25, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <EXTI_u8EXTIEnable+0x86>
     f56:	43 c0       	rjmp	.+134    	; 0xfde <EXTI_u8EXTIEnable+0x10c>
     f58:	58 c0       	rjmp	.+176    	; 0x100a <EXTI_u8EXTIEnable+0x138>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR,ISC1);
     f5a:	a5 e5       	ldi	r26, 0x55	; 85
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e5 e5       	ldi	r30, 0x55	; 85
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR,ISC0);
     f68:	a5 e5       	ldi	r26, 0x55	; 85
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e5       	ldi	r30, 0x55	; 85
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN6);
     f76:	ab e5       	ldi	r26, 0x5B	; 91
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	eb e5       	ldi	r30, 0x5B	; 91
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8c 93       	st	X, r24
     f84:	ee c0       	rjmp	.+476    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_FALLING_EDGE:
            SET_BIT(EXTI_u8_MCUCR,ISC1);
     f86:	a5 e5       	ldi	r26, 0x55	; 85
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e5 e5       	ldi	r30, 0x55	; 85
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	82 60       	ori	r24, 0x02	; 2
     f92:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR,ISC0);
     f94:	a5 e5       	ldi	r26, 0x55	; 85
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e5 e5       	ldi	r30, 0x55	; 85
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8e 7f       	andi	r24, 0xFE	; 254
     fa0:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN6);
     fa2:	ab e5       	ldi	r26, 0x5B	; 91
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e5       	ldi	r30, 0x5B	; 91
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 64       	ori	r24, 0x40	; 64
     fae:	8c 93       	st	X, r24
     fb0:	d8 c0       	rjmp	.+432    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR,ISC1);
     fb2:	a5 e5       	ldi	r26, 0x55	; 85
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e5 e5       	ldi	r30, 0x55	; 85
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	8d 7f       	andi	r24, 0xFD	; 253
     fbe:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR,ISC0);
     fc0:	a5 e5       	ldi	r26, 0x55	; 85
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e5 e5       	ldi	r30, 0x55	; 85
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	81 60       	ori	r24, 0x01	; 1
     fcc:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN6);
     fce:	ab e5       	ldi	r26, 0x5B	; 91
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	eb e5       	ldi	r30, 0x5B	; 91
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	80 64       	ori	r24, 0x40	; 64
     fda:	8c 93       	st	X, r24
     fdc:	c2 c0       	rjmp	.+388    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR,ISC1);
     fde:	a5 e5       	ldi	r26, 0x55	; 85
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e5 e5       	ldi	r30, 0x55	; 85
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	8d 7f       	andi	r24, 0xFD	; 253
     fea:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR,ISC0);
     fec:	a5 e5       	ldi	r26, 0x55	; 85
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e5       	ldi	r30, 0x55	; 85
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	8e 7f       	andi	r24, 0xFE	; 254
     ff8:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN6);
     ffa:	ab e5       	ldi	r26, 0x5B	; 91
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	eb e5       	ldi	r30, 0x5B	; 91
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 64       	ori	r24, 0x40	; 64
    1006:	8c 93       	st	X, r24
    1008:	ac c0       	rjmp	.+344    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            default:Local_u8ErrorState=STD_TYBES_NOK;
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	aa c0       	rjmp	.+340    	; 0x1162 <EXTI_u8EXTIEnable+0x290>

        }
        break;
        case EXTI_u8_INT1:
        switch(copy_u8EXTIEdgeIndex)
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	3f 83       	std	Y+7, r19	; 0x07
    1016:	2e 83       	std	Y+6, r18	; 0x06
    1018:	8e 81       	ldd	r24, Y+6	; 0x06
    101a:	9f 81       	ldd	r25, Y+7	; 0x07
    101c:	81 30       	cpi	r24, 0x01	; 1
    101e:	91 05       	cpc	r25, r1
    1020:	61 f1       	breq	.+88     	; 0x107a <EXTI_u8EXTIEnable+0x1a8>
    1022:	2e 81       	ldd	r18, Y+6	; 0x06
    1024:	3f 81       	ldd	r19, Y+7	; 0x07
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	2c f4       	brge	.+10     	; 0x1036 <EXTI_u8EXTIEnable+0x164>
    102c:	8e 81       	ldd	r24, Y+6	; 0x06
    102e:	9f 81       	ldd	r25, Y+7	; 0x07
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f0       	breq	.+26     	; 0x104e <EXTI_u8EXTIEnable+0x17c>
    1034:	64 c0       	rjmp	.+200    	; 0x10fe <EXTI_u8EXTIEnable+0x22c>
    1036:	2e 81       	ldd	r18, Y+6	; 0x06
    1038:	3f 81       	ldd	r19, Y+7	; 0x07
    103a:	23 30       	cpi	r18, 0x03	; 3
    103c:	31 05       	cpc	r19, r1
    103e:	99 f1       	breq	.+102    	; 0x10a6 <EXTI_u8EXTIEnable+0x1d4>
    1040:	8e 81       	ldd	r24, Y+6	; 0x06
    1042:	9f 81       	ldd	r25, Y+7	; 0x07
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	91 05       	cpc	r25, r1
    1048:	09 f4       	brne	.+2      	; 0x104c <EXTI_u8EXTIEnable+0x17a>
    104a:	43 c0       	rjmp	.+134    	; 0x10d2 <EXTI_u8EXTIEnable+0x200>
    104c:	58 c0       	rjmp	.+176    	; 0x10fe <EXTI_u8EXTIEnable+0x22c>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR,ISC11);
    104e:	a5 e5       	ldi	r26, 0x55	; 85
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e5 e5       	ldi	r30, 0x55	; 85
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 60       	ori	r24, 0x08	; 8
    105a:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR,ISC10);
    105c:	a5 e5       	ldi	r26, 0x55	; 85
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e5 e5       	ldi	r30, 0x55	; 85
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	84 60       	ori	r24, 0x04	; 4
    1068:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN7);
    106a:	ab e5       	ldi	r26, 0x5B	; 91
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	eb e5       	ldi	r30, 0x5B	; 91
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	80 68       	ori	r24, 0x80	; 128
    1076:	8c 93       	st	X, r24
    1078:	74 c0       	rjmp	.+232    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_FALLING_EDGE:
            SET_BIT(EXTI_u8_MCUCR,ISC11);
    107a:	a5 e5       	ldi	r26, 0x55	; 85
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e5 e5       	ldi	r30, 0x55	; 85
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	88 60       	ori	r24, 0x08	; 8
    1086:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR,ISC10);
    1088:	a5 e5       	ldi	r26, 0x55	; 85
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e5 e5       	ldi	r30, 0x55	; 85
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8b 7f       	andi	r24, 0xFB	; 251
    1094:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN7);
    1096:	ab e5       	ldi	r26, 0x5B	; 91
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	eb e5       	ldi	r30, 0x5B	; 91
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	8c 93       	st	X, r24
    10a4:	5e c0       	rjmp	.+188    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_LOGICAL_CHANGE:
            CLR_BIT(EXTI_u8_MCUCR,ISC11);
    10a6:	a5 e5       	ldi	r26, 0x55	; 85
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e5 e5       	ldi	r30, 0x55	; 85
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_MCUCR,ISC10);
    10b4:	a5 e5       	ldi	r26, 0x55	; 85
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e5 e5       	ldi	r30, 0x55	; 85
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	84 60       	ori	r24, 0x04	; 4
    10c0:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN7);
    10c2:	ab e5       	ldi	r26, 0x5B	; 91
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	eb e5       	ldi	r30, 0x5B	; 91
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	80 68       	ori	r24, 0x80	; 128
    10ce:	8c 93       	st	X, r24
    10d0:	48 c0       	rjmp	.+144    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_LOW_LEVEL:
            CLR_BIT(EXTI_u8_MCUCR,ISC11);
    10d2:	a5 e5       	ldi	r26, 0x55	; 85
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e5 e5       	ldi	r30, 0x55	; 85
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	87 7f       	andi	r24, 0xF7	; 247
    10de:	8c 93       	st	X, r24
            CLR_BIT(EXTI_u8_MCUCR,ISC10);
    10e0:	a5 e5       	ldi	r26, 0x55	; 85
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	e5 e5       	ldi	r30, 0x55	; 85
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	8b 7f       	andi	r24, 0xFB	; 251
    10ec:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN7);
    10ee:	ab e5       	ldi	r26, 0x5B	; 91
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	eb e5       	ldi	r30, 0x5B	; 91
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	80 68       	ori	r24, 0x80	; 128
    10fa:	8c 93       	st	X, r24
    10fc:	32 c0       	rjmp	.+100    	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            default:Local_u8ErrorState=STD_TYBES_NOK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	30 c0       	rjmp	.+96     	; 0x1162 <EXTI_u8EXTIEnable+0x290>

     }
     break;
     case EXTI_u8_INT2:
        switch(copy_u8EXTIEdgeIndex)
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3d 83       	std	Y+5, r19	; 0x05
    110a:	2c 83       	std	Y+4, r18	; 0x04
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	9d 81       	ldd	r25, Y+5	; 0x05
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <EXTI_u8EXTIEnable+0x24e>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	81 f0       	breq	.+32     	; 0x113e <EXTI_u8EXTIEnable+0x26c>
    111e:	1e c0       	rjmp	.+60     	; 0x115c <EXTI_u8EXTIEnable+0x28a>
        {
        case EXTI_u8_RAISING_EDGE:
            SET_BIT(EXTI_u8_MCUCR,ISC6);
    1120:	a5 e5       	ldi	r26, 0x55	; 85
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e5 e5       	ldi	r30, 0x55	; 85
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	80 64       	ori	r24, 0x40	; 64
    112c:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN5);
    112e:	ab e5       	ldi	r26, 0x5B	; 91
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e5       	ldi	r30, 0x5B	; 91
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	8c 93       	st	X, r24
    113c:	12 c0       	rjmp	.+36     	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            case EXTI_u8_FALLING_EDGE:
            CLR_BIT(EXTI_u8_MCUCR,ISC6);
    113e:	a5 e5       	ldi	r26, 0x55	; 85
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	e5 e5       	ldi	r30, 0x55	; 85
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8f 7b       	andi	r24, 0xBF	; 191
    114a:	8c 93       	st	X, r24
            SET_BIT(EXTI_u8_GICR,PIN5);
    114c:	ab e5       	ldi	r26, 0x5B	; 91
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb e5       	ldi	r30, 0x5B	; 91
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 62       	ori	r24, 0x20	; 32
    1158:	8c 93       	st	X, r24
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <EXTI_u8EXTIEnable+0x290>
            break;
            default:Local_u8ErrorState=STD_TYBES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <EXTI_u8EXTIEnable+0x290>

     }
     break;
     default:Local_u8ErrorState=STD_TYBES_NOK;
    1160:	19 82       	std	Y+1, r1	; 0x01
     }
     return Local_u8ErrorState;
    1162:	89 81       	ldd	r24, Y+1	; 0x01

 }
    1164:	2b 96       	adiw	r28, 0x0b	; 11
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <EXTI_u8EXTIDisable>:
u8 EXTI_u8EXTIDisable(u8 copy_u8EXTIIndex)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <EXTI_u8EXTIDisable+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <EXTI_u8EXTIDisable+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_u8ErrorState=STD_TYBES_OK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01
    switch (copy_u8EXTIIndex){
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	61 f5       	brne	.+88     	; 0x11ea <EXTI_u8EXTIDisable+0x74>
    case EXTI_u8_INT0:
        switch(copy_u8EXTIIndex)
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	3c 83       	std	Y+4, r19	; 0x04
    119a:	2b 83       	std	Y+3, r18	; 0x03
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	91 05       	cpc	r25, r1
    11a4:	89 f0       	breq	.+34     	; 0x11c8 <EXTI_u8EXTIDisable+0x52>
    11a6:	2b 81       	ldd	r18, Y+3	; 0x03
    11a8:	3c 81       	ldd	r19, Y+4	; 0x04
    11aa:	22 30       	cpi	r18, 0x02	; 2
    11ac:	31 05       	cpc	r19, r1
    11ae:	a1 f0       	breq	.+40     	; 0x11d8 <EXTI_u8EXTIDisable+0x62>
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	c1 f4       	brne	.+48     	; 0x11e8 <EXTI_u8EXTIDisable+0x72>
        {
        case EXTI_u8_INT0:
            CLR_BIT(EXTI_u8_GICR,PIN6);
    11b8:	ab e5       	ldi	r26, 0x5B	; 91
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e5       	ldi	r30, 0x5B	; 91
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	8f 7b       	andi	r24, 0xBF	; 191
    11c4:	8c 93       	st	X, r24
    11c6:	11 c0       	rjmp	.+34     	; 0x11ea <EXTI_u8EXTIDisable+0x74>
            break;
            case EXTI_u8_INT1:
            CLR_BIT(EXTI_u8_GICR,PIN7);
    11c8:	ab e5       	ldi	r26, 0x5B	; 91
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	eb e5       	ldi	r30, 0x5B	; 91
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8f 77       	andi	r24, 0x7F	; 127
    11d4:	8c 93       	st	X, r24
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <EXTI_u8EXTIDisable+0x74>
            break;
            case EXTI_u8_INT2:
            CLR_BIT(EXTI_u8_GICR,PIN5);
    11d8:	ab e5       	ldi	r26, 0x5B	; 91
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	eb e5       	ldi	r30, 0x5B	; 91
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7d       	andi	r24, 0xDF	; 223
    11e4:	8c 93       	st	X, r24
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <EXTI_u8EXTIDisable+0x74>
            break;
            default:local_u8ErrorState=STD_TYBES_NOK;}
    11e8:	19 82       	std	Y+1, r1	; 0x01
}
return local_u8ErrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <EXTI_u8EXTISetCallBack>:
u8 EXTI_u8EXTISetCallBack(u8 copy_u8EXTIIndex,void(*copy_pf)(void))
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <EXTI_u8EXTISetCallBack+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <EXTI_u8EXTISetCallBack+0x8>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	8a 83       	std	Y+2, r24	; 0x02
    1208:	7c 83       	std	Y+4, r23	; 0x04
    120a:	6b 83       	std	Y+3, r22	; 0x03
    u8 local_u8Errorstate= STD_TYBES_OK;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	89 83       	std	Y+1, r24	; 0x01
    if((copy_u8EXTIIndex <= EXTI_u8_INT2) && (copy_pf=! NULL))
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	88 f4       	brcc	.+34     	; 0x1238 <EXTI_u8EXTISetCallBack+0x3e>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
        {
         EXTI_ApfEXTI[copy_u8EXTIIndex]=copy_pf;
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e8 52       	subi	r30, 0x28	; 40
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	91 83       	std	Z+1, r25	; 0x01
    1234:	80 83       	st	Z, r24
    1236:	01 c0       	rjmp	.+2      	; 0x123a <EXTI_u8EXTISetCallBack+0x40>
        }
    else{local_u8Errorstate=STD_TYBES_NOK;}
    1238:	19 82       	std	Y+1, r1	; 0x01
    return local_u8Errorstate;
    123a:	89 81       	ldd	r24, Y+1	; 0x01
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <__vector_1>:
/*PROTOTYPE FOR EXTI0*/
void __vector_1(void)   __attribute__((signal));
void __vector_1(void)
{
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	4f 93       	push	r20
    125a:	5f 93       	push	r21
    125c:	6f 93       	push	r22
    125e:	7f 93       	push	r23
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	af 93       	push	r26
    1266:	bf 93       	push	r27
    1268:	ef 93       	push	r30
    126a:	ff 93       	push	r31
    126c:	df 93       	push	r29
    126e:	cf 93       	push	r28
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_ApfEXTI[EXTI_u8_INT0]!=NULL){
    1274:	80 91 d8 00 	lds	r24, 0x00D8
    1278:	90 91 d9 00 	lds	r25, 0x00D9
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	29 f0       	breq	.+10     	; 0x128a <__vector_1+0x40>
    EXTI_ApfEXTI[EXTI_u8_INT0]();
    1280:	e0 91 d8 00 	lds	r30, 0x00D8
    1284:	f0 91 d9 00 	lds	r31, 0x00D9
    1288:	09 95       	icall
    }
}
    128a:	cf 91       	pop	r28
    128c:	df 91       	pop	r29
    128e:	ff 91       	pop	r31
    1290:	ef 91       	pop	r30
    1292:	bf 91       	pop	r27
    1294:	af 91       	pop	r26
    1296:	9f 91       	pop	r25
    1298:	8f 91       	pop	r24
    129a:	7f 91       	pop	r23
    129c:	6f 91       	pop	r22
    129e:	5f 91       	pop	r21
    12a0:	4f 91       	pop	r20
    12a2:	3f 91       	pop	r19
    12a4:	2f 91       	pop	r18
    12a6:	0f 90       	pop	r0
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	0f 90       	pop	r0
    12ac:	1f 90       	pop	r1
    12ae:	18 95       	reti

000012b0 <__vector_2>:
/*PROTOTYPE FOR EXTI1*/
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
    12b0:	1f 92       	push	r1
    12b2:	0f 92       	push	r0
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	0f 92       	push	r0
    12b8:	11 24       	eor	r1, r1
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_ApfEXTI[EXTI_u8_INT1]!=NULL){
    12da:	80 91 da 00 	lds	r24, 0x00DA
    12de:	90 91 db 00 	lds	r25, 0x00DB
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	29 f0       	breq	.+10     	; 0x12f0 <__vector_2+0x40>
    EXTI_ApfEXTI[EXTI_u8_INT1]();
    12e6:	e0 91 da 00 	lds	r30, 0x00DA
    12ea:	f0 91 db 00 	lds	r31, 0x00DB
    12ee:	09 95       	icall
    }
}
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	ff 91       	pop	r31
    12f6:	ef 91       	pop	r30
    12f8:	bf 91       	pop	r27
    12fa:	af 91       	pop	r26
    12fc:	9f 91       	pop	r25
    12fe:	8f 91       	pop	r24
    1300:	7f 91       	pop	r23
    1302:	6f 91       	pop	r22
    1304:	5f 91       	pop	r21
    1306:	4f 91       	pop	r20
    1308:	3f 91       	pop	r19
    130a:	2f 91       	pop	r18
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_3>:
/*PROTOTYPE FOR EXTI2*/
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	2f 93       	push	r18
    1322:	3f 93       	push	r19
    1324:	4f 93       	push	r20
    1326:	5f 93       	push	r21
    1328:	6f 93       	push	r22
    132a:	7f 93       	push	r23
    132c:	8f 93       	push	r24
    132e:	9f 93       	push	r25
    1330:	af 93       	push	r26
    1332:	bf 93       	push	r27
    1334:	ef 93       	push	r30
    1336:	ff 93       	push	r31
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    if (EXTI_ApfEXTI[EXTI_u8_INT2]!=NULL){
    1340:	80 91 dc 00 	lds	r24, 0x00DC
    1344:	90 91 dd 00 	lds	r25, 0x00DD
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	29 f0       	breq	.+10     	; 0x1356 <__vector_3+0x40>
    EXTI_ApfEXTI[EXTI_u8_INT2]();
    134c:	e0 91 dc 00 	lds	r30, 0x00DC
    1350:	f0 91 dd 00 	lds	r31, 0x00DD
    1354:	09 95       	icall
    }
}
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <GI_voidenable>:
#include "BIT_MATH.h"
#include "GI_interface.h"

#define   SREG     *((volatile u8*)0x5f)
 void GI_voidenable(void)
 {
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(SREG,7);
    1384:	af e5       	ldi	r26, 0x5F	; 95
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ef e5       	ldi	r30, 0x5F	; 95
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	80 68       	ori	r24, 0x80	; 128
    1390:	8c 93       	st	X, r24
 }
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GI_voidDisable>:
void GI_voidDisable(void)
{
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	cd b7       	in	r28, 0x3d	; 61
    139e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG,7);
    13a0:	af e5       	ldi	r26, 0x5F	; 95
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	ef e5       	ldi	r30, 0x5F	; 95
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	8f 77       	andi	r24, 0x7F	; 127
    13ac:	8c 93       	st	X, r24
}
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <KPD_u8GetKeyState>:

const u8 KDP_Au8RowsPins[4]={KDP_u8_R1_PIN,KDP_u8_R2_PIN,KDP_u8_R3_PIN,KDP_u8_R4_PIN};
const u8 KDP_Au8ColsPins[4]={KDP_u8_C1_PIN,KDP_u8_C2_PIN,KDP_u8_C3_PIN,KDP_u8_C4_PIN};

u8 KPD_u8GetKeyState(u8* copy_pu8ReturnedKey)
{u8 localErrorState = STD_TYBES_OK;
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	67 97       	sbiw	r28, 0x17	; 23
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	9e 8b       	std	Y+22, r25	; 0x16
    13ca:	8d 8b       	std	Y+21, r24	; 0x15
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	8b 8b       	std	Y+19, r24	; 0x13
 u8 local_u8RowsCounter,local_u8ColsCounter,Local_u8PinValue,Local_u8Flag=0;
    13d0:	18 8a       	std	Y+16, r1	; 0x10
 if(copy_pu8ReturnedKey!=NULL)
    13d2:	8d 89       	ldd	r24, Y+21	; 0x15
    13d4:	9e 89       	ldd	r25, Y+22	; 0x16
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	09 f4       	brne	.+2      	; 0x13dc <KPD_u8GetKeyState+0x28>
    13da:	f0 c0       	rjmp	.+480    	; 0x15bc <KPD_u8GetKeyState+0x208>
 {
	 *copy_pu8ReturnedKey = KPD_KEY_NOT_PRESSED;
    13dc:	ed 89       	ldd	r30, Y+21	; 0x15
    13de:	fe 89       	ldd	r31, Y+22	; 0x16
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
    13e4:	1a 8a       	std	Y+18, r1	; 0x12
    13e6:	e5 c0       	rjmp	.+458    	; 0x15b2 <KPD_u8GetKeyState+0x1fe>
     {
         DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_LOW);
    13e8:	8a 89       	ldd	r24, Y+18	; 0x12
    13ea:	88 2f       	mov	r24, r24
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	fc 01       	movw	r30, r24
    13f0:	e3 53       	subi	r30, 0x33	; 51
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	90 81       	ld	r25, Z
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	69 2f       	mov	r22, r25
    13fa:	40 e0       	ldi	r20, 0x00	; 0
    13fc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
         /*Check Which input pins Has a zero*/
         for(local_u8ColsCounter=0;local_u8ColsCounter<=3;local_u8ColsCounter++)
    1400:	19 8a       	std	Y+17, r1	; 0x11
    1402:	c1 c0       	rjmp	.+386    	; 0x1586 <KPD_u8GetKeyState+0x1d2>
         {
         DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	88 2f       	mov	r24, r24
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	fc 01       	movw	r30, r24
    140c:	ef 52       	subi	r30, 0x2F	; 47
    140e:	ff 4f       	sbci	r31, 0xFF	; 255
    1410:	90 81       	ld	r25, Z
    1412:	9e 01       	movw	r18, r28
    1414:	2c 5e       	subi	r18, 0xEC	; 236
    1416:	3f 4f       	sbci	r19, 0xFF	; 255
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	69 2f       	mov	r22, r25
    141c:	a9 01       	movw	r20, r18
    141e:	0e 94 08 1b 	call	0x3610	; 0x3610 <DIO_u8GetPinValue>
             if(Local_u8PinValue==DIO_u8_LOW)/*Switch is pressed*/
    1422:	8c 89       	ldd	r24, Y+20	; 0x14
    1424:	88 23       	and	r24, r24
    1426:	09 f0       	breq	.+2      	; 0x142a <KPD_u8GetKeyState+0x76>
    1428:	ab c0       	rjmp	.+342    	; 0x1580 <KPD_u8GetKeyState+0x1cc>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a0 ea       	ldi	r26, 0xA0	; 160
    1430:	b1 e4       	ldi	r27, 0x41	; 65
    1432:	8b 87       	std	Y+11, r24	; 0x0b
    1434:	9c 87       	std	Y+12, r25	; 0x0c
    1436:	ad 87       	std	Y+13, r26	; 0x0d
    1438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    143a:	6b 85       	ldd	r22, Y+11	; 0x0b
    143c:	7c 85       	ldd	r23, Y+12	; 0x0c
    143e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1440:	9e 85       	ldd	r25, Y+14	; 0x0e
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	4a ef       	ldi	r20, 0xFA	; 250
    1448:	54 e4       	ldi	r21, 0x44	; 68
    144a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8f 83       	std	Y+7, r24	; 0x07
    1454:	98 87       	std	Y+8, r25	; 0x08
    1456:	a9 87       	std	Y+9, r26	; 0x09
    1458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    145a:	6f 81       	ldd	r22, Y+7	; 0x07
    145c:	78 85       	ldd	r23, Y+8	; 0x08
    145e:	89 85       	ldd	r24, Y+9	; 0x09
    1460:	9a 85       	ldd	r25, Y+10	; 0x0a
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e8       	ldi	r20, 0x80	; 128
    1468:	5f e3       	ldi	r21, 0x3F	; 63
    146a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    146e:	88 23       	and	r24, r24
    1470:	2c f4       	brge	.+10     	; 0x147c <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9e 83       	std	Y+6, r25	; 0x06
    1478:	8d 83       	std	Y+5, r24	; 0x05
    147a:	3f c0       	rjmp	.+126    	; 0x14fa <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    147c:	6f 81       	ldd	r22, Y+7	; 0x07
    147e:	78 85       	ldd	r23, Y+8	; 0x08
    1480:	89 85       	ldd	r24, Y+9	; 0x09
    1482:	9a 85       	ldd	r25, Y+10	; 0x0a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	3f ef       	ldi	r19, 0xFF	; 255
    1488:	4f e7       	ldi	r20, 0x7F	; 127
    148a:	57 e4       	ldi	r21, 0x47	; 71
    148c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1490:	18 16       	cp	r1, r24
    1492:	4c f5       	brge	.+82     	; 0x14e6 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1494:	6b 85       	ldd	r22, Y+11	; 0x0b
    1496:	7c 85       	ldd	r23, Y+12	; 0x0c
    1498:	8d 85       	ldd	r24, Y+13	; 0x0d
    149a:	9e 85       	ldd	r25, Y+14	; 0x0e
    149c:	20 e0       	ldi	r18, 0x00	; 0
    149e:	30 e0       	ldi	r19, 0x00	; 0
    14a0:	40 e2       	ldi	r20, 0x20	; 32
    14a2:	51 e4       	ldi	r21, 0x41	; 65
    14a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b4:	dc 01       	movw	r26, r24
    14b6:	cb 01       	movw	r24, r22
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	0f c0       	rjmp	.+30     	; 0x14dc <KPD_u8GetKeyState+0x128>
    14be:	88 ec       	ldi	r24, 0xC8	; 200
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 83       	std	Y+4, r25	; 0x04
    14c4:	8b 83       	std	Y+3, r24	; 0x03
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	01 97       	sbiw	r24, 0x01	; 1
    14cc:	f1 f7       	brne	.-4      	; 0x14ca <KPD_u8GetKeyState+0x116>
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	9e 81       	ldd	r25, Y+6	; 0x06
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	69 f7       	brne	.-38     	; 0x14be <KPD_u8GetKeyState+0x10a>
    14e4:	14 c0       	rjmp	.+40     	; 0x150e <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	89 83       	std	Y+1, r24	; 0x01
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	01 97       	sbiw	r24, 0x01	; 1
    1508:	f1 f7       	brne	.-4      	; 0x1506 <KPD_u8GetKeyState+0x152>
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
                  {
                /*Debouncing*/
            _delay_ms(20);
            DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
    150e:	89 89       	ldd	r24, Y+17	; 0x11
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	ef 52       	subi	r30, 0x2F	; 47
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	90 81       	ld	r25, Z
    151c:	9e 01       	movw	r18, r28
    151e:	2c 5e       	subi	r18, 0xEC	; 236
    1520:	3f 4f       	sbci	r19, 0xFF	; 255
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	69 2f       	mov	r22, r25
    1526:	a9 01       	movw	r20, r18
    1528:	0e 94 08 1b 	call	0x3610	; 0x3610 <DIO_u8GetPinValue>
    152c:	0f c0       	rjmp	.+30     	; 0x154c <KPD_u8GetKeyState+0x198>
            /*CHEACK if the pin is still equal low*/
            while(Local_u8PinValue==DIO_u8_LOW)
            {
                DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
    152e:	89 89       	ldd	r24, Y+17	; 0x11
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	fc 01       	movw	r30, r24
    1536:	ef 52       	subi	r30, 0x2F	; 47
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	90 81       	ld	r25, Z
    153c:	9e 01       	movw	r18, r28
    153e:	2c 5e       	subi	r18, 0xEC	; 236
    1540:	3f 4f       	sbci	r19, 0xFF	; 255
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	69 2f       	mov	r22, r25
    1546:	a9 01       	movw	r20, r18
    1548:	0e 94 08 1b 	call	0x3610	; 0x3610 <DIO_u8GetPinValue>
                  {
                /*Debouncing*/
            _delay_ms(20);
            DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
            /*CHEACK if the pin is still equal low*/
            while(Local_u8PinValue==DIO_u8_LOW)
    154c:	8c 89       	ldd	r24, Y+20	; 0x14
    154e:	88 23       	and	r24, r24
    1550:	71 f3       	breq	.-36     	; 0x152e <KPD_u8GetKeyState+0x17a>
            {
                DIO_u8GetPinValue(KDP_u8_PORT,KDP_Au8ColsPins[local_u8ColsCounter],&Local_u8PinValue);
            }
            *copy_pu8ReturnedKey=KPD_Au8Keys[local_u8RowsCounter][local_u8ColsCounter];
    1552:	8a 89       	ldd	r24, Y+18	; 0x12
    1554:	48 2f       	mov	r20, r24
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	89 89       	ldd	r24, Y+17	; 0x11
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	ca 01       	movw	r24, r20
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	fc 01       	movw	r30, r24
    156e:	e3 54       	subi	r30, 0x43	; 67
    1570:	ff 4f       	sbci	r31, 0xFF	; 255
    1572:	80 81       	ld	r24, Z
    1574:	ed 89       	ldd	r30, Y+21	; 0x15
    1576:	fe 89       	ldd	r31, Y+22	; 0x16
    1578:	80 83       	st	Z, r24
            Local_u8Flag=1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	88 8b       	std	Y+16, r24	; 0x10
    157e:	07 c0       	rjmp	.+14     	; 0x158e <KPD_u8GetKeyState+0x1da>
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
     {
         DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_LOW);
         /*Check Which input pins Has a zero*/
         for(local_u8ColsCounter=0;local_u8ColsCounter<=3;local_u8ColsCounter++)
    1580:	89 89       	ldd	r24, Y+17	; 0x11
    1582:	8f 5f       	subi	r24, 0xFF	; 255
    1584:	89 8b       	std	Y+17, r24	; 0x11
    1586:	89 89       	ldd	r24, Y+17	; 0x11
    1588:	84 30       	cpi	r24, 0x04	; 4
    158a:	08 f4       	brcc	.+2      	; 0x158e <KPD_u8GetKeyState+0x1da>
    158c:	3b cf       	rjmp	.-394    	; 0x1404 <KPD_u8GetKeyState+0x50>
            break;

                   }

            }
                 DIO_u8SetpinValue(KDP_u8_PORT,KDP_Au8RowsPins[local_u8RowsCounter],DIO_u8_HIGH);
    158e:	8a 89       	ldd	r24, Y+18	; 0x12
    1590:	88 2f       	mov	r24, r24
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	e3 53       	subi	r30, 0x33	; 51
    1598:	ff 4f       	sbci	r31, 0xFF	; 255
    159a:	90 81       	ld	r25, Z
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	69 2f       	mov	r22, r25
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
                       if(Local_u8Flag==1)
    15a6:	88 89       	ldd	r24, Y+16	; 0x10
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	49 f0       	breq	.+18     	; 0x15be <KPD_u8GetKeyState+0x20a>
 u8 local_u8RowsCounter,local_u8ColsCounter,Local_u8PinValue,Local_u8Flag=0;
 if(copy_pu8ReturnedKey!=NULL)
 {
	 *copy_pu8ReturnedKey = KPD_KEY_NOT_PRESSED;
     /*Activate Each row =>For loop on the pin of the rows*/
     for(local_u8RowsCounter=0;local_u8RowsCounter<=3;local_u8RowsCounter++)
    15ac:	8a 89       	ldd	r24, Y+18	; 0x12
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	8a 8b       	std	Y+18, r24	; 0x12
    15b2:	8a 89       	ldd	r24, Y+18	; 0x12
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <KPD_u8GetKeyState+0x206>
    15b8:	17 cf       	rjmp	.-466    	; 0x13e8 <KPD_u8GetKeyState+0x34>
    15ba:	01 c0       	rjmp	.+2      	; 0x15be <KPD_u8GetKeyState+0x20a>
                         {
                         	 break;
                          }
     }
}
 else{u8 localErrorState = STD_TYBES_NOK;}
    15bc:	1f 86       	std	Y+15, r1	; 0x0f
}
    15be:	67 96       	adiw	r28, 0x17	; 23
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <LCD_voidInit>:
 #include "LCD_config.h"
 #include"LCD_interface.h"
 #include"LCD_private.h"

  void LCD_voidInit(void)
  {
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	c6 55       	subi	r28, 0x56	; 86
    15de:	d0 40       	sbci	r29, 0x00	; 0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	fe 01       	movw	r30, r28
    15ec:	ed 5a       	subi	r30, 0xAD	; 173
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	ac e0       	ldi	r26, 0x0C	; 12
    15f6:	b2 e4       	ldi	r27, 0x42	; 66
    15f8:	80 83       	st	Z, r24
    15fa:	91 83       	std	Z+1, r25	; 0x01
    15fc:	a2 83       	std	Z+2, r26	; 0x02
    15fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1600:	8e 01       	movw	r16, r28
    1602:	01 5b       	subi	r16, 0xB1	; 177
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	fe 01       	movw	r30, r28
    1608:	ed 5a       	subi	r30, 0xAD	; 173
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	4a e7       	ldi	r20, 0x7A	; 122
    161a:	53 e4       	ldi	r21, 0x43	; 67
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	f8 01       	movw	r30, r16
    1626:	80 83       	st	Z, r24
    1628:	91 83       	std	Z+1, r25	; 0x01
    162a:	a2 83       	std	Z+2, r26	; 0x02
    162c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162e:	fe 01       	movw	r30, r28
    1630:	e1 5b       	subi	r30, 0xB1	; 177
    1632:	ff 4f       	sbci	r31, 0xFF	; 255
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	82 81       	ldd	r24, Z+2	; 0x02
    163a:	93 81       	ldd	r25, Z+3	; 0x03
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	44 f4       	brge	.+16     	; 0x165c <LCD_voidInit+0x8c>
		__ticks = 1;
    164c:	fe 01       	movw	r30, r28
    164e:	e3 5b       	subi	r30, 0xB3	; 179
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
    165a:	64 c0       	rjmp	.+200    	; 0x1724 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    165c:	fe 01       	movw	r30, r28
    165e:	e1 5b       	subi	r30, 0xB1	; 177
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	60 81       	ld	r22, Z
    1664:	71 81       	ldd	r23, Z+1	; 0x01
    1666:	82 81       	ldd	r24, Z+2	; 0x02
    1668:	93 81       	ldd	r25, Z+3	; 0x03
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	3f ef       	ldi	r19, 0xFF	; 255
    166e:	4f e7       	ldi	r20, 0x7F	; 127
    1670:	57 e4       	ldi	r21, 0x47	; 71
    1672:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1676:	18 16       	cp	r1, r24
    1678:	0c f0       	brlt	.+2      	; 0x167c <LCD_voidInit+0xac>
    167a:	43 c0       	rjmp	.+134    	; 0x1702 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    167c:	fe 01       	movw	r30, r28
    167e:	ed 5a       	subi	r30, 0xAD	; 173
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	60 81       	ld	r22, Z
    1684:	71 81       	ldd	r23, Z+1	; 0x01
    1686:	82 81       	ldd	r24, Z+2	; 0x02
    1688:	93 81       	ldd	r25, Z+3	; 0x03
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	40 e2       	ldi	r20, 0x20	; 32
    1690:	51 e4       	ldi	r21, 0x41	; 65
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8e 01       	movw	r16, r28
    169c:	03 5b       	subi	r16, 0xB3	; 179
    169e:	1f 4f       	sbci	r17, 0xFF	; 255
    16a0:	bc 01       	movw	r22, r24
    16a2:	cd 01       	movw	r24, r26
    16a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	f8 01       	movw	r30, r16
    16ae:	91 83       	std	Z+1, r25	; 0x01
    16b0:	80 83       	st	Z, r24
    16b2:	1f c0       	rjmp	.+62     	; 0x16f2 <LCD_voidInit+0x122>
    16b4:	fe 01       	movw	r30, r28
    16b6:	e5 5b       	subi	r30, 0xB5	; 181
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	89 e1       	ldi	r24, 0x19	; 25
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	80 83       	st	Z, r24
    16c2:	fe 01       	movw	r30, r28
    16c4:	e5 5b       	subi	r30, 0xB5	; 181
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_voidInit+0xfc>
    16d0:	fe 01       	movw	r30, r28
    16d2:	e5 5b       	subi	r30, 0xB5	; 181
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16da:	de 01       	movw	r26, r28
    16dc:	a3 5b       	subi	r26, 0xB3	; 179
    16de:	bf 4f       	sbci	r27, 0xFF	; 255
    16e0:	fe 01       	movw	r30, r28
    16e2:	e3 5b       	subi	r30, 0xB3	; 179
    16e4:	ff 4f       	sbci	r31, 0xFF	; 255
    16e6:	80 81       	ld	r24, Z
    16e8:	91 81       	ldd	r25, Z+1	; 0x01
    16ea:	01 97       	sbiw	r24, 0x01	; 1
    16ec:	11 96       	adiw	r26, 0x01	; 1
    16ee:	9c 93       	st	X, r25
    16f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f2:	fe 01       	movw	r30, r28
    16f4:	e3 5b       	subi	r30, 0xB3	; 179
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	80 81       	ld	r24, Z
    16fa:	91 81       	ldd	r25, Z+1	; 0x01
    16fc:	00 97       	sbiw	r24, 0x00	; 0
    16fe:	d1 f6       	brne	.-76     	; 0x16b4 <LCD_voidInit+0xe4>
    1700:	27 c0       	rjmp	.+78     	; 0x1750 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1702:	8e 01       	movw	r16, r28
    1704:	03 5b       	subi	r16, 0xB3	; 179
    1706:	1f 4f       	sbci	r17, 0xFF	; 255
    1708:	fe 01       	movw	r30, r28
    170a:	e1 5b       	subi	r30, 0xB1	; 177
    170c:	ff 4f       	sbci	r31, 0xFF	; 255
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	f8 01       	movw	r30, r16
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	80 83       	st	Z, r24
    1724:	de 01       	movw	r26, r28
    1726:	a7 5b       	subi	r26, 0xB7	; 183
    1728:	bf 4f       	sbci	r27, 0xFF	; 255
    172a:	fe 01       	movw	r30, r28
    172c:	e3 5b       	subi	r30, 0xB3	; 179
    172e:	ff 4f       	sbci	r31, 0xFF	; 255
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	8d 93       	st	X+, r24
    1736:	9c 93       	st	X, r25
    1738:	fe 01       	movw	r30, r28
    173a:	e7 5b       	subi	r30, 0xB7	; 183
    173c:	ff 4f       	sbci	r31, 0xFF	; 255
    173e:	80 81       	ld	r24, Z
    1740:	91 81       	ldd	r25, Z+1	; 0x01
    1742:	01 97       	sbiw	r24, 0x01	; 1
    1744:	f1 f7       	brne	.-4      	; 0x1742 <LCD_voidInit+0x172>
    1746:	fe 01       	movw	r30, r28
    1748:	e7 5b       	subi	r30, 0xB7	; 183
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
       _delay_ms(35);
       /*FUNCTION SET CMND*/
       LCD_voidSendCmnd(0B00111000);
    1750:	88 e3       	ldi	r24, 0x38	; 56
    1752:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>
    1756:	fe 01       	movw	r30, r28
    1758:	eb 5b       	subi	r30, 0xBB	; 187
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e2       	ldi	r26, 0x20	; 32
    1762:	b2 e4       	ldi	r27, 0x42	; 66
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    176c:	8e 01       	movw	r16, r28
    176e:	0f 5b       	subi	r16, 0xBF	; 191
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	eb 5b       	subi	r30, 0xBB	; 187
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	2b ea       	ldi	r18, 0xAB	; 171
    1782:	3a ea       	ldi	r19, 0xAA	; 170
    1784:	4a ea       	ldi	r20, 0xAA	; 170
    1786:	5e e3       	ldi	r21, 0x3E	; 62
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	ef 5b       	subi	r30, 0xBF	; 191
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	34 f4       	brge	.+12     	; 0x17c4 <LCD_voidInit+0x1f4>
		__ticks = 1;
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	fe 01       	movw	r30, r28
    17bc:	e0 5c       	subi	r30, 0xC0	; 192
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 83       	st	Z, r24
    17c2:	9d c0       	rjmp	.+314    	; 0x18fe <LCD_voidInit+0x32e>
	else if (__tmp > 255)
    17c4:	fe 01       	movw	r30, r28
    17c6:	ef 5b       	subi	r30, 0xBF	; 191
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	53 e4       	ldi	r21, 0x43	; 67
    17da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <LCD_voidInit+0x214>
    17e2:	7e c0       	rjmp	.+252    	; 0x18e0 <LCD_voidInit+0x310>
	{
		_delay_ms(__us / 1000.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	eb 5b       	subi	r30, 0xBB	; 187
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	4a e7       	ldi	r20, 0x7A	; 122
    17f8:	54 e4       	ldi	r21, 0x44	; 68
    17fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8c af       	std	Y+60, r24	; 0x3c
    1804:	9d af       	std	Y+61, r25	; 0x3d
    1806:	ae af       	std	Y+62, r26	; 0x3e
    1808:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    180a:	6c ad       	ldd	r22, Y+60	; 0x3c
    180c:	7d ad       	ldd	r23, Y+61	; 0x3d
    180e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1810:	9f ad       	ldd	r25, Y+63	; 0x3f
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	4a e7       	ldi	r20, 0x7A	; 122
    1818:	53 e4       	ldi	r21, 0x43	; 67
    181a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	88 af       	std	Y+56, r24	; 0x38
    1824:	99 af       	std	Y+57, r25	; 0x39
    1826:	aa af       	std	Y+58, r26	; 0x3a
    1828:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    182a:	68 ad       	ldd	r22, Y+56	; 0x38
    182c:	79 ad       	ldd	r23, Y+57	; 0x39
    182e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1830:	9b ad       	ldd	r25, Y+59	; 0x3b
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	40 e8       	ldi	r20, 0x80	; 128
    1838:	5f e3       	ldi	r21, 0x3F	; 63
    183a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    183e:	88 23       	and	r24, r24
    1840:	2c f4       	brge	.+10     	; 0x184c <LCD_voidInit+0x27c>
		__ticks = 1;
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	90 e0       	ldi	r25, 0x00	; 0
    1846:	9f ab       	std	Y+55, r25	; 0x37
    1848:	8e ab       	std	Y+54, r24	; 0x36
    184a:	3f c0       	rjmp	.+126    	; 0x18ca <LCD_voidInit+0x2fa>
	else if (__tmp > 65535)
    184c:	68 ad       	ldd	r22, Y+56	; 0x38
    184e:	79 ad       	ldd	r23, Y+57	; 0x39
    1850:	8a ad       	ldd	r24, Y+58	; 0x3a
    1852:	9b ad       	ldd	r25, Y+59	; 0x3b
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	3f ef       	ldi	r19, 0xFF	; 255
    1858:	4f e7       	ldi	r20, 0x7F	; 127
    185a:	57 e4       	ldi	r21, 0x47	; 71
    185c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1860:	18 16       	cp	r1, r24
    1862:	4c f5       	brge	.+82     	; 0x18b6 <LCD_voidInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1864:	6c ad       	ldd	r22, Y+60	; 0x3c
    1866:	7d ad       	ldd	r23, Y+61	; 0x3d
    1868:	8e ad       	ldd	r24, Y+62	; 0x3e
    186a:	9f ad       	ldd	r25, Y+63	; 0x3f
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	bc 01       	movw	r22, r24
    187e:	cd 01       	movw	r24, r26
    1880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	9f ab       	std	Y+55, r25	; 0x37
    188a:	8e ab       	std	Y+54, r24	; 0x36
    188c:	0f c0       	rjmp	.+30     	; 0x18ac <LCD_voidInit+0x2dc>
    188e:	89 e1       	ldi	r24, 0x19	; 25
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9d ab       	std	Y+53, r25	; 0x35
    1894:	8c ab       	std	Y+52, r24	; 0x34
    1896:	8c a9       	ldd	r24, Y+52	; 0x34
    1898:	9d a9       	ldd	r25, Y+53	; 0x35
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	f1 f7       	brne	.-4      	; 0x189a <LCD_voidInit+0x2ca>
    189e:	9d ab       	std	Y+53, r25	; 0x35
    18a0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18a2:	8e a9       	ldd	r24, Y+54	; 0x36
    18a4:	9f a9       	ldd	r25, Y+55	; 0x37
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9f ab       	std	Y+55, r25	; 0x37
    18aa:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ac:	8e a9       	ldd	r24, Y+54	; 0x36
    18ae:	9f a9       	ldd	r25, Y+55	; 0x37
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	69 f7       	brne	.-38     	; 0x188e <LCD_voidInit+0x2be>
    18b4:	2d c0       	rjmp	.+90     	; 0x1910 <LCD_voidInit+0x340>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b6:	68 ad       	ldd	r22, Y+56	; 0x38
    18b8:	79 ad       	ldd	r23, Y+57	; 0x39
    18ba:	8a ad       	ldd	r24, Y+58	; 0x3a
    18bc:	9b ad       	ldd	r25, Y+59	; 0x3b
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	9f ab       	std	Y+55, r25	; 0x37
    18c8:	8e ab       	std	Y+54, r24	; 0x36
    18ca:	8e a9       	ldd	r24, Y+54	; 0x36
    18cc:	9f a9       	ldd	r25, Y+55	; 0x37
    18ce:	9b ab       	std	Y+51, r25	; 0x33
    18d0:	8a ab       	std	Y+50, r24	; 0x32
    18d2:	8a a9       	ldd	r24, Y+50	; 0x32
    18d4:	9b a9       	ldd	r25, Y+51	; 0x33
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <LCD_voidInit+0x306>
    18da:	9b ab       	std	Y+51, r25	; 0x33
    18dc:	8a ab       	std	Y+50, r24	; 0x32
    18de:	18 c0       	rjmp	.+48     	; 0x1910 <LCD_voidInit+0x340>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18e0:	fe 01       	movw	r30, r28
    18e2:	ef 5b       	subi	r30, 0xBF	; 191
    18e4:	ff 4f       	sbci	r31, 0xFF	; 255
    18e6:	60 81       	ld	r22, Z
    18e8:	71 81       	ldd	r23, Z+1	; 0x01
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	fe 01       	movw	r30, r28
    18f8:	e0 5c       	subi	r30, 0xC0	; 192
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 83       	st	Z, r24
    18fe:	fe 01       	movw	r30, r28
    1900:	e0 5c       	subi	r30, 0xC0	; 192
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	80 81       	ld	r24, Z
    1906:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1908:	89 a9       	ldd	r24, Y+49	; 0x31
    190a:	8a 95       	dec	r24
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_voidInit+0x33a>
    190e:	89 ab       	std	Y+49, r24	; 0x31
       _delay_us(40);
       LCD_voidSendCmnd(0b00001111);
    1910:	8f e0       	ldi	r24, 0x0F	; 15
    1912:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 e2       	ldi	r26, 0x20	; 32
    191c:	b2 e4       	ldi	r27, 0x42	; 66
    191e:	8d a7       	std	Y+45, r24	; 0x2d
    1920:	9e a7       	std	Y+46, r25	; 0x2e
    1922:	af a7       	std	Y+47, r26	; 0x2f
    1924:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1926:	6d a5       	ldd	r22, Y+45	; 0x2d
    1928:	7e a5       	ldd	r23, Y+46	; 0x2e
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	2b ea       	ldi	r18, 0xAB	; 171
    1930:	3a ea       	ldi	r19, 0xAA	; 170
    1932:	4a ea       	ldi	r20, 0xAA	; 170
    1934:	5e e3       	ldi	r21, 0x3E	; 62
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	89 a7       	std	Y+41, r24	; 0x29
    1940:	9a a7       	std	Y+42, r25	; 0x2a
    1942:	ab a7       	std	Y+43, r26	; 0x2b
    1944:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1946:	69 a5       	ldd	r22, Y+41	; 0x29
    1948:	7a a5       	ldd	r23, Y+42	; 0x2a
    194a:	8b a5       	ldd	r24, Y+43	; 0x2b
    194c:	9c a5       	ldd	r25, Y+44	; 0x2c
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	1c f4       	brge	.+6      	; 0x1964 <LCD_voidInit+0x394>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	88 a7       	std	Y+40, r24	; 0x28
    1962:	91 c0       	rjmp	.+290    	; 0x1a86 <LCD_voidInit+0x4b6>
	else if (__tmp > 255)
    1964:	69 a5       	ldd	r22, Y+41	; 0x29
    1966:	7a a5       	ldd	r23, Y+42	; 0x2a
    1968:	8b a5       	ldd	r24, Y+43	; 0x2b
    196a:	9c a5       	ldd	r25, Y+44	; 0x2c
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	0c f0       	brlt	.+2      	; 0x197e <LCD_voidInit+0x3ae>
    197c:	7b c0       	rjmp	.+246    	; 0x1a74 <LCD_voidInit+0x4a4>
	{
		_delay_ms(__us / 1000.0);
    197e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1980:	7e a5       	ldd	r23, Y+46	; 0x2e
    1982:	8f a5       	ldd	r24, Y+47	; 0x2f
    1984:	98 a9       	ldd	r25, Y+48	; 0x30
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	4a e7       	ldi	r20, 0x7A	; 122
    198c:	54 e4       	ldi	r21, 0x44	; 68
    198e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	8c a3       	std	Y+36, r24	; 0x24
    1998:	9d a3       	std	Y+37, r25	; 0x25
    199a:	ae a3       	std	Y+38, r26	; 0x26
    199c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    199e:	6c a1       	ldd	r22, Y+36	; 0x24
    19a0:	7d a1       	ldd	r23, Y+37	; 0x25
    19a2:	8e a1       	ldd	r24, Y+38	; 0x26
    19a4:	9f a1       	ldd	r25, Y+39	; 0x27
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	4a e7       	ldi	r20, 0x7A	; 122
    19ac:	53 e4       	ldi	r21, 0x43	; 67
    19ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	88 a3       	std	Y+32, r24	; 0x20
    19b8:	99 a3       	std	Y+33, r25	; 0x21
    19ba:	aa a3       	std	Y+34, r26	; 0x22
    19bc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    19be:	68 a1       	ldd	r22, Y+32	; 0x20
    19c0:	79 a1       	ldd	r23, Y+33	; 0x21
    19c2:	8a a1       	ldd	r24, Y+34	; 0x22
    19c4:	9b a1       	ldd	r25, Y+35	; 0x23
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	40 e8       	ldi	r20, 0x80	; 128
    19cc:	5f e3       	ldi	r21, 0x3F	; 63
    19ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d2:	88 23       	and	r24, r24
    19d4:	2c f4       	brge	.+10     	; 0x19e0 <LCD_voidInit+0x410>
		__ticks = 1;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9f 8f       	std	Y+31, r25	; 0x1f
    19dc:	8e 8f       	std	Y+30, r24	; 0x1e
    19de:	3f c0       	rjmp	.+126    	; 0x1a5e <LCD_voidInit+0x48e>
	else if (__tmp > 65535)
    19e0:	68 a1       	ldd	r22, Y+32	; 0x20
    19e2:	79 a1       	ldd	r23, Y+33	; 0x21
    19e4:	8a a1       	ldd	r24, Y+34	; 0x22
    19e6:	9b a1       	ldd	r25, Y+35	; 0x23
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	3f ef       	ldi	r19, 0xFF	; 255
    19ec:	4f e7       	ldi	r20, 0x7F	; 127
    19ee:	57 e4       	ldi	r21, 0x47	; 71
    19f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f4:	18 16       	cp	r1, r24
    19f6:	4c f5       	brge	.+82     	; 0x1a4a <LCD_voidInit+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f8:	6c a1       	ldd	r22, Y+36	; 0x24
    19fa:	7d a1       	ldd	r23, Y+37	; 0x25
    19fc:	8e a1       	ldd	r24, Y+38	; 0x26
    19fe:	9f a1       	ldd	r25, Y+39	; 0x27
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 e2       	ldi	r20, 0x20	; 32
    1a06:	51 e4       	ldi	r21, 0x41	; 65
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_voidInit+0x470>
    1a22:	89 e1       	ldi	r24, 0x19	; 25
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9d 8f       	std	Y+29, r25	; 0x1d
    1a28:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a2e:	01 97       	sbiw	r24, 0x01	; 1
    1a30:	f1 f7       	brne	.-4      	; 0x1a2e <LCD_voidInit+0x45e>
    1a32:	9d 8f       	std	Y+29, r25	; 0x1d
    1a34:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    1a3e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a44:	00 97       	sbiw	r24, 0x00	; 0
    1a46:	69 f7       	brne	.-38     	; 0x1a22 <LCD_voidInit+0x452>
    1a48:	24 c0       	rjmp	.+72     	; 0x1a92 <LCD_voidInit+0x4c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4a:	68 a1       	ldd	r22, Y+32	; 0x20
    1a4c:	79 a1       	ldd	r23, Y+33	; 0x21
    1a4e:	8a a1       	ldd	r24, Y+34	; 0x22
    1a50:	9b a1       	ldd	r25, Y+35	; 0x23
    1a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	9f 8f       	std	Y+31, r25	; 0x1f
    1a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    1a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a62:	9b 8f       	std	Y+27, r25	; 0x1b
    1a64:	8a 8f       	std	Y+26, r24	; 0x1a
    1a66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	f1 f7       	brne	.-4      	; 0x1a6a <LCD_voidInit+0x49a>
    1a6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1a70:	8a 8f       	std	Y+26, r24	; 0x1a
    1a72:	0f c0       	rjmp	.+30     	; 0x1a92 <LCD_voidInit+0x4c2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a74:	69 a5       	ldd	r22, Y+41	; 0x29
    1a76:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a78:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	88 a7       	std	Y+40, r24	; 0x28
    1a86:	88 a5       	ldd	r24, Y+40	; 0x28
    1a88:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a8a:	89 8d       	ldd	r24, Y+25	; 0x19
    1a8c:	8a 95       	dec	r24
    1a8e:	f1 f7       	brne	.-4      	; 0x1a8c <LCD_voidInit+0x4bc>
    1a90:	89 8f       	std	Y+25, r24	; 0x19
       _delay_us(40);
       LCD_voidSendCmnd(0x01);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a9e:	b0 e4       	ldi	r27, 0x40	; 64
    1aa0:	8d 8b       	std	Y+21, r24	; 0x15
    1aa2:	9e 8b       	std	Y+22, r25	; 0x16
    1aa4:	af 8b       	std	Y+23, r26	; 0x17
    1aa6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1aa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aaa:	7e 89       	ldd	r23, Y+22	; 0x16
    1aac:	8f 89       	ldd	r24, Y+23	; 0x17
    1aae:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab0:	2b ea       	ldi	r18, 0xAB	; 171
    1ab2:	3a ea       	ldi	r19, 0xAA	; 170
    1ab4:	4a ea       	ldi	r20, 0xAA	; 170
    1ab6:	5e e3       	ldi	r21, 0x3E	; 62
    1ab8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	89 8b       	std	Y+17, r24	; 0x11
    1ac2:	9a 8b       	std	Y+18, r25	; 0x12
    1ac4:	ab 8b       	std	Y+19, r26	; 0x13
    1ac6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ac8:	69 89       	ldd	r22, Y+17	; 0x11
    1aca:	7a 89       	ldd	r23, Y+18	; 0x12
    1acc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ace:	9c 89       	ldd	r25, Y+20	; 0x14
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5f e3       	ldi	r21, 0x3F	; 63
    1ad8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1adc:	88 23       	and	r24, r24
    1ade:	1c f4       	brge	.+6      	; 0x1ae6 <LCD_voidInit+0x516>
		__ticks = 1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	88 8b       	std	Y+16, r24	; 0x10
    1ae4:	91 c0       	rjmp	.+290    	; 0x1c08 <LCD_voidInit+0x638>
	else if (__tmp > 255)
    1ae6:	69 89       	ldd	r22, Y+17	; 0x11
    1ae8:	7a 89       	ldd	r23, Y+18	; 0x12
    1aea:	8b 89       	ldd	r24, Y+19	; 0x13
    1aec:	9c 89       	ldd	r25, Y+20	; 0x14
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	53 e4       	ldi	r21, 0x43	; 67
    1af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	0c f0       	brlt	.+2      	; 0x1b00 <LCD_voidInit+0x530>
    1afe:	7b c0       	rjmp	.+246    	; 0x1bf6 <LCD_voidInit+0x626>
	{
		_delay_ms(__us / 1000.0);
    1b00:	6d 89       	ldd	r22, Y+21	; 0x15
    1b02:	7e 89       	ldd	r23, Y+22	; 0x16
    1b04:	8f 89       	ldd	r24, Y+23	; 0x17
    1b06:	98 8d       	ldd	r25, Y+24	; 0x18
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	4a e7       	ldi	r20, 0x7A	; 122
    1b0e:	54 e4       	ldi	r21, 0x44	; 68
    1b10:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	8c 87       	std	Y+12, r24	; 0x0c
    1b1a:	9d 87       	std	Y+13, r25	; 0x0d
    1b1c:	ae 87       	std	Y+14, r26	; 0x0e
    1b1e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b22:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b24:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b26:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	4a e7       	ldi	r20, 0x7A	; 122
    1b2e:	53 e4       	ldi	r21, 0x43	; 67
    1b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b34:	dc 01       	movw	r26, r24
    1b36:	cb 01       	movw	r24, r22
    1b38:	88 87       	std	Y+8, r24	; 0x08
    1b3a:	99 87       	std	Y+9, r25	; 0x09
    1b3c:	aa 87       	std	Y+10, r26	; 0x0a
    1b3e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b40:	68 85       	ldd	r22, Y+8	; 0x08
    1b42:	79 85       	ldd	r23, Y+9	; 0x09
    1b44:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b46:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b48:	20 e0       	ldi	r18, 0x00	; 0
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	40 e8       	ldi	r20, 0x80	; 128
    1b4e:	5f e3       	ldi	r21, 0x3F	; 63
    1b50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b54:	88 23       	and	r24, r24
    1b56:	2c f4       	brge	.+10     	; 0x1b62 <LCD_voidInit+0x592>
		__ticks = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	9f 83       	std	Y+7, r25	; 0x07
    1b5e:	8e 83       	std	Y+6, r24	; 0x06
    1b60:	3f c0       	rjmp	.+126    	; 0x1be0 <LCD_voidInit+0x610>
	else if (__tmp > 65535)
    1b62:	68 85       	ldd	r22, Y+8	; 0x08
    1b64:	79 85       	ldd	r23, Y+9	; 0x09
    1b66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b68:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	4c f5       	brge	.+82     	; 0x1bcc <LCD_voidInit+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b7c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e2       	ldi	r20, 0x20	; 32
    1b88:	51 e4       	ldi	r21, 0x41	; 65
    1b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9f 83       	std	Y+7, r25	; 0x07
    1ba0:	8e 83       	std	Y+6, r24	; 0x06
    1ba2:	0f c0       	rjmp	.+30     	; 0x1bc2 <LCD_voidInit+0x5f2>
    1ba4:	89 e1       	ldi	r24, 0x19	; 25
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9d 83       	std	Y+5, r25	; 0x05
    1baa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	f1 f7       	brne	.-4      	; 0x1bb0 <LCD_voidInit+0x5e0>
    1bb4:	9d 83       	std	Y+5, r25	; 0x05
    1bb6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bba:	9f 81       	ldd	r25, Y+7	; 0x07
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	9f 83       	std	Y+7, r25	; 0x07
    1bc0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	69 f7       	brne	.-38     	; 0x1ba4 <LCD_voidInit+0x5d4>
    1bca:	24 c0       	rjmp	.+72     	; 0x1c14 <LCD_voidInit+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bcc:	68 85       	ldd	r22, Y+8	; 0x08
    1bce:	79 85       	ldd	r23, Y+9	; 0x09
    1bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9f 83       	std	Y+7, r25	; 0x07
    1bde:	8e 83       	std	Y+6, r24	; 0x06
    1be0:	8e 81       	ldd	r24, Y+6	; 0x06
    1be2:	9f 81       	ldd	r25, Y+7	; 0x07
    1be4:	9b 83       	std	Y+3, r25	; 0x03
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	9b 81       	ldd	r25, Y+3	; 0x03
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_voidInit+0x61c>
    1bf0:	9b 83       	std	Y+3, r25	; 0x03
    1bf2:	8a 83       	std	Y+2, r24	; 0x02
    1bf4:	0f c0       	rjmp	.+30     	; 0x1c14 <LCD_voidInit+0x644>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bf6:	69 89       	ldd	r22, Y+17	; 0x11
    1bf8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	88 8b       	std	Y+16, r24	; 0x10
    1c08:	88 89       	ldd	r24, Y+16	; 0x10
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	8a 95       	dec	r24
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <LCD_voidInit+0x63e>
    1c12:	89 83       	std	Y+1, r24	; 0x01
       _delay_us(5);
       LCD_voidSendCmnd(0B00000110);
    1c14:	86 e0       	ldi	r24, 0x06	; 6
    1c16:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>


   }
    1c1a:	ca 5a       	subi	r28, 0xAA	; 170
    1c1c:	df 4f       	sbci	r29, 0xFF	; 255
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <LCD_voidSendCmnd>:


 void LCD_voidSendCmnd(u8 copy_u8Cmnd)
 {
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	69 97       	sbiw	r28, 0x19	; 25
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
     /*step1 Rs=0*/
	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1c48:	83 e0       	ldi	r24, 0x03	; 3
    1c4a:	65 e0       	ldi	r22, 0x05	; 5
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
     /*Rw=0*/
	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1c52:	83 e0       	ldi	r24, 0x03	; 3
    1c54:	66 e0       	ldi	r22, 0x06	; 6
    1c56:	40 e0       	ldi	r20, 0x00	; 0
    1c58:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
     /*write comand*/
     DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Cmnd);
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c60:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <DIO_u8SetPortValue>
     /*E=1*/
     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	67 e0       	ldi	r22, 0x07	; 7
    1c68:	41 e0       	ldi	r20, 0x01	; 1
    1c6a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e8       	ldi	r26, 0x80	; 128
    1c74:	bf e3       	ldi	r27, 0x3F	; 63
    1c76:	8d 8b       	std	Y+21, r24	; 0x15
    1c78:	9e 8b       	std	Y+22, r25	; 0x16
    1c7a:	af 8b       	std	Y+23, r26	; 0x17
    1c7c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c80:	7e 89       	ldd	r23, Y+22	; 0x16
    1c82:	8f 89       	ldd	r24, Y+23	; 0x17
    1c84:	98 8d       	ldd	r25, Y+24	; 0x18
    1c86:	2b ea       	ldi	r18, 0xAB	; 171
    1c88:	3a ea       	ldi	r19, 0xAA	; 170
    1c8a:	4a ea       	ldi	r20, 0xAA	; 170
    1c8c:	5e e3       	ldi	r21, 0x3E	; 62
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	89 8b       	std	Y+17, r24	; 0x11
    1c98:	9a 8b       	std	Y+18, r25	; 0x12
    1c9a:	ab 8b       	std	Y+19, r26	; 0x13
    1c9c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c9e:	69 89       	ldd	r22, Y+17	; 0x11
    1ca0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ca2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	1c f4       	brge	.+6      	; 0x1cbc <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	88 8b       	std	Y+16, r24	; 0x10
    1cba:	91 c0       	rjmp	.+290    	; 0x1dde <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1cbc:	69 89       	ldd	r22, Y+17	; 0x11
    1cbe:	7a 89       	ldd	r23, Y+18	; 0x12
    1cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	53 e4       	ldi	r21, 0x43	; 67
    1ccc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	0c f0       	brlt	.+2      	; 0x1cd6 <LCD_voidSendCmnd+0xa4>
    1cd4:	7b c0       	rjmp	.+246    	; 0x1dcc <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	4a e7       	ldi	r20, 0x7A	; 122
    1ce4:	54 e4       	ldi	r21, 0x44	; 68
    1ce6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8c 87       	std	Y+12, r24	; 0x0c
    1cf0:	9d 87       	std	Y+13, r25	; 0x0d
    1cf2:	ae 87       	std	Y+14, r26	; 0x0e
    1cf4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    1cf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    1cfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	53 e4       	ldi	r21, 0x43	; 67
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	88 87       	std	Y+8, r24	; 0x08
    1d10:	99 87       	std	Y+9, r25	; 0x09
    1d12:	aa 87       	std	Y+10, r26	; 0x0a
    1d14:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d16:	68 85       	ldd	r22, Y+8	; 0x08
    1d18:	79 85       	ldd	r23, Y+9	; 0x09
    1d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	40 e8       	ldi	r20, 0x80	; 128
    1d24:	5f e3       	ldi	r21, 0x3F	; 63
    1d26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2a:	88 23       	and	r24, r24
    1d2c:	2c f4       	brge	.+10     	; 0x1d38 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9f 83       	std	Y+7, r25	; 0x07
    1d34:	8e 83       	std	Y+6, r24	; 0x06
    1d36:	3f c0       	rjmp	.+126    	; 0x1db6 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1d38:	68 85       	ldd	r22, Y+8	; 0x08
    1d3a:	79 85       	ldd	r23, Y+9	; 0x09
    1d3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	3f ef       	ldi	r19, 0xFF	; 255
    1d44:	4f e7       	ldi	r20, 0x7F	; 127
    1d46:	57 e4       	ldi	r21, 0x47	; 71
    1d48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d4c:	18 16       	cp	r1, r24
    1d4e:	4c f5       	brge	.+82     	; 0x1da2 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d50:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d52:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d54:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d56:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	40 e2       	ldi	r20, 0x20	; 32
    1d5e:	51 e4       	ldi	r21, 0x41	; 65
    1d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	bc 01       	movw	r22, r24
    1d6a:	cd 01       	movw	r24, r26
    1d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	9f 83       	std	Y+7, r25	; 0x07
    1d76:	8e 83       	std	Y+6, r24	; 0x06
    1d78:	0f c0       	rjmp	.+30     	; 0x1d98 <LCD_voidSendCmnd+0x166>
    1d7a:	89 e1       	ldi	r24, 0x19	; 25
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9d 83       	std	Y+5, r25	; 0x05
    1d80:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d82:	8c 81       	ldd	r24, Y+4	; 0x04
    1d84:	9d 81       	ldd	r25, Y+5	; 0x05
    1d86:	01 97       	sbiw	r24, 0x01	; 1
    1d88:	f1 f7       	brne	.-4      	; 0x1d86 <LCD_voidSendCmnd+0x154>
    1d8a:	9d 83       	std	Y+5, r25	; 0x05
    1d8c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	9f 81       	ldd	r25, Y+7	; 0x07
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	9f 83       	std	Y+7, r25	; 0x07
    1d96:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d98:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	69 f7       	brne	.-38     	; 0x1d7a <LCD_voidSendCmnd+0x148>
    1da0:	24 c0       	rjmp	.+72     	; 0x1dea <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da2:	68 85       	ldd	r22, Y+8	; 0x08
    1da4:	79 85       	ldd	r23, Y+9	; 0x09
    1da6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1da8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	9f 83       	std	Y+7, r25	; 0x07
    1db4:	8e 83       	std	Y+6, r24	; 0x06
    1db6:	8e 81       	ldd	r24, Y+6	; 0x06
    1db8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_voidSendCmnd+0x190>
    1dc6:	9b 83       	std	Y+3, r25	; 0x03
    1dc8:	8a 83       	std	Y+2, r24	; 0x02
    1dca:	0f c0       	rjmp	.+30     	; 0x1dea <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dcc:	69 89       	ldd	r22, Y+17	; 0x11
    1dce:	7a 89       	ldd	r23, Y+18	; 0x12
    1dd0:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd2:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	88 8b       	std	Y+16, r24	; 0x10
    1dde:	88 89       	ldd	r24, Y+16	; 0x10
    1de0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	8a 95       	dec	r24
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_voidSendCmnd+0x1b2>
    1de8:	89 83       	std	Y+1, r24	; 0x01
     _delay_us(1);
     /*E=0*/
     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	67 e0       	ldi	r22, 0x07	; 7
    1dee:	40 e0       	ldi	r20, 0x00	; 0
    1df0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	     	  /*E=0*/
	  DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
#endif


 }
    1df4:	69 96       	adiw	r28, 0x19	; 25
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	cf 91       	pop	r28
    1e02:	df 91       	pop	r29
    1e04:	08 95       	ret

00001e06 <LCD_voidSendChar>:
 void LCD_voidSendChar(u8 copy_u8Char)
 {
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	69 97       	sbiw	r28, 0x19	; 25
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	89 8f       	std	Y+25, r24	; 0x19
#if LCD_u8_MODE==LCD_u8_MODE_8_BIT
	 /*step1 Rs=1*/
		 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	65 e0       	ldi	r22, 0x05	; 5
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	     /*Rw=0*/
		 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	66 e0       	ldi	r22, 0x06	; 6
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	     /*write comand*/
	     DIO_u8SetPortValue(LCD_u8_DATA_PORT,copy_u8Char);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	69 8d       	ldd	r22, Y+25	; 0x19
    1e34:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <DIO_u8SetPortValue>
	     /*E=1*/
	     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	67 e0       	ldi	r22, 0x07	; 7
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	8d 8b       	std	Y+21, r24	; 0x15
    1e4c:	9e 8b       	std	Y+22, r25	; 0x16
    1e4e:	af 8b       	std	Y+23, r26	; 0x17
    1e50:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e52:	6d 89       	ldd	r22, Y+21	; 0x15
    1e54:	7e 89       	ldd	r23, Y+22	; 0x16
    1e56:	8f 89       	ldd	r24, Y+23	; 0x17
    1e58:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5a:	2b ea       	ldi	r18, 0xAB	; 171
    1e5c:	3a ea       	ldi	r19, 0xAA	; 170
    1e5e:	4a ea       	ldi	r20, 0xAA	; 170
    1e60:	5e e3       	ldi	r21, 0x3E	; 62
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	89 8b       	std	Y+17, r24	; 0x11
    1e6c:	9a 8b       	std	Y+18, r25	; 0x12
    1e6e:	ab 8b       	std	Y+19, r26	; 0x13
    1e70:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1e72:	69 89       	ldd	r22, Y+17	; 0x11
    1e74:	7a 89       	ldd	r23, Y+18	; 0x12
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	1c f4       	brge	.+6      	; 0x1e90 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	88 8b       	std	Y+16, r24	; 0x10
    1e8e:	91 c0       	rjmp	.+290    	; 0x1fb2 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1e90:	69 89       	ldd	r22, Y+17	; 0x11
    1e92:	7a 89       	ldd	r23, Y+18	; 0x12
    1e94:	8b 89       	ldd	r24, Y+19	; 0x13
    1e96:	9c 89       	ldd	r25, Y+20	; 0x14
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	53 e4       	ldi	r21, 0x43	; 67
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	0c f0       	brlt	.+2      	; 0x1eaa <LCD_voidSendChar+0xa4>
    1ea8:	7b c0       	rjmp	.+246    	; 0x1fa0 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    1eac:	7e 89       	ldd	r23, Y+22	; 0x16
    1eae:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a e7       	ldi	r20, 0x7A	; 122
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8c 87       	std	Y+12, r24	; 0x0c
    1ec4:	9d 87       	std	Y+13, r25	; 0x0d
    1ec6:	ae 87       	std	Y+14, r26	; 0x0e
    1ec8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eca:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ecc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ece:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ed0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	4a e7       	ldi	r20, 0x7A	; 122
    1ed8:	53 e4       	ldi	r21, 0x43	; 67
    1eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	88 87       	std	Y+8, r24	; 0x08
    1ee4:	99 87       	std	Y+9, r25	; 0x09
    1ee6:	aa 87       	std	Y+10, r26	; 0x0a
    1ee8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1eea:	68 85       	ldd	r22, Y+8	; 0x08
    1eec:	79 85       	ldd	r23, Y+9	; 0x09
    1eee:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 e8       	ldi	r20, 0x80	; 128
    1ef8:	5f e3       	ldi	r21, 0x3F	; 63
    1efa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1efe:	88 23       	and	r24, r24
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <LCD_voidSendChar+0x106>
		__ticks = 1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9f 83       	std	Y+7, r25	; 0x07
    1f08:	8e 83       	std	Y+6, r24	; 0x06
    1f0a:	3f c0       	rjmp	.+126    	; 0x1f8a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1f0c:	68 85       	ldd	r22, Y+8	; 0x08
    1f0e:	79 85       	ldd	r23, Y+9	; 0x09
    1f10:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f12:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	3f ef       	ldi	r19, 0xFF	; 255
    1f18:	4f e7       	ldi	r20, 0x7F	; 127
    1f1a:	57 e4       	ldi	r21, 0x47	; 71
    1f1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f20:	18 16       	cp	r1, r24
    1f22:	4c f5       	brge	.+82     	; 0x1f76 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f24:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f26:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f28:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f2a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	40 e2       	ldi	r20, 0x20	; 32
    1f32:	51 e4       	ldi	r21, 0x41	; 65
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	bc 01       	movw	r22, r24
    1f3e:	cd 01       	movw	r24, r26
    1f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	9f 83       	std	Y+7, r25	; 0x07
    1f4a:	8e 83       	std	Y+6, r24	; 0x06
    1f4c:	0f c0       	rjmp	.+30     	; 0x1f6c <LCD_voidSendChar+0x166>
    1f4e:	89 e1       	ldi	r24, 0x19	; 25
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	9d 83       	std	Y+5, r25	; 0x05
    1f54:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f56:	8c 81       	ldd	r24, Y+4	; 0x04
    1f58:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <LCD_voidSendChar+0x154>
    1f5e:	9d 83       	std	Y+5, r25	; 0x05
    1f60:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f62:	8e 81       	ldd	r24, Y+6	; 0x06
    1f64:	9f 81       	ldd	r25, Y+7	; 0x07
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9f 83       	std	Y+7, r25	; 0x07
    1f6a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	69 f7       	brne	.-38     	; 0x1f4e <LCD_voidSendChar+0x148>
    1f74:	24 c0       	rjmp	.+72     	; 0x1fbe <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f76:	68 85       	ldd	r22, Y+8	; 0x08
    1f78:	79 85       	ldd	r23, Y+9	; 0x09
    1f7a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	9f 83       	std	Y+7, r25	; 0x07
    1f88:	8e 83       	std	Y+6, r24	; 0x06
    1f8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f8e:	9b 83       	std	Y+3, r25	; 0x03
    1f90:	8a 83       	std	Y+2, r24	; 0x02
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_voidSendChar+0x190>
    1f9a:	9b 83       	std	Y+3, r25	; 0x03
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	0f c0       	rjmp	.+30     	; 0x1fbe <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fa0:	69 89       	ldd	r22, Y+17	; 0x11
    1fa2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fac:	dc 01       	movw	r26, r24
    1fae:	cb 01       	movw	r24, r22
    1fb0:	88 8b       	std	Y+16, r24	; 0x10
    1fb2:	88 89       	ldd	r24, Y+16	; 0x10
    1fb4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	8a 95       	dec	r24
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_voidSendChar+0x1b2>
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	     _delay_us(1);
	     /*E=0*/
	     DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1fbe:	83 e0       	ldi	r24, 0x03	; 3
    1fc0:	67 e0       	ldi	r22, 0x07	; 7
    1fc2:	40 e0       	ldi	r20, 0x00	; 0
    1fc4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	     	    DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
	     	  	 _delay_us(1);
	   	     /*E=0*/
	        	 DIO_u8SetpinValue(LCD_u8_control_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
#endif
 }
    1fc8:	69 96       	adiw	r28, 0x19	; 25
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <LCD_u8GoToXY>:

 u8 LCD_u8GoToXY(u8 COPY_u8LineNum,u8 Copy_u8location)
 {
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	00 d0       	rcall	.+0      	; 0x1fe0 <LCD_u8GoToXY+0x6>
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <LCD_u8GoToXY+0x8>
    1fe2:	0f 92       	push	r0
    1fe4:	cd b7       	in	r28, 0x3d	; 61
    1fe6:	de b7       	in	r29, 0x3e	; 62
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
    1fea:	6b 83       	std	Y+3, r22	; 0x03
     u8 local_u8Errorstate=STD_TYBES_OK;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	89 83       	std	Y+1, r24	; 0x01
     if(COPY_u8LineNum<=39){
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	88 32       	cpi	r24, 0x28	; 40
    1ff4:	e8 f4       	brcc	.+58     	; 0x2030 <LCD_u8GoToXY+0x56>
     switch(COPY_u8LineNum)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3d 83       	std	Y+5, r19	; 0x05
    1ffe:	2c 83       	std	Y+4, r18	; 0x04
    2000:	8c 81       	ldd	r24, Y+4	; 0x04
    2002:	9d 81       	ldd	r25, Y+5	; 0x05
    2004:	81 30       	cpi	r24, 0x01	; 1
    2006:	91 05       	cpc	r25, r1
    2008:	31 f0       	breq	.+12     	; 0x2016 <LCD_u8GoToXY+0x3c>
    200a:	2c 81       	ldd	r18, Y+4	; 0x04
    200c:	3d 81       	ldd	r19, Y+5	; 0x05
    200e:	22 30       	cpi	r18, 0x02	; 2
    2010:	31 05       	cpc	r19, r1
    2012:	31 f0       	breq	.+12     	; 0x2020 <LCD_u8GoToXY+0x46>
    2014:	0a c0       	rjmp	.+20     	; 0x202a <LCD_u8GoToXY+0x50>
     {
         case LCD_u8_LINE1: LCD_voidSendCmnd(0x80+Copy_u8location);  break;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	80 58       	subi	r24, 0x80	; 128
    201a:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <LCD_u8GoToXY+0x5a>
         case LCD_u8_LINE2: LCD_voidSendCmnd(0xC0+Copy_u8location);  break;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	80 54       	subi	r24, 0x40	; 64
    2024:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <LCD_voidSendCmnd>
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <LCD_u8GoToXY+0x5a>
         default :  local_u8Errorstate=STD_TYBES_OK;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <LCD_u8GoToXY+0x5a>
     }
 }
 else { local_u8Errorstate=STD_TYBES_OK;}
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	89 83       	std	Y+1, r24	; 0x01
 return local_u8Errorstate;}
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	cf 91       	pop	r28
    2042:	df 91       	pop	r29
    2044:	08 95       	ret

00002046 <LCD_sendString>:
 void LCD_sendString(const char *str)
 {
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	00 d0       	rcall	.+0      	; 0x204c <LCD_sendString+0x6>
    204c:	0f 92       	push	r0
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	9b 83       	std	Y+3, r25	; 0x03
    2054:	8a 83       	std	Y+2, r24	; 0x02
 	u8 i = 0;
    2056:	19 82       	std	Y+1, r1	; 0x01
    2058:	0e c0       	rjmp	.+28     	; 0x2076 <LCD_sendString+0x30>
 	while (str[i] != '\0')
 	{
 		LCD_voidSendChar(str[i]);
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	28 2f       	mov	r18, r24
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	9b 81       	ldd	r25, Y+3	; 0x03
    2064:	fc 01       	movw	r30, r24
    2066:	e2 0f       	add	r30, r18
    2068:	f3 1f       	adc	r31, r19
    206a:	80 81       	ld	r24, Z
    206c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
 		i++;
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	8f 5f       	subi	r24, 0xFF	; 255
    2074:	89 83       	std	Y+1, r24	; 0x01
 else { local_u8Errorstate=STD_TYBES_OK;}
 return local_u8Errorstate;}
 void LCD_sendString(const char *str)
 {
 	u8 i = 0;
 	while (str[i] != '\0')
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	28 2f       	mov	r18, r24
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	fc 01       	movw	r30, r24
    2082:	e2 0f       	add	r30, r18
    2084:	f3 1f       	adc	r31, r19
    2086:	80 81       	ld	r24, Z
    2088:	88 23       	and	r24, r24
    208a:	39 f7       	brne	.-50     	; 0x205a <LCD_sendString+0x14>
 	{
 		LCD_voidSendChar(str[i]);
 		i++;
 	}}
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	08 95       	ret

00002098 <security>:
#include "KPD_interface.h"
#include "DC_MOTOR_interface.h"

#define   SREG     *((volatile u8*)0x5f)
void security (void)
{
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	cd b7       	in	r28, 0x3d	; 61
    20a2:	de b7       	in	r29, 0x3e	; 62
    20a4:	c7 59       	subi	r28, 0x97	; 151
    20a6:	d0 40       	sbci	r29, 0x00	; 0
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
	u8 passcode[3]={'1','2','3','4'};
    20b2:	ce 01       	movw	r24, r28
    20b4:	81 57       	subi	r24, 0x71	; 113
    20b6:	9f 4f       	sbci	r25, 0xFF	; 255
    20b8:	cd 56       	subi	r28, 0x6D	; 109
    20ba:	df 4f       	sbci	r29, 0xFF	; 255
    20bc:	99 83       	std	Y+1, r25	; 0x01
    20be:	88 83       	st	Y, r24
    20c0:	c3 59       	subi	r28, 0x93	; 147
    20c2:	d0 40       	sbci	r29, 0x00	; 0
    20c4:	85 ed       	ldi	r24, 0xD5	; 213
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	cb 56       	subi	r28, 0x6B	; 107
    20ca:	df 4f       	sbci	r29, 0xFF	; 255
    20cc:	99 83       	std	Y+1, r25	; 0x01
    20ce:	88 83       	st	Y, r24
    20d0:	c5 59       	subi	r28, 0x95	; 149
    20d2:	d0 40       	sbci	r29, 0x00	; 0
    20d4:	93 e0       	ldi	r25, 0x03	; 3
    20d6:	c9 56       	subi	r28, 0x69	; 105
    20d8:	df 4f       	sbci	r29, 0xFF	; 255
    20da:	98 83       	st	Y, r25
    20dc:	c7 59       	subi	r28, 0x97	; 151
    20de:	d0 40       	sbci	r29, 0x00	; 0
    20e0:	cb 56       	subi	r28, 0x6B	; 107
    20e2:	df 4f       	sbci	r29, 0xFF	; 255
    20e4:	e8 81       	ld	r30, Y
    20e6:	f9 81       	ldd	r31, Y+1	; 0x01
    20e8:	c5 59       	subi	r28, 0x95	; 149
    20ea:	d0 40       	sbci	r29, 0x00	; 0
    20ec:	00 80       	ld	r0, Z
    20ee:	cb 56       	subi	r28, 0x6B	; 107
    20f0:	df 4f       	sbci	r29, 0xFF	; 255
    20f2:	88 81       	ld	r24, Y
    20f4:	99 81       	ldd	r25, Y+1	; 0x01
    20f6:	c5 59       	subi	r28, 0x95	; 149
    20f8:	d0 40       	sbci	r29, 0x00	; 0
    20fa:	01 96       	adiw	r24, 0x01	; 1
    20fc:	cb 56       	subi	r28, 0x6B	; 107
    20fe:	df 4f       	sbci	r29, 0xFF	; 255
    2100:	99 83       	std	Y+1, r25	; 0x01
    2102:	88 83       	st	Y, r24
    2104:	c5 59       	subi	r28, 0x95	; 149
    2106:	d0 40       	sbci	r29, 0x00	; 0
    2108:	cd 56       	subi	r28, 0x6D	; 109
    210a:	df 4f       	sbci	r29, 0xFF	; 255
    210c:	e8 81       	ld	r30, Y
    210e:	f9 81       	ldd	r31, Y+1	; 0x01
    2110:	c3 59       	subi	r28, 0x93	; 147
    2112:	d0 40       	sbci	r29, 0x00	; 0
    2114:	00 82       	st	Z, r0
    2116:	cd 56       	subi	r28, 0x6D	; 109
    2118:	df 4f       	sbci	r29, 0xFF	; 255
    211a:	88 81       	ld	r24, Y
    211c:	99 81       	ldd	r25, Y+1	; 0x01
    211e:	c3 59       	subi	r28, 0x93	; 147
    2120:	d0 40       	sbci	r29, 0x00	; 0
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	cd 56       	subi	r28, 0x6D	; 109
    2126:	df 4f       	sbci	r29, 0xFF	; 255
    2128:	99 83       	std	Y+1, r25	; 0x01
    212a:	88 83       	st	Y, r24
    212c:	c3 59       	subi	r28, 0x93	; 147
    212e:	d0 40       	sbci	r29, 0x00	; 0
    2130:	c9 56       	subi	r28, 0x69	; 105
    2132:	df 4f       	sbci	r29, 0xFF	; 255
    2134:	98 81       	ld	r25, Y
    2136:	c7 59       	subi	r28, 0x97	; 151
    2138:	d0 40       	sbci	r29, 0x00	; 0
    213a:	91 50       	subi	r25, 0x01	; 1
    213c:	c9 56       	subi	r28, 0x69	; 105
    213e:	df 4f       	sbci	r29, 0xFF	; 255
    2140:	98 83       	st	Y, r25
    2142:	c7 59       	subi	r28, 0x97	; 151
    2144:	d0 40       	sbci	r29, 0x00	; 0
    2146:	c9 56       	subi	r28, 0x69	; 105
    2148:	df 4f       	sbci	r29, 0xFF	; 255
    214a:	e8 81       	ld	r30, Y
    214c:	c7 59       	subi	r28, 0x97	; 151
    214e:	d0 40       	sbci	r29, 0x00	; 0
    2150:	ee 23       	and	r30, r30
    2152:	31 f6       	brne	.-116    	; 0x20e0 <security+0x48>

	u8 z,i;
	u8 Local_u8Key;
	DIO_voidInit();
    2154:	0e 94 92 18 	call	0x3124	; 0x3124 <DIO_voidInit>
	LCD_voidInit();
    2158:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	                     LCD_voidSendChar('E');
    215c:	85 e4       	ldi	r24, 0x45	; 69
    215e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar('N');
    2162:	8e e4       	ldi	r24, 0x4E	; 78
    2164:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar('T');
    2168:	84 e5       	ldi	r24, 0x54	; 84
    216a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar('E');
    216e:	85 e4       	ldi	r24, 0x45	; 69
    2170:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar('R');
    2174:	82 e5       	ldi	r24, 0x52	; 82
    2176:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar(' ');
    217a:	80 e2       	ldi	r24, 0x20	; 32
    217c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	                     LCD_voidSendChar('P');
    2180:	80 e5       	ldi	r24, 0x50	; 80
    2182:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('A');
    2186:	81 e4       	ldi	r24, 0x41	; 65
    2188:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('S');
    218c:	83 e5       	ldi	r24, 0x53	; 83
    218e:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('S');
    2192:	83 e5       	ldi	r24, 0x53	; 83
    2194:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('W');
    2198:	87 e5       	ldi	r24, 0x57	; 87
    219a:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('O');
    219e:	8f e4       	ldi	r24, 0x4F	; 79
    21a0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('R');
    21a4:	82 e5       	ldi	r24, 0x52	; 82
    21a6:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
		 		 		 LCD_voidSendChar('D');
    21aa:	84 e4       	ldi	r24, 0x44	; 68
    21ac:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
	while(1)
	{LCD_u8GoToXY(2,1);
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	61 e0       	ldi	r22, 0x01	; 1
    21b4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
    21b8:	2d c0       	rjmp	.+90     	; 0x2214 <security+0x17c>


	 while (i<4)
	 {
		     KPD_u8GetKeyState(&Local_u8Key);
    21ba:	ce 01       	movw	r24, r28
    21bc:	8e 56       	subi	r24, 0x6E	; 110
    21be:	9f 4f       	sbci	r25, 0xFF	; 255
    21c0:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
			 if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    21c4:	fe 01       	movw	r30, r28
    21c6:	ee 56       	subi	r30, 0x6E	; 110
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	80 81       	ld	r24, Z
    21cc:	8f 3f       	cpi	r24, 0xFF	; 255
    21ce:	11 f1       	breq	.+68     	; 0x2214 <security+0x17c>
			 {
				 LCD_voidSendChar(Local_u8Key);
    21d0:	fe 01       	movw	r30, r28
    21d2:	ee 56       	subi	r30, 0x6E	; 110
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <LCD_voidSendChar>
				 if(passcode[i] == Local_u8Key){
    21dc:	fe 01       	movw	r30, r28
    21de:	e3 57       	subi	r30, 0x73	; 115
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	ce 01       	movw	r24, r28
    21ea:	81 57       	subi	r24, 0x71	; 113
    21ec:	9f 4f       	sbci	r25, 0xFF	; 255
    21ee:	fc 01       	movw	r30, r24
    21f0:	e2 0f       	add	r30, r18
    21f2:	f3 1f       	adc	r31, r19
    21f4:	90 81       	ld	r25, Z
    21f6:	fe 01       	movw	r30, r28
    21f8:	ee 56       	subi	r30, 0x6E	; 110
    21fa:	ff 4f       	sbci	r31, 0xFF	; 255
    21fc:	80 81       	ld	r24, Z
    21fe:	98 17       	cp	r25, r24
    2200:	79 f4       	brne	.+30     	; 0x2220 <security+0x188>
				 i++;}
    2202:	de 01       	movw	r26, r28
    2204:	a3 57       	subi	r26, 0x73	; 115
    2206:	bf 4f       	sbci	r27, 0xFF	; 255
    2208:	fe 01       	movw	r30, r28
    220a:	e3 57       	subi	r30, 0x73	; 115
    220c:	ff 4f       	sbci	r31, 0xFF	; 255
    220e:	80 81       	ld	r24, Z
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	8c 93       	st	X, r24
		 		 		 LCD_voidSendChar('D');
	while(1)
	{LCD_u8GoToXY(2,1);


	 while (i<4)
    2214:	fe 01       	movw	r30, r28
    2216:	e3 57       	subi	r30, 0x73	; 115
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	68 f2       	brcs	.-102    	; 0x21ba <security+0x122>
				 i++;}
				 else{break;}
			 }

	 }
	 if (i>=4)
    2220:	fe 01       	movw	r30, r28
    2222:	e3 57       	subi	r30, 0x73	; 115
    2224:	ff 4f       	sbci	r31, 0xFF	; 255
    2226:	80 81       	ld	r24, Z
    2228:	84 30       	cpi	r24, 0x04	; 4
    222a:	08 f4       	brcc	.+2      	; 0x222e <security+0x196>
    222c:	4c c7       	rjmp	.+3736   	; 0x30c6 <security+0x102e>
	 	 {
		 LCD_voidInit();
    222e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	 		 LCD_sendString("1dc motor 3exist");
    2232:	80 e6       	ldi	r24, 0x60	; 96
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 		 LCD_u8GoToXY(2,0);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	 		 LCD_sendString("2stepper motor");
    2242:	81 e7       	ldi	r24, 0x71	; 113
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 		while(1){
	 	 		KPD_u8GetKeyState(&Local_u8Key);
    224a:	ce 01       	movw	r24, r28
    224c:	8e 56       	subi	r24, 0x6E	; 110
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
	 	 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    2254:	fe 01       	movw	r30, r28
    2256:	ee 56       	subi	r30, 0x6E	; 110
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	8f 3f       	cpi	r24, 0xFF	; 255
    225e:	a9 f3       	breq	.-22     	; 0x224a <security+0x1b2>
	 	 					 {
	 	 						if(Local_u8Key=='1')
    2260:	fe 01       	movw	r30, r28
    2262:	ee 56       	subi	r30, 0x6E	; 110
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	80 81       	ld	r24, Z
    2268:	81 33       	cpi	r24, 0x31	; 49
    226a:	69 f5       	brne	.+90     	; 0x22c6 <security+0x22e>
	 	 						{LCD_voidInit();
    226c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	 	 						 LCD_sendString("1 CW");
    2270:	80 e8       	ldi	r24, 0x80	; 128
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 						 LCD_u8GoToXY(2,0);
    2278:	82 e0       	ldi	r24, 0x02	; 2
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	 	 						 LCD_sendString("2 CCW");
    2280:	85 e8       	ldi	r24, 0x85	; 133
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 		 while(1)
	 	 				 		 {
	 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    2288:	ce 01       	movw	r24, r28
    228a:	8e 56       	subi	r24, 0x6E	; 110
    228c:	9f 4f       	sbci	r25, 0xFF	; 255
    228e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
	 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    2292:	fe 01       	movw	r30, r28
    2294:	ee 56       	subi	r30, 0x6E	; 110
    2296:	ff 4f       	sbci	r31, 0xFF	; 255
    2298:	80 81       	ld	r24, Z
    229a:	8f 3f       	cpi	r24, 0xFF	; 255
    229c:	a9 f3       	breq	.-22     	; 0x2288 <security+0x1f0>
	 	 				 				 		{
	 	 				 				 			if(Local_u8Key=='1')
    229e:	fe 01       	movw	r30, r28
    22a0:	ee 56       	subi	r30, 0x6E	; 110
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	80 81       	ld	r24, Z
    22a6:	81 33       	cpi	r24, 0x31	; 49
    22a8:	21 f4       	brne	.+8      	; 0x22b2 <security+0x21a>
	 	 				 				 			{
	 	 				 				 				DC_MOTOR_u8rotatedirection(DC_MOTOR_FORWARD);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_MOTOR_u8rotatedirection>
    22b0:	cc cf       	rjmp	.-104    	; 0x224a <security+0x1b2>
	 	 				 				 				break;
	 	 				 				 			}
	 	 				 				 			else if(Local_u8Key=='2')
    22b2:	fe 01       	movw	r30, r28
    22b4:	ee 56       	subi	r30, 0x6E	; 110
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	82 33       	cpi	r24, 0x32	; 50
    22bc:	29 f7       	brne	.-54     	; 0x2288 <security+0x1f0>
	 	 				 				 			{
	 	 				 				 				DC_MOTOR_u8rotatedirection(DC_MOTOR_REVERSE);
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DC_MOTOR_u8rotatedirection>
    22c4:	c2 cf       	rjmp	.-124    	; 0x224a <security+0x1b2>
	 	 				 				 			}
	 	 				 				 		}
	 	 				 		 }

	 	 	}
	 	 		else if(Local_u8Key=='2')
    22c6:	fe 01       	movw	r30, r28
    22c8:	ee 56       	subi	r30, 0x6E	; 110
    22ca:	ff 4f       	sbci	r31, 0xFF	; 255
    22cc:	80 81       	ld	r24, Z
    22ce:	82 33       	cpi	r24, 0x32	; 50
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <security+0x23c>
    22d2:	bb cf       	rjmp	.-138    	; 0x224a <security+0x1b2>
	 	 		{
	 	 			LCD_voidInit();
    22d4:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	 	 		 LCD_sendString("1 CW");
    22d8:	80 e8       	ldi	r24, 0x80	; 128
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 		 LCD_u8GoToXY(2,0);
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	 	 		 LCD_sendString("2 CCW");
    22e8:	85 e8       	ldi	r24, 0x85	; 133
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 	 					 while(1)
	 	 				 	 						 	 				 		 {
	 	 				 	 						 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    22f0:	ce 01       	movw	r24, r28
    22f2:	8e 56       	subi	r24, 0x6E	; 110
    22f4:	9f 4f       	sbci	r25, 0xFF	; 255
    22f6:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    22fa:	fe 01       	movw	r30, r28
    22fc:	ee 56       	subi	r30, 0x6E	; 110
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	8f 3f       	cpi	r24, 0xFF	; 255
    2304:	a9 f3       	breq	.-22     	; 0x22f0 <security+0x258>
	 	 				 	 						 	 				 				 		{
	 	 				 	 						 	 				 				 			if(Local_u8Key=='1')
    2306:	fe 01       	movw	r30, r28
    2308:	ee 56       	subi	r30, 0x6E	; 110
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	80 81       	ld	r24, Z
    230e:	81 33       	cpi	r24, 0x31	; 49
    2310:	09 f0       	breq	.+2      	; 0x2314 <security+0x27c>
    2312:	02 c4       	rjmp	.+2052   	; 0x2b18 <security+0xa80>
	 	 				 	 						 	 				 				 			{LCD_voidInit();
    2314:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	 	 				 	 						 	 				 				 				LCD_sendString("1-90 2-180 3-270");
    2318:	8b e8       	ldi	r24, 0x8B	; 139
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 	 						 	 				 				 				LCD_u8GoToXY(2,0);
    2320:	82 e0       	ldi	r24, 0x02	; 2
    2322:	60 e0       	ldi	r22, 0x00	; 0
    2324:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	 	 				 	 						 	 				 				 				LCD_sendString("4-360");
    2328:	8c e9       	ldi	r24, 0x9C	; 156
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 	 						 	 				 				 		 while(1)
	 	 				 	 						 	 				 				 			 	 				 		 {
	 	 				 	 						 	 				 				 			 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    2330:	ce 01       	movw	r24, r28
    2332:	8e 56       	subi	r24, 0x6E	; 110
    2334:	9f 4f       	sbci	r25, 0xFF	; 255
    2336:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 			 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    233a:	fe 01       	movw	r30, r28
    233c:	ee 56       	subi	r30, 0x6E	; 110
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	80 81       	ld	r24, Z
    2342:	8f 3f       	cpi	r24, 0xFF	; 255
    2344:	a9 f3       	breq	.-22     	; 0x2330 <security+0x298>
	 	 				 	 						 	 				 				 			 	 				 				 		{
	 	 				 	 						 	 				 				 			 	 				 				 			if(Local_u8Key=='1')
    2346:	fe 01       	movw	r30, r28
    2348:	ee 56       	subi	r30, 0x6E	; 110
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	80 81       	ld	r24, Z
    234e:	81 33       	cpi	r24, 0x31	; 49
    2350:	09 f0       	breq	.+2      	; 0x2354 <security+0x2bc>
    2352:	be c0       	rjmp	.+380    	; 0x24d0 <security+0x438>
	 	 				 	 						 	 				 				 			 	 				 				 			{
	 	 				 	 						 	 				 				 			 	 				 				 				DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2354:	82 e0       	ldi	r24, 0x02	; 2
    2356:	62 e0       	ldi	r22, 0x02	; 2
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    235e:	fe 01       	movw	r30, r28
    2360:	e7 57       	subi	r30, 0x77	; 119
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a8 e4       	ldi	r26, 0x48	; 72
    236a:	b3 e4       	ldi	r27, 0x43	; 67
    236c:	80 83       	st	Z, r24
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	a2 83       	std	Z+2, r26	; 0x02
    2372:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	8e 01       	movw	r16, r28
    2376:	0b 57       	subi	r16, 0x7B	; 123
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	fe 01       	movw	r30, r28
    237c:	e7 57       	subi	r30, 0x77	; 119
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	4a ef       	ldi	r20, 0xFA	; 250
    238e:	54 e4       	ldi	r21, 0x44	; 68
    2390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	f8 01       	movw	r30, r16
    239a:	80 83       	st	Z, r24
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	a2 83       	std	Z+2, r26	; 0x02
    23a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a2:	fe 01       	movw	r30, r28
    23a4:	eb 57       	subi	r30, 0x7B	; 123
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23bc:	88 23       	and	r24, r24
    23be:	44 f4       	brge	.+16     	; 0x23d0 <security+0x338>
		__ticks = 1;
    23c0:	fe 01       	movw	r30, r28
    23c2:	ed 57       	subi	r30, 0x7D	; 125
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	80 83       	st	Z, r24
    23ce:	64 c0       	rjmp	.+200    	; 0x2498 <security+0x400>
	else if (__tmp > 65535)
    23d0:	fe 01       	movw	r30, r28
    23d2:	eb 57       	subi	r30, 0x7B	; 123
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	3f ef       	ldi	r19, 0xFF	; 255
    23e2:	4f e7       	ldi	r20, 0x7F	; 127
    23e4:	57 e4       	ldi	r21, 0x47	; 71
    23e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ea:	18 16       	cp	r1, r24
    23ec:	0c f0       	brlt	.+2      	; 0x23f0 <security+0x358>
    23ee:	43 c0       	rjmp	.+134    	; 0x2476 <security+0x3de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	fe 01       	movw	r30, r28
    23f2:	e7 57       	subi	r30, 0x77	; 119
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	60 81       	ld	r22, Z
    23f8:	71 81       	ldd	r23, Z+1	; 0x01
    23fa:	82 81       	ldd	r24, Z+2	; 0x02
    23fc:	93 81       	ldd	r25, Z+3	; 0x03
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	8e 01       	movw	r16, r28
    2410:	0d 57       	subi	r16, 0x7D	; 125
    2412:	1f 4f       	sbci	r17, 0xFF	; 255
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	1f c0       	rjmp	.+62     	; 0x2466 <security+0x3ce>
    2428:	fe 01       	movw	r30, r28
    242a:	ef 57       	subi	r30, 0x7F	; 127
    242c:	ff 4f       	sbci	r31, 0xFF	; 255
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	91 83       	std	Z+1, r25	; 0x01
    2434:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2436:	fe 01       	movw	r30, r28
    2438:	ef 57       	subi	r30, 0x7F	; 127
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	91 81       	ldd	r25, Z+1	; 0x01
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <security+0x3a8>
    2444:	fe 01       	movw	r30, r28
    2446:	ef 57       	subi	r30, 0x7F	; 127
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	de 01       	movw	r26, r28
    2450:	ad 57       	subi	r26, 0x7D	; 125
    2452:	bf 4f       	sbci	r27, 0xFF	; 255
    2454:	fe 01       	movw	r30, r28
    2456:	ed 57       	subi	r30, 0x7D	; 125
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	80 81       	ld	r24, Z
    245c:	91 81       	ldd	r25, Z+1	; 0x01
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	11 96       	adiw	r26, 0x01	; 1
    2462:	9c 93       	st	X, r25
    2464:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2466:	fe 01       	movw	r30, r28
    2468:	ed 57       	subi	r30, 0x7D	; 125
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	d1 f6       	brne	.-76     	; 0x2428 <security+0x390>
    2474:	27 c0       	rjmp	.+78     	; 0x24c4 <security+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2476:	8e 01       	movw	r16, r28
    2478:	0d 57       	subi	r16, 0x7D	; 125
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	fe 01       	movw	r30, r28
    247e:	eb 57       	subi	r30, 0x7B	; 123
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	60 81       	ld	r22, Z
    2484:	71 81       	ldd	r23, Z+1	; 0x01
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	f8 01       	movw	r30, r16
    2494:	91 83       	std	Z+1, r25	; 0x01
    2496:	80 83       	st	Z, r24
    2498:	de 01       	movw	r26, r28
    249a:	a1 58       	subi	r26, 0x81	; 129
    249c:	bf 4f       	sbci	r27, 0xFF	; 255
    249e:	fe 01       	movw	r30, r28
    24a0:	ed 57       	subi	r30, 0x7D	; 125
    24a2:	ff 4f       	sbci	r31, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	8d 93       	st	X+, r24
    24aa:	9c 93       	st	X, r25
    24ac:	fe 01       	movw	r30, r28
    24ae:	e1 58       	subi	r30, 0x81	; 129
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	01 97       	sbiw	r24, 0x01	; 1
    24b8:	f1 f7       	brne	.-4      	; 0x24b6 <security+0x41e>
    24ba:	fe 01       	movw	r30, r28
    24bc:	e1 58       	subi	r30, 0x81	; 129
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	91 83       	std	Z+1, r25	; 0x01
    24c2:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 				 				_delay_ms(200);
	 	 				 	 						 	 				 				 			 	 				 				 	            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    24c4:	82 e0       	ldi	r24, 0x02	; 2
    24c6:	63 e0       	ldi	r22, 0x03	; 3
    24c8:	41 e0       	ldi	r20, 0x01	; 1
    24ca:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    24ce:	bd ce       	rjmp	.-646    	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				 			else if(Local_u8Key=='2')
    24d0:	fe 01       	movw	r30, r28
    24d2:	ee 56       	subi	r30, 0x6E	; 110
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	82 33       	cpi	r24, 0x32	; 50
    24da:	59 f4       	brne	.+22     	; 0x24f2 <security+0x45a>
	 	 				 	 						 	 				 				 			 	 				 				 			{


	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    24dc:	82 e0       	ldi	r24, 0x02	; 2
    24de:	63 e0       	ldi	r22, 0x03	; 3
    24e0:	41 e0       	ldi	r20, 0x01	; 1
    24e2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    24e6:	82 e0       	ldi	r24, 0x02	; 2
    24e8:	64 e0       	ldi	r22, 0x04	; 4
    24ea:	41 e0       	ldi	r20, 0x01	; 1
    24ec:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    24f0:	ac ce       	rjmp	.-680    	; 0x224a <security+0x1b2>



	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				 			else if(Local_u8Key=='3')
    24f2:	fe 01       	movw	r30, r28
    24f4:	ee 56       	subi	r30, 0x6E	; 110
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	83 33       	cpi	r24, 0x33	; 51
    24fc:	09 f0       	breq	.+2      	; 0x2500 <security+0x468>
    24fe:	c8 c0       	rjmp	.+400    	; 0x2690 <security+0x5f8>
	 	 				 	 						 	 				 				 			 	 				 				 			{

	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2500:	82 e0       	ldi	r24, 0x02	; 2
    2502:	63 e0       	ldi	r22, 0x03	; 3
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    250a:	82 e0       	ldi	r24, 0x02	; 2
    250c:	64 e0       	ldi	r22, 0x04	; 4
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2514:	fe 01       	movw	r30, r28
    2516:	e5 58       	subi	r30, 0x85	; 133
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	aa ef       	ldi	r26, 0xFA	; 250
    2520:	b4 e4       	ldi	r27, 0x44	; 68
    2522:	80 83       	st	Z, r24
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	a2 83       	std	Z+2, r26	; 0x02
    2528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	8e 01       	movw	r16, r28
    252c:	09 58       	subi	r16, 0x89	; 137
    252e:	1f 4f       	sbci	r17, 0xFF	; 255
    2530:	fe 01       	movw	r30, r28
    2532:	e5 58       	subi	r30, 0x85	; 133
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	4a ef       	ldi	r20, 0xFA	; 250
    2544:	54 e4       	ldi	r21, 0x44	; 68
    2546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	f8 01       	movw	r30, r16
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	a2 83       	std	Z+2, r26	; 0x02
    2556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2558:	fe 01       	movw	r30, r28
    255a:	e9 58       	subi	r30, 0x89	; 137
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	44 f4       	brge	.+16     	; 0x2586 <security+0x4ee>
		__ticks = 1;
    2576:	fe 01       	movw	r30, r28
    2578:	eb 58       	subi	r30, 0x8B	; 139
    257a:	ff 4f       	sbci	r31, 0xFF	; 255
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	80 83       	st	Z, r24
    2584:	64 c0       	rjmp	.+200    	; 0x264e <security+0x5b6>
	else if (__tmp > 65535)
    2586:	fe 01       	movw	r30, r28
    2588:	e9 58       	subi	r30, 0x89	; 137
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	3f ef       	ldi	r19, 0xFF	; 255
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	57 e4       	ldi	r21, 0x47	; 71
    259c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	0c f0       	brlt	.+2      	; 0x25a6 <security+0x50e>
    25a4:	43 c0       	rjmp	.+134    	; 0x262c <security+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a6:	fe 01       	movw	r30, r28
    25a8:	e5 58       	subi	r30, 0x85	; 133
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e2       	ldi	r20, 0x20	; 32
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	8e 01       	movw	r16, r28
    25c6:	0b 58       	subi	r16, 0x8B	; 139
    25c8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	f8 01       	movw	r30, r16
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	1f c0       	rjmp	.+62     	; 0x261c <security+0x584>
    25de:	fe 01       	movw	r30, r28
    25e0:	ed 58       	subi	r30, 0x8D	; 141
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	88 ec       	ldi	r24, 0xC8	; 200
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    25ec:	fe 01       	movw	r30, r28
    25ee:	ed 58       	subi	r30, 0x8D	; 141
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 81       	ld	r24, Z
    25f4:	91 81       	ldd	r25, Z+1	; 0x01
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <security+0x55e>
    25fa:	fe 01       	movw	r30, r28
    25fc:	ed 58       	subi	r30, 0x8D	; 141
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2604:	de 01       	movw	r26, r28
    2606:	ab 58       	subi	r26, 0x8B	; 139
    2608:	bf 4f       	sbci	r27, 0xFF	; 255
    260a:	fe 01       	movw	r30, r28
    260c:	eb 58       	subi	r30, 0x8B	; 139
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	91 81       	ldd	r25, Z+1	; 0x01
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	11 96       	adiw	r26, 0x01	; 1
    2618:	9c 93       	st	X, r25
    261a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261c:	fe 01       	movw	r30, r28
    261e:	eb 58       	subi	r30, 0x8B	; 139
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	80 81       	ld	r24, Z
    2624:	91 81       	ldd	r25, Z+1	; 0x01
    2626:	00 97       	sbiw	r24, 0x00	; 0
    2628:	d1 f6       	brne	.-76     	; 0x25de <security+0x546>
    262a:	27 c0       	rjmp	.+78     	; 0x267a <security+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262c:	8e 01       	movw	r16, r28
    262e:	0b 58       	subi	r16, 0x8B	; 139
    2630:	1f 4f       	sbci	r17, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e9 58       	subi	r30, 0x89	; 137
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	82 81       	ldd	r24, Z+2	; 0x02
    263e:	93 81       	ldd	r25, Z+3	; 0x03
    2640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	f8 01       	movw	r30, r16
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	80 83       	st	Z, r24
    264e:	de 01       	movw	r26, r28
    2650:	af 58       	subi	r26, 0x8F	; 143
    2652:	bf 4f       	sbci	r27, 0xFF	; 255
    2654:	fe 01       	movw	r30, r28
    2656:	eb 58       	subi	r30, 0x8B	; 139
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	80 81       	ld	r24, Z
    265c:	91 81       	ldd	r25, Z+1	; 0x01
    265e:	8d 93       	st	X+, r24
    2660:	9c 93       	st	X, r25
    2662:	fe 01       	movw	r30, r28
    2664:	ef 58       	subi	r30, 0x8F	; 143
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <security+0x5d4>
    2670:	fe 01       	movw	r30, r28
    2672:	ef 58       	subi	r30, 0x8F	; 143
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                   _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	63 e0       	ldi	r22, 0x03	; 3
    267e:	40 e0       	ldi	r20, 0x00	; 0
    2680:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2684:	82 e0       	ldi	r24, 0x02	; 2
    2686:	65 e0       	ldi	r22, 0x05	; 5
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    268e:	dd cd       	rjmp	.-1094   	; 0x224a <security+0x1b2>


	 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 				 			 	 				 				 			}
	 	 				 	 						 	 				 				 			 	 				 				           else if(Local_u8Key=='4')
    2690:	fe 01       	movw	r30, r28
    2692:	ee 56       	subi	r30, 0x6E	; 110
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	84 33       	cpi	r24, 0x34	; 52
    269a:	09 f0       	breq	.+2      	; 0x269e <security+0x606>
    269c:	49 ce       	rjmp	.-878    	; 0x2330 <security+0x298>
	 	 				 	 						 	 				 				 			 	 				 				           {
	 	 				 	 						 	 				 				 			 	 				 				        	   DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    269e:	82 e0       	ldi	r24, 0x02	; 2
    26a0:	63 e0       	ldi	r22, 0x03	; 3
    26a2:	41 e0       	ldi	r20, 0x01	; 1
    26a4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 				 	 						 	 				 				 			 	 				 			                       DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	64 e0       	ldi	r22, 0x04	; 4
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    26b2:	fe 01       	movw	r30, r28
    26b4:	e3 59       	subi	r30, 0x93	; 147
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	aa ef       	ldi	r26, 0xFA	; 250
    26be:	b4 e4       	ldi	r27, 0x44	; 68
    26c0:	80 83       	st	Z, r24
    26c2:	91 83       	std	Z+1, r25	; 0x01
    26c4:	a2 83       	std	Z+2, r26	; 0x02
    26c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	8e 01       	movw	r16, r28
    26ca:	07 59       	subi	r16, 0x97	; 151
    26cc:	1f 4f       	sbci	r17, 0xFF	; 255
    26ce:	fe 01       	movw	r30, r28
    26d0:	e3 59       	subi	r30, 0x93	; 147
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	93 81       	ldd	r25, Z+3	; 0x03
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	f8 01       	movw	r30, r16
    26ee:	80 83       	st	Z, r24
    26f0:	91 83       	std	Z+1, r25	; 0x01
    26f2:	a2 83       	std	Z+2, r26	; 0x02
    26f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26f6:	fe 01       	movw	r30, r28
    26f8:	e7 59       	subi	r30, 0x97	; 151
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	60 81       	ld	r22, Z
    26fe:	71 81       	ldd	r23, Z+1	; 0x01
    2700:	82 81       	ldd	r24, Z+2	; 0x02
    2702:	93 81       	ldd	r25, Z+3	; 0x03
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	44 f4       	brge	.+16     	; 0x2724 <security+0x68c>
		__ticks = 1;
    2714:	fe 01       	movw	r30, r28
    2716:	e9 59       	subi	r30, 0x99	; 153
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	91 83       	std	Z+1, r25	; 0x01
    2720:	80 83       	st	Z, r24
    2722:	64 c0       	rjmp	.+200    	; 0x27ec <security+0x754>
	else if (__tmp > 65535)
    2724:	fe 01       	movw	r30, r28
    2726:	e7 59       	subi	r30, 0x97	; 151
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	3f ef       	ldi	r19, 0xFF	; 255
    2736:	4f e7       	ldi	r20, 0x7F	; 127
    2738:	57 e4       	ldi	r21, 0x47	; 71
    273a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    273e:	18 16       	cp	r1, r24
    2740:	0c f0       	brlt	.+2      	; 0x2744 <security+0x6ac>
    2742:	43 c0       	rjmp	.+134    	; 0x27ca <security+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2744:	fe 01       	movw	r30, r28
    2746:	e3 59       	subi	r30, 0x93	; 147
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	20 e0       	ldi	r18, 0x00	; 0
    2754:	30 e0       	ldi	r19, 0x00	; 0
    2756:	40 e2       	ldi	r20, 0x20	; 32
    2758:	51 e4       	ldi	r21, 0x41	; 65
    275a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    275e:	dc 01       	movw	r26, r24
    2760:	cb 01       	movw	r24, r22
    2762:	8e 01       	movw	r16, r28
    2764:	09 59       	subi	r16, 0x99	; 153
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	f8 01       	movw	r30, r16
    2776:	91 83       	std	Z+1, r25	; 0x01
    2778:	80 83       	st	Z, r24
    277a:	1f c0       	rjmp	.+62     	; 0x27ba <security+0x722>
    277c:	fe 01       	movw	r30, r28
    277e:	eb 59       	subi	r30, 0x9B	; 155
    2780:	ff 4f       	sbci	r31, 0xFF	; 255
    2782:	88 ec       	ldi	r24, 0xC8	; 200
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	fe 01       	movw	r30, r28
    278c:	eb 59       	subi	r30, 0x9B	; 155
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <security+0x6fc>
    2798:	fe 01       	movw	r30, r28
    279a:	eb 59       	subi	r30, 0x9B	; 155
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a2:	de 01       	movw	r26, r28
    27a4:	a9 59       	subi	r26, 0x99	; 153
    27a6:	bf 4f       	sbci	r27, 0xFF	; 255
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 59       	subi	r30, 0x99	; 153
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	11 96       	adiw	r26, 0x01	; 1
    27b6:	9c 93       	st	X, r25
    27b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	fe 01       	movw	r30, r28
    27bc:	e9 59       	subi	r30, 0x99	; 153
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	00 97       	sbiw	r24, 0x00	; 0
    27c6:	d1 f6       	brne	.-76     	; 0x277c <security+0x6e4>
    27c8:	27 c0       	rjmp	.+78     	; 0x2818 <security+0x780>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ca:	8e 01       	movw	r16, r28
    27cc:	09 59       	subi	r16, 0x99	; 153
    27ce:	1f 4f       	sbci	r17, 0xFF	; 255
    27d0:	fe 01       	movw	r30, r28
    27d2:	e7 59       	subi	r30, 0x97	; 151
    27d4:	ff 4f       	sbci	r31, 0xFF	; 255
    27d6:	60 81       	ld	r22, Z
    27d8:	71 81       	ldd	r23, Z+1	; 0x01
    27da:	82 81       	ldd	r24, Z+2	; 0x02
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	f8 01       	movw	r30, r16
    27e8:	91 83       	std	Z+1, r25	; 0x01
    27ea:	80 83       	st	Z, r24
    27ec:	de 01       	movw	r26, r28
    27ee:	ad 59       	subi	r26, 0x9D	; 157
    27f0:	bf 4f       	sbci	r27, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e9 59       	subi	r30, 0x99	; 153
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	80 81       	ld	r24, Z
    27fa:	91 81       	ldd	r25, Z+1	; 0x01
    27fc:	8d 93       	st	X+, r24
    27fe:	9c 93       	st	X, r25
    2800:	fe 01       	movw	r30, r28
    2802:	ed 59       	subi	r30, 0x9D	; 157
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	80 81       	ld	r24, Z
    2808:	91 81       	ldd	r25, Z+1	; 0x01
    280a:	01 97       	sbiw	r24, 0x01	; 1
    280c:	f1 f7       	brne	.-4      	; 0x280a <security+0x772>
    280e:	fe 01       	movw	r30, r28
    2810:	ed 59       	subi	r30, 0x9D	; 157
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
	 				 	 						 	 				 				 			 	 				 			                       _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	64 e0       	ldi	r22, 0x04	; 4
    281c:	41 e0       	ldi	r20, 0x01	; 1
    281e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2822:	fe 01       	movw	r30, r28
    2824:	e1 5a       	subi	r30, 0xA1	; 161
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a8 e4       	ldi	r26, 0x48	; 72
    282e:	b3 e4       	ldi	r27, 0x43	; 67
    2830:	80 83       	st	Z, r24
    2832:	91 83       	std	Z+1, r25	; 0x01
    2834:	a2 83       	std	Z+2, r26	; 0x02
    2836:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	8e 01       	movw	r16, r28
    283a:	05 5a       	subi	r16, 0xA5	; 165
    283c:	1f 4f       	sbci	r17, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e1 5a       	subi	r30, 0xA1	; 161
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	4a ef       	ldi	r20, 0xFA	; 250
    2852:	54 e4       	ldi	r21, 0x44	; 68
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	f8 01       	movw	r30, r16
    285e:	80 83       	st	Z, r24
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	a2 83       	std	Z+2, r26	; 0x02
    2864:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2866:	fe 01       	movw	r30, r28
    2868:	e5 5a       	subi	r30, 0xA5	; 165
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e8       	ldi	r20, 0x80	; 128
    287a:	5f e3       	ldi	r21, 0x3F	; 63
    287c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2880:	88 23       	and	r24, r24
    2882:	44 f4       	brge	.+16     	; 0x2894 <security+0x7fc>
		__ticks = 1;
    2884:	fe 01       	movw	r30, r28
    2886:	e7 5a       	subi	r30, 0xA7	; 167
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	90 e0       	ldi	r25, 0x00	; 0
    288e:	91 83       	std	Z+1, r25	; 0x01
    2890:	80 83       	st	Z, r24
    2892:	64 c0       	rjmp	.+200    	; 0x295c <security+0x8c4>
	else if (__tmp > 65535)
    2894:	fe 01       	movw	r30, r28
    2896:	e5 5a       	subi	r30, 0xA5	; 165
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	0c f0       	brlt	.+2      	; 0x28b4 <security+0x81c>
    28b2:	43 c0       	rjmp	.+134    	; 0x293a <security+0x8a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b4:	fe 01       	movw	r30, r28
    28b6:	e1 5a       	subi	r30, 0xA1	; 161
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	60 81       	ld	r22, Z
    28bc:	71 81       	ldd	r23, Z+1	; 0x01
    28be:	82 81       	ldd	r24, Z+2	; 0x02
    28c0:	93 81       	ldd	r25, Z+3	; 0x03
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	40 e2       	ldi	r20, 0x20	; 32
    28c8:	51 e4       	ldi	r21, 0x41	; 65
    28ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	8e 01       	movw	r16, r28
    28d4:	07 5a       	subi	r16, 0xA7	; 167
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	f8 01       	movw	r30, r16
    28e6:	91 83       	std	Z+1, r25	; 0x01
    28e8:	80 83       	st	Z, r24
    28ea:	1f c0       	rjmp	.+62     	; 0x292a <security+0x892>
    28ec:	fe 01       	movw	r30, r28
    28ee:	e9 5a       	subi	r30, 0xA9	; 169
    28f0:	ff 4f       	sbci	r31, 0xFF	; 255
    28f2:	88 ec       	ldi	r24, 0xC8	; 200
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
    28fa:	fe 01       	movw	r30, r28
    28fc:	e9 5a       	subi	r30, 0xA9	; 169
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <security+0x86c>
    2908:	fe 01       	movw	r30, r28
    290a:	e9 5a       	subi	r30, 0xA9	; 169
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	de 01       	movw	r26, r28
    2914:	a7 5a       	subi	r26, 0xA7	; 167
    2916:	bf 4f       	sbci	r27, 0xFF	; 255
    2918:	fe 01       	movw	r30, r28
    291a:	e7 5a       	subi	r30, 0xA7	; 167
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	11 96       	adiw	r26, 0x01	; 1
    2926:	9c 93       	st	X, r25
    2928:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	fe 01       	movw	r30, r28
    292c:	e7 5a       	subi	r30, 0xA7	; 167
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	d1 f6       	brne	.-76     	; 0x28ec <security+0x854>
    2938:	27 c0       	rjmp	.+78     	; 0x2988 <security+0x8f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	8e 01       	movw	r16, r28
    293c:	07 5a       	subi	r16, 0xA7	; 167
    293e:	1f 4f       	sbci	r17, 0xFF	; 255
    2940:	fe 01       	movw	r30, r28
    2942:	e5 5a       	subi	r30, 0xA5	; 165
    2944:	ff 4f       	sbci	r31, 0xFF	; 255
    2946:	60 81       	ld	r22, Z
    2948:	71 81       	ldd	r23, Z+1	; 0x01
    294a:	82 81       	ldd	r24, Z+2	; 0x02
    294c:	93 81       	ldd	r25, Z+3	; 0x03
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	f8 01       	movw	r30, r16
    2958:	91 83       	std	Z+1, r25	; 0x01
    295a:	80 83       	st	Z, r24
    295c:	de 01       	movw	r26, r28
    295e:	ab 5a       	subi	r26, 0xAB	; 171
    2960:	bf 4f       	sbci	r27, 0xFF	; 255
    2962:	fe 01       	movw	r30, r28
    2964:	e7 5a       	subi	r30, 0xA7	; 167
    2966:	ff 4f       	sbci	r31, 0xFF	; 255
    2968:	80 81       	ld	r24, Z
    296a:	91 81       	ldd	r25, Z+1	; 0x01
    296c:	8d 93       	st	X+, r24
    296e:	9c 93       	st	X, r25
    2970:	fe 01       	movw	r30, r28
    2972:	eb 5a       	subi	r30, 0xAB	; 171
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 81       	ld	r24, Z
    2978:	91 81       	ldd	r25, Z+1	; 0x01
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <security+0x8e2>
    297e:	fe 01       	movw	r30, r28
    2980:	eb 5a       	subi	r30, 0xAB	; 171
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	91 83       	std	Z+1, r25	; 0x01
    2986:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                   _delay_ms(200);
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	63 e0       	ldi	r22, 0x03	; 3
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                    DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	65 e0       	ldi	r22, 0x05	; 5
    2996:	41 e0       	ldi	r20, 0x01	; 1
    2998:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    299c:	fe 01       	movw	r30, r28
    299e:	ef 5a       	subi	r30, 0xAF	; 175
    29a0:	ff 4f       	sbci	r31, 0xFF	; 255
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	aa ef       	ldi	r26, 0xFA	; 250
    29a8:	b4 e4       	ldi	r27, 0x44	; 68
    29aa:	80 83       	st	Z, r24
    29ac:	91 83       	std	Z+1, r25	; 0x01
    29ae:	a2 83       	std	Z+2, r26	; 0x02
    29b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	8e 01       	movw	r16, r28
    29b4:	03 5b       	subi	r16, 0xB3	; 179
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	fe 01       	movw	r30, r28
    29ba:	ef 5a       	subi	r30, 0xAF	; 175
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	60 81       	ld	r22, Z
    29c0:	71 81       	ldd	r23, Z+1	; 0x01
    29c2:	82 81       	ldd	r24, Z+2	; 0x02
    29c4:	93 81       	ldd	r25, Z+3	; 0x03
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	f8 01       	movw	r30, r16
    29d8:	80 83       	st	Z, r24
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	a2 83       	std	Z+2, r26	; 0x02
    29de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29e0:	fe 01       	movw	r30, r28
    29e2:	e3 5b       	subi	r30, 0xB3	; 179
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	60 81       	ld	r22, Z
    29e8:	71 81       	ldd	r23, Z+1	; 0x01
    29ea:	82 81       	ldd	r24, Z+2	; 0x02
    29ec:	93 81       	ldd	r25, Z+3	; 0x03
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	44 f4       	brge	.+16     	; 0x2a0e <security+0x976>
		__ticks = 1;
    29fe:	fe 01       	movw	r30, r28
    2a00:	e5 5b       	subi	r30, 0xB5	; 181
    2a02:	ff 4f       	sbci	r31, 0xFF	; 255
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	64 c0       	rjmp	.+200    	; 0x2ad6 <security+0xa3e>
	else if (__tmp > 65535)
    2a0e:	fe 01       	movw	r30, r28
    2a10:	e3 5b       	subi	r30, 0xB3	; 179
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	0c f0       	brlt	.+2      	; 0x2a2e <security+0x996>
    2a2c:	43 c0       	rjmp	.+134    	; 0x2ab4 <security+0xa1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2e:	fe 01       	movw	r30, r28
    2a30:	ef 5a       	subi	r30, 0xAF	; 175
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	60 81       	ld	r22, Z
    2a36:	71 81       	ldd	r23, Z+1	; 0x01
    2a38:	82 81       	ldd	r24, Z+2	; 0x02
    2a3a:	93 81       	ldd	r25, Z+3	; 0x03
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e2       	ldi	r20, 0x20	; 32
    2a42:	51 e4       	ldi	r21, 0x41	; 65
    2a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	8e 01       	movw	r16, r28
    2a4e:	05 5b       	subi	r16, 0xB5	; 181
    2a50:	1f 4f       	sbci	r17, 0xFF	; 255
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	f8 01       	movw	r30, r16
    2a60:	91 83       	std	Z+1, r25	; 0x01
    2a62:	80 83       	st	Z, r24
    2a64:	1f c0       	rjmp	.+62     	; 0x2aa4 <security+0xa0c>
    2a66:	fe 01       	movw	r30, r28
    2a68:	e7 5b       	subi	r30, 0xB7	; 183
    2a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6c:	88 ec       	ldi	r24, 0xC8	; 200
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	91 83       	std	Z+1, r25	; 0x01
    2a72:	80 83       	st	Z, r24
    2a74:	fe 01       	movw	r30, r28
    2a76:	e7 5b       	subi	r30, 0xB7	; 183
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	91 81       	ldd	r25, Z+1	; 0x01
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <security+0x9e6>
    2a82:	fe 01       	movw	r30, r28
    2a84:	e7 5b       	subi	r30, 0xB7	; 183
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	91 83       	std	Z+1, r25	; 0x01
    2a8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	de 01       	movw	r26, r28
    2a8e:	a5 5b       	subi	r26, 0xB5	; 181
    2a90:	bf 4f       	sbci	r27, 0xFF	; 255
    2a92:	fe 01       	movw	r30, r28
    2a94:	e5 5b       	subi	r30, 0xB5	; 181
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	11 96       	adiw	r26, 0x01	; 1
    2aa0:	9c 93       	st	X, r25
    2aa2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 5b       	subi	r30, 0xB5	; 181
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	d1 f6       	brne	.-76     	; 0x2a66 <security+0x9ce>
    2ab2:	27 c0       	rjmp	.+78     	; 0x2b02 <security+0xa6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ab4:	8e 01       	movw	r16, r28
    2ab6:	05 5b       	subi	r16, 0xB5	; 181
    2ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aba:	fe 01       	movw	r30, r28
    2abc:	e3 5b       	subi	r30, 0xB3	; 179
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	f8 01       	movw	r30, r16
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	80 83       	st	Z, r24
    2ad6:	de 01       	movw	r26, r28
    2ad8:	a9 5b       	subi	r26, 0xB9	; 185
    2ada:	bf 4f       	sbci	r27, 0xFF	; 255
    2adc:	fe 01       	movw	r30, r28
    2ade:	e5 5b       	subi	r30, 0xB5	; 181
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	80 81       	ld	r24, Z
    2ae4:	91 81       	ldd	r25, Z+1	; 0x01
    2ae6:	8d 93       	st	X+, r24
    2ae8:	9c 93       	st	X, r25
    2aea:	fe 01       	movw	r30, r28
    2aec:	e9 5b       	subi	r30, 0xB9	; 185
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	80 81       	ld	r24, Z
    2af2:	91 81       	ldd	r25, Z+1	; 0x01
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <security+0xa5c>
    2af8:	fe 01       	movw	r30, r28
    2afa:	e9 5b       	subi	r30, 0xB9	; 185
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	80 83       	st	Z, r24
	 	 				 	 						 	 				 				 			 	 				 			                    _delay_ms(2000);
	 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2b02:	82 e0       	ldi	r24, 0x02	; 2
    2b04:	62 e0       	ldi	r22, 0x02	; 2
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	64 e0       	ldi	r22, 0x04	; 4
    2b10:	40 e0       	ldi	r20, 0x00	; 0
    2b12:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2b16:	99 cb       	rjmp	.-2254   	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 				 		}
	 	 				 	 						 	 				 				 			 	 				 		 }

	 	 				 	 						 	 				 				 				break;
	 	 				 	 						 	 				 				 			}
	 	 				 	 						 	 				 				 			else if(Local_u8Key=='2')
    2b18:	fe 01       	movw	r30, r28
    2b1a:	ee 56       	subi	r30, 0x6E	; 110
    2b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1e:	80 81       	ld	r24, Z
    2b20:	82 33       	cpi	r24, 0x32	; 50
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <security+0xa8e>
    2b24:	e5 cb       	rjmp	.-2102   	; 0x22f0 <security+0x258>
	 	 				 	 						 	 				 				 			{LCD_voidInit();
    2b26:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
	 	 				 	 						 	 				 				 		       LCD_sendString("1-90 2-180 3-270");
    2b2a:	8b e8       	ldi	r24, 0x8B	; 139
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 	 						 	 				 				 		       LCD_u8GoToXY(2,0);
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	60 e0       	ldi	r22, 0x00	; 0
    2b36:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <LCD_u8GoToXY>
	 	 				 	 						 	 				 				 		       LCD_sendString("4-360");
    2b3a:	8c e9       	ldi	r24, 0x9C	; 156
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
	 	 				 	 						 	 				 				 		 while(1)
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		 {
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 			KPD_u8GetKeyState(&Local_u8Key);
    2b42:	ce 01       	movw	r24, r28
    2b44:	8e 56       	subi	r24, 0x6E	; 110
    2b46:	9f 4f       	sbci	r25, 0xFF	; 255
    2b48:	0e 94 da 09 	call	0x13b4	; 0x13b4 <KPD_u8GetKeyState>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 				 		if(Local_u8Key !=  KPD_KEY_NOT_PRESSED )
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	ee 56       	subi	r30, 0x6E	; 110
    2b50:	ff 4f       	sbci	r31, 0xFF	; 255
    2b52:	80 81       	ld	r24, Z
    2b54:	8f 3f       	cpi	r24, 0xFF	; 255
    2b56:	a9 f3       	breq	.-22     	; 0x2b42 <security+0xaaa>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 				 		{if(Local_u8Key=='1')
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ee 56       	subi	r30, 0x6E	; 110
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	80 81       	ld	r24, Z
    2b60:	81 33       	cpi	r24, 0x31	; 49
    2b62:	09 f0       	breq	.+2      	; 0x2b66 <security+0xace>
    2b64:	90 c0       	rjmp	.+288    	; 0x2c86 <security+0xbee>
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 			    {
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    2b66:	82 e0       	ldi	r24, 0x02	; 2
    2b68:	65 e0       	ldi	r22, 0x05	; 5
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2b70:	fe 01       	movw	r30, r28
    2b72:	ed 5b       	subi	r30, 0xBD	; 189
    2b74:	ff 4f       	sbci	r31, 0xFF	; 255
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a8 e4       	ldi	r26, 0x48	; 72
    2b7c:	b3 e4       	ldi	r27, 0x43	; 67
    2b7e:	80 83       	st	Z, r24
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	a2 83       	std	Z+2, r26	; 0x02
    2b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	8e 01       	movw	r16, r28
    2b88:	01 5c       	subi	r16, 0xC1	; 193
    2b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	ed 5b       	subi	r30, 0xBD	; 189
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	60 81       	ld	r22, Z
    2b94:	71 81       	ldd	r23, Z+1	; 0x01
    2b96:	82 81       	ldd	r24, Z+2	; 0x02
    2b98:	93 81       	ldd	r25, Z+3	; 0x03
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	4a ef       	ldi	r20, 0xFA	; 250
    2ba0:	54 e4       	ldi	r21, 0x44	; 68
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	f8 01       	movw	r30, r16
    2bac:	80 83       	st	Z, r24
    2bae:	91 83       	std	Z+1, r25	; 0x01
    2bb0:	a2 83       	std	Z+2, r26	; 0x02
    2bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	ff 96       	adiw	r30, 0x3f	; 63
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <security+0xb42>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9e af       	std	Y+62, r25	; 0x3e
    2bd6:	8d af       	std	Y+61, r24	; 0x3d
    2bd8:	46 c0       	rjmp	.+140    	; 0x2c66 <security+0xbce>
	else if (__tmp > 65535)
    2bda:	fe 01       	movw	r30, r28
    2bdc:	ff 96       	adiw	r30, 0x3f	; 63
    2bde:	60 81       	ld	r22, Z
    2be0:	71 81       	ldd	r23, Z+1	; 0x01
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	64 f5       	brge	.+88     	; 0x2c4e <security+0xbb6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ed 5b       	subi	r30, 0xBD	; 189
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e2       	ldi	r20, 0x20	; 32
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	bc 01       	movw	r22, r24
    2c16:	cd 01       	movw	r24, r26
    2c18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	9e af       	std	Y+62, r25	; 0x3e
    2c22:	8d af       	std	Y+61, r24	; 0x3d
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <security+0xbac>
    2c26:	88 ec       	ldi	r24, 0xC8	; 200
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	9c af       	std	Y+60, r25	; 0x3c
    2c2c:	8b af       	std	Y+59, r24	; 0x3b
    2c2e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c30:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <security+0xb9a>
    2c36:	9c af       	std	Y+60, r25	; 0x3c
    2c38:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c3e:	01 97       	sbiw	r24, 0x01	; 1
    2c40:	9e af       	std	Y+62, r25	; 0x3e
    2c42:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c44:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c46:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c48:	00 97       	sbiw	r24, 0x00	; 0
    2c4a:	69 f7       	brne	.-38     	; 0x2c26 <security+0xb8e>
    2c4c:	16 c0       	rjmp	.+44     	; 0x2c7a <security+0xbe2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4e:	fe 01       	movw	r30, r28
    2c50:	ff 96       	adiw	r30, 0x3f	; 63
    2c52:	60 81       	ld	r22, Z
    2c54:	71 81       	ldd	r23, Z+1	; 0x01
    2c56:	82 81       	ldd	r24, Z+2	; 0x02
    2c58:	93 81       	ldd	r25, Z+3	; 0x03
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9e af       	std	Y+62, r25	; 0x3e
    2c64:	8d af       	std	Y+61, r24	; 0x3d
    2c66:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c68:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c6a:	9a af       	std	Y+58, r25	; 0x3a
    2c6c:	89 af       	std	Y+57, r24	; 0x39
    2c6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c70:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <security+0xbda>
    2c76:	9a af       	std	Y+58, r25	; 0x3a
    2c78:	89 af       	std	Y+57, r24	; 0x39
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				_delay_ms(200);
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 	            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	64 e0       	ldi	r22, 0x04	; 4
    2c7e:	41 e0       	ldi	r20, 0x01	; 1
    2c80:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2c84:	e2 ca       	rjmp	.-2620   	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 				break;
	 	 				 	 						 	 				 					 	 				 	 						 	 				 				 			 	 				 				 			    }
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		        else if(Local_u8Key=='2')
    2c86:	fe 01       	movw	r30, r28
    2c88:	ee 56       	subi	r30, 0x6E	; 110
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 81       	ld	r24, Z
    2c8e:	82 33       	cpi	r24, 0x32	; 50
    2c90:	59 f4       	brne	.+22     	; 0x2ca8 <security+0xc10>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		{DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2c92:	82 e0       	ldi	r24, 0x02	; 2
    2c94:	64 e0       	ldi	r22, 0x04	; 4
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                 DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2c9c:	82 e0       	ldi	r24, 0x02	; 2
    2c9e:	63 e0       	ldi	r22, 0x03	; 3
    2ca0:	41 e0       	ldi	r20, 0x01	; 1
    2ca2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2ca6:	d1 ca       	rjmp	.-2654   	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                 break;
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 				 		}
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        else if(Local_u8Key=='3')
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ee 56       	subi	r30, 0x6E	; 110
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	83 33       	cpi	r24, 0x33	; 51
    2cb2:	09 f0       	breq	.+2      	; 0x2cb6 <security+0xc1e>
    2cb4:	87 c0       	rjmp	.+270    	; 0x2dc4 <security+0xd2c>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        {DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	64 e0       	ldi	r22, 0x04	; 4
    2cba:	41 e0       	ldi	r20, 0x01	; 1
    2cbc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2cc0:	82 e0       	ldi	r24, 0x02	; 2
    2cc2:	63 e0       	ldi	r22, 0x03	; 3
    2cc4:	41 e0       	ldi	r20, 0x01	; 1
    2cc6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	aa ef       	ldi	r26, 0xFA	; 250
    2cd0:	b4 e4       	ldi	r27, 0x44	; 68
    2cd2:	8d ab       	std	Y+53, r24	; 0x35
    2cd4:	9e ab       	std	Y+54, r25	; 0x36
    2cd6:	af ab       	std	Y+55, r26	; 0x37
    2cd8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cda:	6d a9       	ldd	r22, Y+53	; 0x35
    2cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cde:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	4a ef       	ldi	r20, 0xFA	; 250
    2ce8:	54 e4       	ldi	r21, 0x44	; 68
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	89 ab       	std	Y+49, r24	; 0x31
    2cf4:	9a ab       	std	Y+50, r25	; 0x32
    2cf6:	ab ab       	std	Y+51, r26	; 0x33
    2cf8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2cfa:	69 a9       	ldd	r22, Y+49	; 0x31
    2cfc:	7a a9       	ldd	r23, Y+50	; 0x32
    2cfe:	8b a9       	ldd	r24, Y+51	; 0x33
    2d00:	9c a9       	ldd	r25, Y+52	; 0x34
    2d02:	20 e0       	ldi	r18, 0x00	; 0
    2d04:	30 e0       	ldi	r19, 0x00	; 0
    2d06:	40 e8       	ldi	r20, 0x80	; 128
    2d08:	5f e3       	ldi	r21, 0x3F	; 63
    2d0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d0e:	88 23       	and	r24, r24
    2d10:	2c f4       	brge	.+10     	; 0x2d1c <security+0xc84>
		__ticks = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	98 ab       	std	Y+48, r25	; 0x30
    2d18:	8f a7       	std	Y+47, r24	; 0x2f
    2d1a:	3f c0       	rjmp	.+126    	; 0x2d9a <security+0xd02>
	else if (__tmp > 65535)
    2d1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d20:	8b a9       	ldd	r24, Y+51	; 0x33
    2d22:	9c a9       	ldd	r25, Y+52	; 0x34
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	3f ef       	ldi	r19, 0xFF	; 255
    2d28:	4f e7       	ldi	r20, 0x7F	; 127
    2d2a:	57 e4       	ldi	r21, 0x47	; 71
    2d2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d30:	18 16       	cp	r1, r24
    2d32:	4c f5       	brge	.+82     	; 0x2d86 <security+0xcee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d34:	6d a9       	ldd	r22, Y+53	; 0x35
    2d36:	7e a9       	ldd	r23, Y+54	; 0x36
    2d38:	8f a9       	ldd	r24, Y+55	; 0x37
    2d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e2       	ldi	r20, 0x20	; 32
    2d42:	51 e4       	ldi	r21, 0x41	; 65
    2d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	bc 01       	movw	r22, r24
    2d4e:	cd 01       	movw	r24, r26
    2d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d54:	dc 01       	movw	r26, r24
    2d56:	cb 01       	movw	r24, r22
    2d58:	98 ab       	std	Y+48, r25	; 0x30
    2d5a:	8f a7       	std	Y+47, r24	; 0x2f
    2d5c:	0f c0       	rjmp	.+30     	; 0x2d7c <security+0xce4>
    2d5e:	88 ec       	ldi	r24, 0xC8	; 200
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	9e a7       	std	Y+46, r25	; 0x2e
    2d64:	8d a7       	std	Y+45, r24	; 0x2d
    2d66:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d68:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <security+0xcd2>
    2d6e:	9e a7       	std	Y+46, r25	; 0x2e
    2d70:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d72:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d74:	98 a9       	ldd	r25, Y+48	; 0x30
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	98 ab       	std	Y+48, r25	; 0x30
    2d7a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d7e:	98 a9       	ldd	r25, Y+48	; 0x30
    2d80:	00 97       	sbiw	r24, 0x00	; 0
    2d82:	69 f7       	brne	.-38     	; 0x2d5e <security+0xcc6>
    2d84:	14 c0       	rjmp	.+40     	; 0x2dae <security+0xd16>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d86:	69 a9       	ldd	r22, Y+49	; 0x31
    2d88:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2d8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d92:	dc 01       	movw	r26, r24
    2d94:	cb 01       	movw	r24, r22
    2d96:	98 ab       	std	Y+48, r25	; 0x30
    2d98:	8f a7       	std	Y+47, r24	; 0x2f
    2d9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d9e:	9c a7       	std	Y+44, r25	; 0x2c
    2da0:	8b a7       	std	Y+43, r24	; 0x2b
    2da2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2da4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2da6:	01 97       	sbiw	r24, 0x01	; 1
    2da8:	f1 f7       	brne	.-4      	; 0x2da6 <security+0xd0e>
    2daa:	9c a7       	std	Y+44, r25	; 0x2c
    2dac:	8b a7       	std	Y+43, r24	; 0x2b
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         _delay_ms(2000);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    2dae:	82 e0       	ldi	r24, 0x02	; 2
    2db0:	64 e0       	ldi	r22, 0x04	; 4
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	62 e0       	ldi	r22, 0x02	; 2
    2dbc:	41 e0       	ldi	r20, 0x01	; 1
    2dbe:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2dc2:	43 ca       	rjmp	.-2938   	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         break;
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                        }
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                       else if(Local_u8Key=='4')
    2dc4:	fe 01       	movw	r30, r28
    2dc6:	ee 56       	subi	r30, 0x6E	; 110
    2dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dca:	80 81       	ld	r24, Z
    2dcc:	84 33       	cpi	r24, 0x34	; 52
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <security+0xd3a>
    2dd0:	b8 ce       	rjmp	.-656    	; 0x2b42 <security+0xaaa>
	 	 				 	 						 	 				 				 			 	 				 	 						 	 				 				 			 	 		                       {DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_HIGH);
    2dd2:	82 e0       	ldi	r24, 0x02	; 2
    2dd4:	64 e0       	ldi	r22, 0x04	; 4
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                            DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	63 e0       	ldi	r22, 0x03	; 3
    2de0:	41 e0       	ldi	r20, 0x01	; 1
    2de2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	aa ef       	ldi	r26, 0xFA	; 250
    2dec:	b4 e4       	ldi	r27, 0x44	; 68
    2dee:	8f a3       	std	Y+39, r24	; 0x27
    2df0:	98 a7       	std	Y+40, r25	; 0x28
    2df2:	a9 a7       	std	Y+41, r26	; 0x29
    2df4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df6:	6f a1       	ldd	r22, Y+39	; 0x27
    2df8:	78 a5       	ldd	r23, Y+40	; 0x28
    2dfa:	89 a5       	ldd	r24, Y+41	; 0x29
    2dfc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	4a ef       	ldi	r20, 0xFA	; 250
    2e04:	54 e4       	ldi	r21, 0x44	; 68
    2e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0a:	dc 01       	movw	r26, r24
    2e0c:	cb 01       	movw	r24, r22
    2e0e:	8b a3       	std	Y+35, r24	; 0x23
    2e10:	9c a3       	std	Y+36, r25	; 0x24
    2e12:	ad a3       	std	Y+37, r26	; 0x25
    2e14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e16:	6b a1       	ldd	r22, Y+35	; 0x23
    2e18:	7c a1       	ldd	r23, Y+36	; 0x24
    2e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	40 e8       	ldi	r20, 0x80	; 128
    2e24:	5f e3       	ldi	r21, 0x3F	; 63
    2e26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e2a:	88 23       	and	r24, r24
    2e2c:	2c f4       	brge	.+10     	; 0x2e38 <security+0xda0>
		__ticks = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9a a3       	std	Y+34, r25	; 0x22
    2e34:	89 a3       	std	Y+33, r24	; 0x21
    2e36:	3f c0       	rjmp	.+126    	; 0x2eb6 <security+0xe1e>
	else if (__tmp > 65535)
    2e38:	6b a1       	ldd	r22, Y+35	; 0x23
    2e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	3f ef       	ldi	r19, 0xFF	; 255
    2e44:	4f e7       	ldi	r20, 0x7F	; 127
    2e46:	57 e4       	ldi	r21, 0x47	; 71
    2e48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e4c:	18 16       	cp	r1, r24
    2e4e:	4c f5       	brge	.+82     	; 0x2ea2 <security+0xe0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e50:	6f a1       	ldd	r22, Y+39	; 0x27
    2e52:	78 a5       	ldd	r23, Y+40	; 0x28
    2e54:	89 a5       	ldd	r24, Y+41	; 0x29
    2e56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e2       	ldi	r20, 0x20	; 32
    2e5e:	51 e4       	ldi	r21, 0x41	; 65
    2e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	bc 01       	movw	r22, r24
    2e6a:	cd 01       	movw	r24, r26
    2e6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e70:	dc 01       	movw	r26, r24
    2e72:	cb 01       	movw	r24, r22
    2e74:	9a a3       	std	Y+34, r25	; 0x22
    2e76:	89 a3       	std	Y+33, r24	; 0x21
    2e78:	0f c0       	rjmp	.+30     	; 0x2e98 <security+0xe00>
    2e7a:	88 ec       	ldi	r24, 0xC8	; 200
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	98 a3       	std	Y+32, r25	; 0x20
    2e80:	8f 8f       	std	Y+31, r24	; 0x1f
    2e82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e84:	98 a1       	ldd	r25, Y+32	; 0x20
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <security+0xdee>
    2e8a:	98 a3       	std	Y+32, r25	; 0x20
    2e8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e90:	9a a1       	ldd	r25, Y+34	; 0x22
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	9a a3       	std	Y+34, r25	; 0x22
    2e96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e98:	89 a1       	ldd	r24, Y+33	; 0x21
    2e9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e9c:	00 97       	sbiw	r24, 0x00	; 0
    2e9e:	69 f7       	brne	.-38     	; 0x2e7a <security+0xde2>
    2ea0:	14 c0       	rjmp	.+40     	; 0x2eca <security+0xe32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ea4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eae:	dc 01       	movw	r26, r24
    2eb0:	cb 01       	movw	r24, r22
    2eb2:	9a a3       	std	Y+34, r25	; 0x22
    2eb4:	89 a3       	std	Y+33, r24	; 0x21
    2eb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2eb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2eba:	9e 8f       	std	Y+30, r25	; 0x1e
    2ebc:	8d 8f       	std	Y+29, r24	; 0x1d
    2ebe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ec0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ec2:	01 97       	sbiw	r24, 0x01	; 1
    2ec4:	f1 f7       	brne	.-4      	; 0x2ec2 <security+0xe2a>
    2ec6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec8:	8d 8f       	std	Y+29, r24	; 0x1d
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                            _delay_ms(2000);
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                             DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_HIGH);
    2eca:	82 e0       	ldi	r24, 0x02	; 2
    2ecc:	63 e0       	ldi	r22, 0x03	; 3
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a8 e4       	ldi	r26, 0x48	; 72
    2eda:	b3 e4       	ldi	r27, 0x43	; 67
    2edc:	89 8f       	std	Y+25, r24	; 0x19
    2ede:	9a 8f       	std	Y+26, r25	; 0x1a
    2ee0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ee2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ee6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ee8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2eea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a ef       	ldi	r20, 0xFA	; 250
    2ef2:	54 e4       	ldi	r21, 0x44	; 68
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8d 8b       	std	Y+21, r24	; 0x15
    2efe:	9e 8b       	std	Y+22, r25	; 0x16
    2f00:	af 8b       	std	Y+23, r26	; 0x17
    2f02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f04:	6d 89       	ldd	r22, Y+21	; 0x15
    2f06:	7e 89       	ldd	r23, Y+22	; 0x16
    2f08:	8f 89       	ldd	r24, Y+23	; 0x17
    2f0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <security+0xe8e>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9c 8b       	std	Y+20, r25	; 0x14
    2f22:	8b 8b       	std	Y+19, r24	; 0x13
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <security+0xf0c>
	else if (__tmp > 65535)
    2f26:	6d 89       	ldd	r22, Y+21	; 0x15
    2f28:	7e 89       	ldd	r23, Y+22	; 0x16
    2f2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <security+0xef8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9c 8b       	std	Y+20, r25	; 0x14
    2f64:	8b 8b       	std	Y+19, r24	; 0x13
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <security+0xeee>
    2f68:	88 ec       	ldi	r24, 0xC8	; 200
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	9a 8b       	std	Y+18, r25	; 0x12
    2f6e:	89 8b       	std	Y+17, r24	; 0x11
    2f70:	89 89       	ldd	r24, Y+17	; 0x11
    2f72:	9a 89       	ldd	r25, Y+18	; 0x12
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <security+0xedc>
    2f78:	9a 8b       	std	Y+18, r25	; 0x12
    2f7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9c 8b       	std	Y+20, r25	; 0x14
    2f84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	8b 89       	ldd	r24, Y+19	; 0x13
    2f88:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <security+0xed0>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <security+0xf20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6d 89       	ldd	r22, Y+21	; 0x15
    2f92:	7e 89       	ldd	r23, Y+22	; 0x16
    2f94:	8f 89       	ldd	r24, Y+23	; 0x17
    2f96:	98 8d       	ldd	r25, Y+24	; 0x18
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9c 8b       	std	Y+20, r25	; 0x14
    2fa2:	8b 8b       	std	Y+19, r24	; 0x13
    2fa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2fa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa8:	98 8b       	std	Y+16, r25	; 0x10
    2faa:	8f 87       	std	Y+15, r24	; 0x0f
    2fac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fae:	98 89       	ldd	r25, Y+16	; 0x10
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <security+0xf18>
    2fb4:	98 8b       	std	Y+16, r25	; 0x10
    2fb6:	8f 87       	std	Y+15, r24	; 0x0f
	 	 				 	 						 	 				 		 				 	 						 	 				 				 			 	 				 			                             _delay_ms(200);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                         DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN4,DIO_u8_LOW);
    2fb8:	82 e0       	ldi	r24, 0x02	; 2
    2fba:	64 e0       	ldi	r22, 0x04	; 4
    2fbc:	40 e0       	ldi	r20, 0x00	; 0
    2fbe:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                          DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN2,DIO_u8_HIGH);
    2fc2:	82 e0       	ldi	r24, 0x02	; 2
    2fc4:	62 e0       	ldi	r22, 0x02	; 2
    2fc6:	41 e0       	ldi	r20, 0x01	; 1
    2fc8:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    2fcc:	80 e0       	ldi	r24, 0x00	; 0
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	aa ef       	ldi	r26, 0xFA	; 250
    2fd2:	b4 e4       	ldi	r27, 0x44	; 68
    2fd4:	8b 87       	std	Y+11, r24	; 0x0b
    2fd6:	9c 87       	std	Y+12, r25	; 0x0c
    2fd8:	ad 87       	std	Y+13, r26	; 0x0d
    2fda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	4a ef       	ldi	r20, 0xFA	; 250
    2fea:	54 e4       	ldi	r21, 0x44	; 68
    2fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	8f 83       	std	Y+7, r24	; 0x07
    2ff6:	98 87       	std	Y+8, r25	; 0x08
    2ff8:	a9 87       	std	Y+9, r26	; 0x09
    2ffa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ffc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ffe:	78 85       	ldd	r23, Y+8	; 0x08
    3000:	89 85       	ldd	r24, Y+9	; 0x09
    3002:	9a 85       	ldd	r25, Y+10	; 0x0a
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	40 e8       	ldi	r20, 0x80	; 128
    300a:	5f e3       	ldi	r21, 0x3F	; 63
    300c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3010:	88 23       	and	r24, r24
    3012:	2c f4       	brge	.+10     	; 0x301e <security+0xf86>
		__ticks = 1;
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	90 e0       	ldi	r25, 0x00	; 0
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	3f c0       	rjmp	.+126    	; 0x309c <security+0x1004>
	else if (__tmp > 65535)
    301e:	6f 81       	ldd	r22, Y+7	; 0x07
    3020:	78 85       	ldd	r23, Y+8	; 0x08
    3022:	89 85       	ldd	r24, Y+9	; 0x09
    3024:	9a 85       	ldd	r25, Y+10	; 0x0a
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	3f ef       	ldi	r19, 0xFF	; 255
    302a:	4f e7       	ldi	r20, 0x7F	; 127
    302c:	57 e4       	ldi	r21, 0x47	; 71
    302e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3032:	18 16       	cp	r1, r24
    3034:	4c f5       	brge	.+82     	; 0x3088 <security+0xff0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3036:	6b 85       	ldd	r22, Y+11	; 0x0b
    3038:	7c 85       	ldd	r23, Y+12	; 0x0c
    303a:	8d 85       	ldd	r24, Y+13	; 0x0d
    303c:	9e 85       	ldd	r25, Y+14	; 0x0e
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e2       	ldi	r20, 0x20	; 32
    3044:	51 e4       	ldi	r21, 0x41	; 65
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	bc 01       	movw	r22, r24
    3050:	cd 01       	movw	r24, r26
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9e 83       	std	Y+6, r25	; 0x06
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	0f c0       	rjmp	.+30     	; 0x307e <security+0xfe6>
    3060:	88 ec       	ldi	r24, 0xC8	; 200
    3062:	90 e0       	ldi	r25, 0x00	; 0
    3064:	9c 83       	std	Y+4, r25	; 0x04
    3066:	8b 83       	std	Y+3, r24	; 0x03
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
    306a:	9c 81       	ldd	r25, Y+4	; 0x04
    306c:	01 97       	sbiw	r24, 0x01	; 1
    306e:	f1 f7       	brne	.-4      	; 0x306c <security+0xfd4>
    3070:	9c 83       	std	Y+4, r25	; 0x04
    3072:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	9e 83       	std	Y+6, r25	; 0x06
    307c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307e:	8d 81       	ldd	r24, Y+5	; 0x05
    3080:	9e 81       	ldd	r25, Y+6	; 0x06
    3082:	00 97       	sbiw	r24, 0x00	; 0
    3084:	69 f7       	brne	.-38     	; 0x3060 <security+0xfc8>
    3086:	14 c0       	rjmp	.+40     	; 0x30b0 <security+0x1018>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3088:	6f 81       	ldd	r22, Y+7	; 0x07
    308a:	78 85       	ldd	r23, Y+8	; 0x08
    308c:	89 85       	ldd	r24, Y+9	; 0x09
    308e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	9e 83       	std	Y+6, r25	; 0x06
    309a:	8d 83       	std	Y+5, r24	; 0x05
    309c:	8d 81       	ldd	r24, Y+5	; 0x05
    309e:	9e 81       	ldd	r25, Y+6	; 0x06
    30a0:	9a 83       	std	Y+2, r25	; 0x02
    30a2:	89 83       	std	Y+1, r24	; 0x01
    30a4:	89 81       	ldd	r24, Y+1	; 0x01
    30a6:	9a 81       	ldd	r25, Y+2	; 0x02
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	f1 f7       	brne	.-4      	; 0x30a8 <security+0x1010>
    30ac:	9a 83       	std	Y+2, r25	; 0x02
    30ae:	89 83       	std	Y+1, r24	; 0x01
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                          _delay_ms(2000);
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN5,DIO_u8_HIGH);
    30b0:	82 e0       	ldi	r24, 0x02	; 2
    30b2:	65 e0       	ldi	r22, 0x05	; 5
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
	 	 				 	 						 	 				 		 	 				 	 						 	 				 				 			 	 				 			                     DIO_u8SetpinValue(DIO_u8_PORTC,DIO_u8_PIN3,DIO_u8_LOW);
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	63 e0       	ldi	r22, 0x03	; 3
    30be:	40 e0       	ldi	r20, 0x00	; 0
    30c0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <DIO_u8SetpinValue>
    30c4:	c2 c8       	rjmp	.-3708   	; 0x224a <security+0x1b2>
	 	 				 	 						 	 				 		 }
	 	 		}

	 		}}}
	 else
		 	 {      LCD_voidInit();
    30c6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <LCD_voidInit>
		 		 		         LCD_sendString("incorrect password");
    30ca:	82 ea       	ldi	r24, 0xA2	; 162
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	0e 94 23 10 	call	0x2046	; 0x2046 <LCD_sendString>
		 		 		 		 break;}}
}
    30d2:	c9 56       	subi	r28, 0x69	; 105
    30d4:	df 4f       	sbci	r29, 0xFF	; 255
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	cf 91       	pop	r28
    30e2:	df 91       	pop	r29
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	08 95       	ret

000030ea <main>:

int main()
{
    30ea:	df 93       	push	r29
    30ec:	cf 93       	push	r28
    30ee:	cd b7       	in	r28, 0x3d	; 61
    30f0:	de b7       	in	r29, 0x3e	; 62


	GI_voidenable();
    30f2:	0e 94 be 09 	call	0x137c	; 0x137c <GI_voidenable>
	DIO_u8SetPinDirection(DIO_u8_PORTD,DIO_u8_PIN2,DIO_u8_INPUT);
    30f6:	83 e0       	ldi	r24, 0x03	; 3
    30f8:	62 e0       	ldi	r22, 0x02	; 2
    30fa:	40 e0       	ldi	r20, 0x00	; 0
    30fc:	0e 94 b8 18 	call	0x3170	; 0x3170 <DIO_u8SetPinDirection>
	EXTI_u8EXTIEnable(EXTI_u8_INT0,EXTI_u8_RAISING_EDGE);
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	60 e0       	ldi	r22, 0x00	; 0
    3104:	0e 94 69 07 	call	0xed2	; 0xed2 <EXTI_u8EXTIEnable>
	SET_BIT(SREG,7);
    3108:	af e5       	ldi	r26, 0x5F	; 95
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	ef e5       	ldi	r30, 0x5F	; 95
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	80 68       	ori	r24, 0x80	; 128
    3114:	8c 93       	st	X, r24
    EXTI_u8EXTISetCallBack(EXTI_u8_INT0,&security);
    3116:	2c e4       	ldi	r18, 0x4C	; 76
    3118:	30 e1       	ldi	r19, 0x10	; 16
    311a:	80 e0       	ldi	r24, 0x00	; 0
    311c:	b9 01       	movw	r22, r18
    311e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <EXTI_u8EXTISetCallBack>
    3122:	ff cf       	rjmp	.-2      	; 0x3122 <main+0x38>

00003124 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_privat.h"
#include "DIO_config.h"

void DIO_voidInit (void)
{
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
DIO_u8_DDRA_REG=  conc(DIO_u8_PA7_INTIAL_DIRECTION,DIO_u8_PA6_INTIAL_DIRECTION,DIO_u8_PA5_INTIAL_DIRECTION,DIO_u8_PA4_INTIAL_DIRECTION,
    312c:	ea e3       	ldi	r30, 0x3A	; 58
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	8f e0       	ldi	r24, 0x0F	; 15
    3132:	80 83       	st	Z, r24
                     DIO_u8_PA3_INTIAL_DIRECTION,DIO_u8_PA2_INTIAL_DIRECTION,DIO_u8_PA1_INTIAL_DIRECTION,DIO_u8_PA0_INTIAL_DIRECTION);

DIO_u8_DDRD_REG= conc(DIO_u8_PD7_INTIAL_DIRECTION,DIO_u8_PD6_INTIAL_DIRECTION,DIO_u8_PD5_INTIAL_DIRECTION,DIO_u8_PD4_INTIAL_DIRECTION,
    3134:	e1 e3       	ldi	r30, 0x31	; 49
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	8b ef       	ldi	r24, 0xFB	; 251
    313a:	80 83       	st	Z, r24
                     DIO_u8_PD3_INTIAL_DIRECTION,DIO_u8_PD2_INTIAL_DIRECTION,DIO_u8_PD1_INTIAL_DIRECTION,DIO_u8_PD0_INTIAL_DIRECTION);

DIO_u8_DDRC_REG=conc(DIO_u8_PC7_INTIAL_DIRECTION,DIO_u8_PC6_INTIAL_DIRECTION,DIO_u8_PC5_INTIAL_DIRECTION,DIO_u8_PC4_INTIAL_DIRECTION,
    313c:	e4 e3       	ldi	r30, 0x34	; 52
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	8f e3       	ldi	r24, 0x3F	; 63
    3142:	80 83       	st	Z, r24
                     DIO_u8_PC3_INTIAL_DIRECTION,DIO_u8_PC2_INTIAL_DIRECTION,DIO_u8_PC1_INTIAL_DIRECTION,DIO_u8_PC0_INTIAL_DIRECTION);

DIO_u8_DDRB_REG=conc(DIO_u8_PB7_INTIAL_DIRECTION,DIO_u8_PB6_INTIAL_DIRECTION,DIO_u8_PB5_INTIAL_DIRECTION,DIO_u8_PB4_INTIAL_DIRECTION,
    3144:	e7 e3       	ldi	r30, 0x37	; 55
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	8f ef       	ldi	r24, 0xFF	; 255
    314a:	80 83       	st	Z, r24
                     DIO_u8_PB3_INTIAL_DIRECTION,DIO_u8_PB2_INTIAL_DIRECTION,DIO_u8_PB1_INTIAL_DIRECTION,DIO_u8_PB0_INTIAL_DIRECTION);


DIO_u8_PORTA_REG=conc(DIO_u8_PA7_INTIAL_VALUE,DIO_u8_PA6_INTIAL_VALUE,DIO_u8_PA5_INTIAL_VALUE,DIO_u8_PA4_INTIAL_VALUE,
    314c:	eb e3       	ldi	r30, 0x3B	; 59
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	8f ef       	ldi	r24, 0xFF	; 255
    3152:	80 83       	st	Z, r24
                     DIO_u8_PA3_INTIAL_VALUE,DIO_u8_PA2_INTIAL_VALUE,DIO_u8_PA1_INTIAL_VALUE,DIO_u8_PA0_INTIAL_VALUE);

DIO_u8_PORTD_REG=conc(DIO_u8_PD7_INTIAL_VALUE,DIO_u8_PD6_INTIAL_VALUE,DIO_u8_PD5_INTIAL_VALUE,DIO_u8_PD4_INTIAL_VALUE,
    3154:	e2 e3       	ldi	r30, 0x32	; 50
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	84 e0       	ldi	r24, 0x04	; 4
    315a:	80 83       	st	Z, r24
                     DIO_u8_PD3_INTIAL_VALUE,DIO_u8_PD2_INTIAL_VALUE,DIO_u8_PD1_INTIAL_VALUE,DIO_u8_PD0_INTIAL_VALUE);

DIO_u8_PORTC_REG= conc( DIO_u8_PC7_INTIAL_VALUE,DIO_u8_PC6_INTIAL_VALUE,DIO_u8_PC5_INTIAL_VALUE,DIO_u8_PC4_INTIAL_VALUE,
    315c:	e5 e3       	ldi	r30, 0x35	; 53
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 ec       	ldi	r24, 0xC0	; 192
    3162:	80 83       	st	Z, r24
                     DIO_u8_PC3_INTIAL_VALUE,DIO_u8_PC2_INTIAL_VALUE,DIO_u8_PC1_INTIAL_VALUE,DIO_u8_PC0_INTIAL_VALUE);

DIO_u8_PORTB_REG= conc( DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE,DIO_u8_PB4_INTIAL_VALUE,
    3164:	e8 e3       	ldi	r30, 0x38	; 56
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	10 82       	st	Z, r1
                     DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE,DIO_u8_PB0_INTIAL_VALUE);
}
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <DIO_u8SetPinDirection>:
u8 DIO_u8SetPinDirection        (u8 copy_u8portID,u8 copy_u8pinID,u8 copy_u8pinDirection){
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	cd b7       	in	r28, 0x3d	; 61
    3176:	de b7       	in	r29, 0x3e	; 62
    3178:	2e 97       	sbiw	r28, 0x0e	; 14
    317a:	0f b6       	in	r0, 0x3f	; 63
    317c:	f8 94       	cli
    317e:	de bf       	out	0x3e, r29	; 62
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	cd bf       	out	0x3d, r28	; 61
    3184:	8a 83       	std	Y+2, r24	; 0x02
    3186:	6b 83       	std	Y+3, r22	; 0x03
    3188:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState=STD_TYBES_OK ;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	89 83       	std	Y+1, r24	; 0x01
	if ((copy_u8portID<=DIO_u8_PORTD )&&(copy_u8pinID <=DIO_u8_PIN7 )&&((copy_u8pinDirection>=DIO_u8_OUTPUT)||(copy_u8pinDirection<=DIO_u8_INPUT)))
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	84 30       	cpi	r24, 0x04	; 4
    3192:	08 f0       	brcs	.+2      	; 0x3196 <DIO_u8SetPinDirection+0x26>
    3194:	0c c1       	rjmp	.+536    	; 0x33ae <DIO_u8SetPinDirection+0x23e>
    3196:	8b 81       	ldd	r24, Y+3	; 0x03
    3198:	88 30       	cpi	r24, 0x08	; 8
    319a:	08 f0       	brcs	.+2      	; 0x319e <DIO_u8SetPinDirection+0x2e>
    319c:	08 c1       	rjmp	.+528    	; 0x33ae <DIO_u8SetPinDirection+0x23e>
    319e:	8c 81       	ldd	r24, Y+4	; 0x04
    31a0:	88 23       	and	r24, r24
    31a2:	21 f4       	brne	.+8      	; 0x31ac <DIO_u8SetPinDirection+0x3c>
    31a4:	8c 81       	ldd	r24, Y+4	; 0x04
    31a6:	88 23       	and	r24, r24
    31a8:	09 f0       	breq	.+2      	; 0x31ac <DIO_u8SetPinDirection+0x3c>
    31aa:	01 c1       	rjmp	.+514    	; 0x33ae <DIO_u8SetPinDirection+0x23e>
    {


		switch(copy_u8portID)
    31ac:	8a 81       	ldd	r24, Y+2	; 0x02
    31ae:	28 2f       	mov	r18, r24
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	3e 87       	std	Y+14, r19	; 0x0e
    31b4:	2d 87       	std	Y+13, r18	; 0x0d
    31b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ba:	81 30       	cpi	r24, 0x01	; 1
    31bc:	91 05       	cpc	r25, r1
    31be:	09 f4       	brne	.+2      	; 0x31c2 <DIO_u8SetPinDirection+0x52>
    31c0:	4f c0       	rjmp	.+158    	; 0x3260 <DIO_u8SetPinDirection+0xf0>
    31c2:	2d 85       	ldd	r18, Y+13	; 0x0d
    31c4:	3e 85       	ldd	r19, Y+14	; 0x0e
    31c6:	22 30       	cpi	r18, 0x02	; 2
    31c8:	31 05       	cpc	r19, r1
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <DIO_u8SetPinDirection+0x66>
    31cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	71 f0       	breq	.+28     	; 0x31f0 <DIO_u8SetPinDirection+0x80>
    31d4:	ed c0       	rjmp	.+474    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
    31d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    31d8:	3e 85       	ldd	r19, Y+14	; 0x0e
    31da:	22 30       	cpi	r18, 0x02	; 2
    31dc:	31 05       	cpc	r19, r1
    31de:	09 f4       	brne	.+2      	; 0x31e2 <DIO_u8SetPinDirection+0x72>
    31e0:	77 c0       	rjmp	.+238    	; 0x32d0 <DIO_u8SetPinDirection+0x160>
    31e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e6:	83 30       	cpi	r24, 0x03	; 3
    31e8:	91 05       	cpc	r25, r1
    31ea:	09 f4       	brne	.+2      	; 0x31ee <DIO_u8SetPinDirection+0x7e>
    31ec:	a9 c0       	rjmp	.+338    	; 0x3340 <DIO_u8SetPinDirection+0x1d0>
    31ee:	e0 c0       	rjmp	.+448    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(copy_u8pinDirection)
    31f0:	8c 81       	ldd	r24, Y+4	; 0x04
    31f2:	28 2f       	mov	r18, r24
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	3c 87       	std	Y+12, r19	; 0x0c
    31f8:	2b 87       	std	Y+11, r18	; 0x0b
    31fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    31fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	d1 f0       	breq	.+52     	; 0x3236 <DIO_u8SetPinDirection+0xc6>
    3202:	2b 85       	ldd	r18, Y+11	; 0x0b
    3204:	3c 85       	ldd	r19, Y+12	; 0x0c
    3206:	21 30       	cpi	r18, 0x01	; 1
    3208:	31 05       	cpc	r19, r1
    320a:	09 f0       	breq	.+2      	; 0x320e <DIO_u8SetPinDirection+0x9e>
    320c:	d1 c0       	rjmp	.+418    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,copy_u8pinID); break;
    320e:	aa e3       	ldi	r26, 0x3A	; 58
    3210:	b0 e0       	ldi	r27, 0x00	; 0
    3212:	ea e3       	ldi	r30, 0x3A	; 58
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	48 2f       	mov	r20, r24
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	28 2f       	mov	r18, r24
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	81 e0       	ldi	r24, 0x01	; 1
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	02 2e       	mov	r0, r18
    3226:	02 c0       	rjmp	.+4      	; 0x322c <DIO_u8SetPinDirection+0xbc>
    3228:	88 0f       	add	r24, r24
    322a:	99 1f       	adc	r25, r25
    322c:	0a 94       	dec	r0
    322e:	e2 f7       	brpl	.-8      	; 0x3228 <DIO_u8SetPinDirection+0xb8>
    3230:	84 2b       	or	r24, r20
    3232:	8c 93       	st	X, r24
    3234:	bd c0       	rjmp	.+378    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,copy_u8pinID); break;
    3236:	aa e3       	ldi	r26, 0x3A	; 58
    3238:	b0 e0       	ldi	r27, 0x00	; 0
    323a:	ea e3       	ldi	r30, 0x3A	; 58
    323c:	f0 e0       	ldi	r31, 0x00	; 0
    323e:	80 81       	ld	r24, Z
    3240:	48 2f       	mov	r20, r24
    3242:	8b 81       	ldd	r24, Y+3	; 0x03
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	81 e0       	ldi	r24, 0x01	; 1
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	02 2e       	mov	r0, r18
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <DIO_u8SetPinDirection+0xe4>
    3250:	88 0f       	add	r24, r24
    3252:	99 1f       	adc	r25, r25
    3254:	0a 94       	dec	r0
    3256:	e2 f7       	brpl	.-8      	; 0x3250 <DIO_u8SetPinDirection+0xe0>
    3258:	80 95       	com	r24
    325a:	84 23       	and	r24, r20
    325c:	8c 93       	st	X, r24
    325e:	a8 c0       	rjmp	.+336    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTB:
			switch(copy_u8pinDirection)
    3260:	8c 81       	ldd	r24, Y+4	; 0x04
    3262:	28 2f       	mov	r18, r24
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	3a 87       	std	Y+10, r19	; 0x0a
    3268:	29 87       	std	Y+9, r18	; 0x09
    326a:	89 85       	ldd	r24, Y+9	; 0x09
    326c:	9a 85       	ldd	r25, Y+10	; 0x0a
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	d1 f0       	breq	.+52     	; 0x32a6 <DIO_u8SetPinDirection+0x136>
    3272:	29 85       	ldd	r18, Y+9	; 0x09
    3274:	3a 85       	ldd	r19, Y+10	; 0x0a
    3276:	21 30       	cpi	r18, 0x01	; 1
    3278:	31 05       	cpc	r19, r1
    327a:	09 f0       	breq	.+2      	; 0x327e <DIO_u8SetPinDirection+0x10e>
    327c:	99 c0       	rjmp	.+306    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,copy_u8pinID); break;
    327e:	a7 e3       	ldi	r26, 0x37	; 55
    3280:	b0 e0       	ldi	r27, 0x00	; 0
    3282:	e7 e3       	ldi	r30, 0x37	; 55
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 81       	ld	r24, Z
    3288:	48 2f       	mov	r20, r24
    328a:	8b 81       	ldd	r24, Y+3	; 0x03
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	02 2e       	mov	r0, r18
    3296:	02 c0       	rjmp	.+4      	; 0x329c <DIO_u8SetPinDirection+0x12c>
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	0a 94       	dec	r0
    329e:	e2 f7       	brpl	.-8      	; 0x3298 <DIO_u8SetPinDirection+0x128>
    32a0:	84 2b       	or	r24, r20
    32a2:	8c 93       	st	X, r24
    32a4:	85 c0       	rjmp	.+266    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,copy_u8pinID); break;
    32a6:	a7 e3       	ldi	r26, 0x37	; 55
    32a8:	b0 e0       	ldi	r27, 0x00	; 0
    32aa:	e7 e3       	ldi	r30, 0x37	; 55
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	80 81       	ld	r24, Z
    32b0:	48 2f       	mov	r20, r24
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	28 2f       	mov	r18, r24
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	02 2e       	mov	r0, r18
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <DIO_u8SetPinDirection+0x154>
    32c0:	88 0f       	add	r24, r24
    32c2:	99 1f       	adc	r25, r25
    32c4:	0a 94       	dec	r0
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <DIO_u8SetPinDirection+0x150>
    32c8:	80 95       	com	r24
    32ca:	84 23       	and	r24, r20
    32cc:	8c 93       	st	X, r24
    32ce:	70 c0       	rjmp	.+224    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTC:
			switch(copy_u8pinDirection)
    32d0:	8c 81       	ldd	r24, Y+4	; 0x04
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	38 87       	std	Y+8, r19	; 0x08
    32d8:	2f 83       	std	Y+7, r18	; 0x07
    32da:	8f 81       	ldd	r24, Y+7	; 0x07
    32dc:	98 85       	ldd	r25, Y+8	; 0x08
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	d1 f0       	breq	.+52     	; 0x3316 <DIO_u8SetPinDirection+0x1a6>
    32e2:	2f 81       	ldd	r18, Y+7	; 0x07
    32e4:	38 85       	ldd	r19, Y+8	; 0x08
    32e6:	21 30       	cpi	r18, 0x01	; 1
    32e8:	31 05       	cpc	r19, r1
    32ea:	09 f0       	breq	.+2      	; 0x32ee <DIO_u8SetPinDirection+0x17e>
    32ec:	61 c0       	rjmp	.+194    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,copy_u8pinID); break;
    32ee:	a4 e3       	ldi	r26, 0x34	; 52
    32f0:	b0 e0       	ldi	r27, 0x00	; 0
    32f2:	e4 e3       	ldi	r30, 0x34	; 52
    32f4:	f0 e0       	ldi	r31, 0x00	; 0
    32f6:	80 81       	ld	r24, Z
    32f8:	48 2f       	mov	r20, r24
    32fa:	8b 81       	ldd	r24, Y+3	; 0x03
    32fc:	28 2f       	mov	r18, r24
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	81 e0       	ldi	r24, 0x01	; 1
    3302:	90 e0       	ldi	r25, 0x00	; 0
    3304:	02 2e       	mov	r0, r18
    3306:	02 c0       	rjmp	.+4      	; 0x330c <DIO_u8SetPinDirection+0x19c>
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	0a 94       	dec	r0
    330e:	e2 f7       	brpl	.-8      	; 0x3308 <DIO_u8SetPinDirection+0x198>
    3310:	84 2b       	or	r24, r20
    3312:	8c 93       	st	X, r24
    3314:	4d c0       	rjmp	.+154    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,copy_u8pinID); break;
    3316:	a4 e3       	ldi	r26, 0x34	; 52
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	e4 e3       	ldi	r30, 0x34	; 52
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	48 2f       	mov	r20, r24
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	28 2f       	mov	r18, r24
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	02 2e       	mov	r0, r18
    332e:	02 c0       	rjmp	.+4      	; 0x3334 <DIO_u8SetPinDirection+0x1c4>
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	0a 94       	dec	r0
    3336:	e2 f7       	brpl	.-8      	; 0x3330 <DIO_u8SetPinDirection+0x1c0>
    3338:	80 95       	com	r24
    333a:	84 23       	and	r24, r20
    333c:	8c 93       	st	X, r24
    333e:	38 c0       	rjmp	.+112    	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			}break;
			case DIO_u8_PORTD:
			switch(copy_u8pinDirection)
    3340:	8c 81       	ldd	r24, Y+4	; 0x04
    3342:	28 2f       	mov	r18, r24
    3344:	30 e0       	ldi	r19, 0x00	; 0
    3346:	3e 83       	std	Y+6, r19	; 0x06
    3348:	2d 83       	std	Y+5, r18	; 0x05
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	c9 f0       	breq	.+50     	; 0x3384 <DIO_u8SetPinDirection+0x214>
    3352:	2d 81       	ldd	r18, Y+5	; 0x05
    3354:	3e 81       	ldd	r19, Y+6	; 0x06
    3356:	21 30       	cpi	r18, 0x01	; 1
    3358:	31 05       	cpc	r19, r1
    335a:	51 f5       	brne	.+84     	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,copy_u8pinID); break;
    335c:	a1 e3       	ldi	r26, 0x31	; 49
    335e:	b0 e0       	ldi	r27, 0x00	; 0
    3360:	e1 e3       	ldi	r30, 0x31	; 49
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	80 81       	ld	r24, Z
    3366:	48 2f       	mov	r20, r24
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	28 2f       	mov	r18, r24
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	02 2e       	mov	r0, r18
    3374:	02 c0       	rjmp	.+4      	; 0x337a <DIO_u8SetPinDirection+0x20a>
    3376:	88 0f       	add	r24, r24
    3378:	99 1f       	adc	r25, r25
    337a:	0a 94       	dec	r0
    337c:	e2 f7       	brpl	.-8      	; 0x3376 <DIO_u8SetPinDirection+0x206>
    337e:	84 2b       	or	r24, r20
    3380:	8c 93       	st	X, r24
    3382:	16 c0       	rjmp	.+44     	; 0x33b0 <DIO_u8SetPinDirection+0x240>
			case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,copy_u8pinID); break;
    3384:	a1 e3       	ldi	r26, 0x31	; 49
    3386:	b0 e0       	ldi	r27, 0x00	; 0
    3388:	e1 e3       	ldi	r30, 0x31	; 49
    338a:	f0 e0       	ldi	r31, 0x00	; 0
    338c:	80 81       	ld	r24, Z
    338e:	48 2f       	mov	r20, r24
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	02 2e       	mov	r0, r18
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <DIO_u8SetPinDirection+0x232>
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	0a 94       	dec	r0
    33a4:	e2 f7       	brpl	.-8      	; 0x339e <DIO_u8SetPinDirection+0x22e>
    33a6:	80 95       	com	r24
    33a8:	84 23       	and	r24, r20
    33aa:	8c 93       	st	X, r24
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <DIO_u8SetPinDirection+0x240>
		}
		break;
	}
	}
	else{Local_u8ErrorState=STD_TYBES_NOK;}
    33ae:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;}
    33b0:	89 81       	ldd	r24, Y+1	; 0x01
    33b2:	2e 96       	adiw	r28, 0x0e	; 14
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <DIO_u8SetpinValue>:

u8 DIO_u8SetpinValue             (u8 copy_u8portID,u8 copy_u8pinID,u8 copy_u8pinValue)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	2e 97       	sbiw	r28, 0x0e	; 14
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	8a 83       	std	Y+2, r24	; 0x02
    33da:	6b 83       	std	Y+3, r22	; 0x03
    33dc:	4c 83       	std	Y+4, r20	; 0x04
    u8 Local_u8ErrorState =STD_TYBES_OK;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	89 83       	std	Y+1, r24	; 0x01
    if(copy_u8pinID <=DIO_u8_PIN7 ){
    33e2:	8b 81       	ldd	r24, Y+3	; 0x03
    33e4:	88 30       	cpi	r24, 0x08	; 8
    33e6:	08 f0       	brcs	.+2      	; 0x33ea <DIO_u8SetpinValue+0x26>
    33e8:	08 c1       	rjmp	.+528    	; 0x35fa <DIO_u8SetpinValue+0x236>
    switch (copy_u8portID)
    33ea:	8a 81       	ldd	r24, Y+2	; 0x02
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	3e 87       	std	Y+14, r19	; 0x0e
    33f2:	2d 87       	std	Y+13, r18	; 0x0d
    33f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f8:	81 30       	cpi	r24, 0x01	; 1
    33fa:	91 05       	cpc	r25, r1
    33fc:	09 f4       	brne	.+2      	; 0x3400 <DIO_u8SetpinValue+0x3c>
    33fe:	50 c0       	rjmp	.+160    	; 0x34a0 <DIO_u8SetpinValue+0xdc>
    3400:	2d 85       	ldd	r18, Y+13	; 0x0d
    3402:	3e 85       	ldd	r19, Y+14	; 0x0e
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	2c f4       	brge	.+10     	; 0x3414 <DIO_u8SetpinValue+0x50>
    340a:	8d 85       	ldd	r24, Y+13	; 0x0d
    340c:	9e 85       	ldd	r25, Y+14	; 0x0e
    340e:	00 97       	sbiw	r24, 0x00	; 0
    3410:	71 f0       	breq	.+28     	; 0x342e <DIO_u8SetpinValue+0x6a>
    3412:	f1 c0       	rjmp	.+482    	; 0x35f6 <DIO_u8SetpinValue+0x232>
    3414:	2d 85       	ldd	r18, Y+13	; 0x0d
    3416:	3e 85       	ldd	r19, Y+14	; 0x0e
    3418:	22 30       	cpi	r18, 0x02	; 2
    341a:	31 05       	cpc	r19, r1
    341c:	09 f4       	brne	.+2      	; 0x3420 <DIO_u8SetpinValue+0x5c>
    341e:	79 c0       	rjmp	.+242    	; 0x3512 <DIO_u8SetpinValue+0x14e>
    3420:	8d 85       	ldd	r24, Y+13	; 0x0d
    3422:	9e 85       	ldd	r25, Y+14	; 0x0e
    3424:	83 30       	cpi	r24, 0x03	; 3
    3426:	91 05       	cpc	r25, r1
    3428:	09 f4       	brne	.+2      	; 0x342c <DIO_u8SetpinValue+0x68>
    342a:	ac c0       	rjmp	.+344    	; 0x3584 <DIO_u8SetpinValue+0x1c0>
    342c:	e4 c0       	rjmp	.+456    	; 0x35f6 <DIO_u8SetpinValue+0x232>
    {
    case DIO_u8_PORTA:
        switch(copy_u8pinValue)
    342e:	8c 81       	ldd	r24, Y+4	; 0x04
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	3c 87       	std	Y+12, r19	; 0x0c
    3436:	2b 87       	std	Y+11, r18	; 0x0b
    3438:	8b 85       	ldd	r24, Y+11	; 0x0b
    343a:	9c 85       	ldd	r25, Y+12	; 0x0c
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	c9 f0       	breq	.+50     	; 0x3472 <DIO_u8SetpinValue+0xae>
    3440:	2b 85       	ldd	r18, Y+11	; 0x0b
    3442:	3c 85       	ldd	r19, Y+12	; 0x0c
    3444:	21 30       	cpi	r18, 0x01	; 1
    3446:	31 05       	cpc	r19, r1
    3448:	49 f5       	brne	.+82     	; 0x349c <DIO_u8SetpinValue+0xd8>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,copy_u8pinID);break;
    344a:	ab e3       	ldi	r26, 0x3B	; 59
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	eb e3       	ldi	r30, 0x3B	; 59
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	48 2f       	mov	r20, r24
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	28 2f       	mov	r18, r24
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	02 2e       	mov	r0, r18
    3462:	02 c0       	rjmp	.+4      	; 0x3468 <DIO_u8SetpinValue+0xa4>
    3464:	88 0f       	add	r24, r24
    3466:	99 1f       	adc	r25, r25
    3468:	0a 94       	dec	r0
    346a:	e2 f7       	brpl	.-8      	; 0x3464 <DIO_u8SetpinValue+0xa0>
    346c:	84 2b       	or	r24, r20
    346e:	8c 93       	st	X, r24
    3470:	c5 c0       	rjmp	.+394    	; 0x35fc <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTA_REG,copy_u8pinID);break;
    3472:	ab e3       	ldi	r26, 0x3B	; 59
    3474:	b0 e0       	ldi	r27, 0x00	; 0
    3476:	eb e3       	ldi	r30, 0x3B	; 59
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	80 81       	ld	r24, Z
    347c:	48 2f       	mov	r20, r24
    347e:	8b 81       	ldd	r24, Y+3	; 0x03
    3480:	28 2f       	mov	r18, r24
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	90 e0       	ldi	r25, 0x00	; 0
    3488:	02 2e       	mov	r0, r18
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <DIO_u8SetpinValue+0xcc>
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	0a 94       	dec	r0
    3492:	e2 f7       	brpl	.-8      	; 0x348c <DIO_u8SetpinValue+0xc8>
    3494:	80 95       	com	r24
    3496:	84 23       	and	r24, r20
    3498:	8c 93       	st	X, r24
    349a:	b0 c0       	rjmp	.+352    	; 0x35fc <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    349c:	19 82       	std	Y+1, r1	; 0x01
    349e:	ae c0       	rjmp	.+348    	; 0x35fc <DIO_u8SetpinValue+0x238>
        }
        break;
        case DIO_u8_PORTB:
        switch(copy_u8pinValue)
    34a0:	8c 81       	ldd	r24, Y+4	; 0x04
    34a2:	28 2f       	mov	r18, r24
    34a4:	30 e0       	ldi	r19, 0x00	; 0
    34a6:	3a 87       	std	Y+10, r19	; 0x0a
    34a8:	29 87       	std	Y+9, r18	; 0x09
    34aa:	89 85       	ldd	r24, Y+9	; 0x09
    34ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ae:	00 97       	sbiw	r24, 0x00	; 0
    34b0:	c9 f0       	breq	.+50     	; 0x34e4 <DIO_u8SetpinValue+0x120>
    34b2:	29 85       	ldd	r18, Y+9	; 0x09
    34b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    34b6:	21 30       	cpi	r18, 0x01	; 1
    34b8:	31 05       	cpc	r19, r1
    34ba:	49 f5       	brne	.+82     	; 0x350e <DIO_u8SetpinValue+0x14a>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,copy_u8pinID);break;
    34bc:	a8 e3       	ldi	r26, 0x38	; 56
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e8 e3       	ldi	r30, 0x38	; 56
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	48 2f       	mov	r20, r24
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	28 2f       	mov	r18, r24
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	81 e0       	ldi	r24, 0x01	; 1
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	02 2e       	mov	r0, r18
    34d4:	02 c0       	rjmp	.+4      	; 0x34da <DIO_u8SetpinValue+0x116>
    34d6:	88 0f       	add	r24, r24
    34d8:	99 1f       	adc	r25, r25
    34da:	0a 94       	dec	r0
    34dc:	e2 f7       	brpl	.-8      	; 0x34d6 <DIO_u8SetpinValue+0x112>
    34de:	84 2b       	or	r24, r20
    34e0:	8c 93       	st	X, r24
    34e2:	8c c0       	rjmp	.+280    	; 0x35fc <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTB_REG,copy_u8pinID);break;
    34e4:	a8 e3       	ldi	r26, 0x38	; 56
    34e6:	b0 e0       	ldi	r27, 0x00	; 0
    34e8:	e8 e3       	ldi	r30, 0x38	; 56
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	48 2f       	mov	r20, r24
    34f0:	8b 81       	ldd	r24, Y+3	; 0x03
    34f2:	28 2f       	mov	r18, r24
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	02 2e       	mov	r0, r18
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <DIO_u8SetpinValue+0x13e>
    34fe:	88 0f       	add	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	0a 94       	dec	r0
    3504:	e2 f7       	brpl	.-8      	; 0x34fe <DIO_u8SetpinValue+0x13a>
    3506:	80 95       	com	r24
    3508:	84 23       	and	r24, r20
    350a:	8c 93       	st	X, r24
    350c:	77 c0       	rjmp	.+238    	; 0x35fc <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    350e:	19 82       	std	Y+1, r1	; 0x01
    3510:	75 c0       	rjmp	.+234    	; 0x35fc <DIO_u8SetpinValue+0x238>
        }break;
        case DIO_u8_PORTC:
        switch(copy_u8pinValue)
    3512:	8c 81       	ldd	r24, Y+4	; 0x04
    3514:	28 2f       	mov	r18, r24
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	38 87       	std	Y+8, r19	; 0x08
    351a:	2f 83       	std	Y+7, r18	; 0x07
    351c:	8f 81       	ldd	r24, Y+7	; 0x07
    351e:	98 85       	ldd	r25, Y+8	; 0x08
    3520:	00 97       	sbiw	r24, 0x00	; 0
    3522:	c9 f0       	breq	.+50     	; 0x3556 <DIO_u8SetpinValue+0x192>
    3524:	2f 81       	ldd	r18, Y+7	; 0x07
    3526:	38 85       	ldd	r19, Y+8	; 0x08
    3528:	21 30       	cpi	r18, 0x01	; 1
    352a:	31 05       	cpc	r19, r1
    352c:	49 f5       	brne	.+82     	; 0x3580 <DIO_u8SetpinValue+0x1bc>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,copy_u8pinID);break;
    352e:	a5 e3       	ldi	r26, 0x35	; 53
    3530:	b0 e0       	ldi	r27, 0x00	; 0
    3532:	e5 e3       	ldi	r30, 0x35	; 53
    3534:	f0 e0       	ldi	r31, 0x00	; 0
    3536:	80 81       	ld	r24, Z
    3538:	48 2f       	mov	r20, r24
    353a:	8b 81       	ldd	r24, Y+3	; 0x03
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	02 2e       	mov	r0, r18
    3546:	02 c0       	rjmp	.+4      	; 0x354c <DIO_u8SetpinValue+0x188>
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	0a 94       	dec	r0
    354e:	e2 f7       	brpl	.-8      	; 0x3548 <DIO_u8SetpinValue+0x184>
    3550:	84 2b       	or	r24, r20
    3552:	8c 93       	st	X, r24
    3554:	53 c0       	rjmp	.+166    	; 0x35fc <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTC_REG,copy_u8pinID);break;
    3556:	a5 e3       	ldi	r26, 0x35	; 53
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	e5 e3       	ldi	r30, 0x35	; 53
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	48 2f       	mov	r20, r24
    3562:	8b 81       	ldd	r24, Y+3	; 0x03
    3564:	28 2f       	mov	r18, r24
    3566:	30 e0       	ldi	r19, 0x00	; 0
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	02 2e       	mov	r0, r18
    356e:	02 c0       	rjmp	.+4      	; 0x3574 <DIO_u8SetpinValue+0x1b0>
    3570:	88 0f       	add	r24, r24
    3572:	99 1f       	adc	r25, r25
    3574:	0a 94       	dec	r0
    3576:	e2 f7       	brpl	.-8      	; 0x3570 <DIO_u8SetpinValue+0x1ac>
    3578:	80 95       	com	r24
    357a:	84 23       	and	r24, r20
    357c:	8c 93       	st	X, r24
    357e:	3e c0       	rjmp	.+124    	; 0x35fc <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    3580:	19 82       	std	Y+1, r1	; 0x01
    3582:	3c c0       	rjmp	.+120    	; 0x35fc <DIO_u8SetpinValue+0x238>
        }break;
        case DIO_u8_PORTD:
        switch(copy_u8pinValue)
    3584:	8c 81       	ldd	r24, Y+4	; 0x04
    3586:	28 2f       	mov	r18, r24
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	3e 83       	std	Y+6, r19	; 0x06
    358c:	2d 83       	std	Y+5, r18	; 0x05
    358e:	8d 81       	ldd	r24, Y+5	; 0x05
    3590:	9e 81       	ldd	r25, Y+6	; 0x06
    3592:	00 97       	sbiw	r24, 0x00	; 0
    3594:	c9 f0       	breq	.+50     	; 0x35c8 <DIO_u8SetpinValue+0x204>
    3596:	2d 81       	ldd	r18, Y+5	; 0x05
    3598:	3e 81       	ldd	r19, Y+6	; 0x06
    359a:	21 30       	cpi	r18, 0x01	; 1
    359c:	31 05       	cpc	r19, r1
    359e:	49 f5       	brne	.+82     	; 0x35f2 <DIO_u8SetpinValue+0x22e>
        {
            case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,copy_u8pinID);break;
    35a0:	a2 e3       	ldi	r26, 0x32	; 50
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e2 e3       	ldi	r30, 0x32	; 50
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	48 2f       	mov	r20, r24
    35ac:	8b 81       	ldd	r24, Y+3	; 0x03
    35ae:	28 2f       	mov	r18, r24
    35b0:	30 e0       	ldi	r19, 0x00	; 0
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	02 2e       	mov	r0, r18
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <DIO_u8SetpinValue+0x1fa>
    35ba:	88 0f       	add	r24, r24
    35bc:	99 1f       	adc	r25, r25
    35be:	0a 94       	dec	r0
    35c0:	e2 f7       	brpl	.-8      	; 0x35ba <DIO_u8SetpinValue+0x1f6>
    35c2:	84 2b       	or	r24, r20
    35c4:	8c 93       	st	X, r24
    35c6:	1a c0       	rjmp	.+52     	; 0x35fc <DIO_u8SetpinValue+0x238>
            case DIO_u8_LOW :CLR_BIT(DIO_u8_PORTD_REG,copy_u8pinID);break;
    35c8:	a2 e3       	ldi	r26, 0x32	; 50
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	e2 e3       	ldi	r30, 0x32	; 50
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	48 2f       	mov	r20, r24
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	28 2f       	mov	r18, r24
    35d8:	30 e0       	ldi	r19, 0x00	; 0
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	02 2e       	mov	r0, r18
    35e0:	02 c0       	rjmp	.+4      	; 0x35e6 <DIO_u8SetpinValue+0x222>
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	0a 94       	dec	r0
    35e8:	e2 f7       	brpl	.-8      	; 0x35e2 <DIO_u8SetpinValue+0x21e>
    35ea:	80 95       	com	r24
    35ec:	84 23       	and	r24, r20
    35ee:	8c 93       	st	X, r24
    35f0:	05 c0       	rjmp	.+10     	; 0x35fc <DIO_u8SetpinValue+0x238>
            default :Local_u8ErrorState=STD_TYBES_NOK;
    35f2:	19 82       	std	Y+1, r1	; 0x01
    35f4:	03 c0       	rjmp	.+6      	; 0x35fc <DIO_u8SetpinValue+0x238>
        }break;
    default:Local_u8ErrorState=STD_TYBES_NOK;}
    35f6:	19 82       	std	Y+1, r1	; 0x01
    35f8:	01 c0       	rjmp	.+2      	; 0x35fc <DIO_u8SetpinValue+0x238>

    }
    else{Local_u8ErrorState=STD_TYBES_NOK;}
    35fa:	19 82       	std	Y+1, r1	; 0x01
	return Local_u8ErrorState ;}
    35fc:	89 81       	ldd	r24, Y+1	; 0x01
    35fe:	2e 96       	adiw	r28, 0x0e	; 14
    3600:	0f b6       	in	r0, 0x3f	; 63
    3602:	f8 94       	cli
    3604:	de bf       	out	0x3e, r29	; 62
    3606:	0f be       	out	0x3f, r0	; 63
    3608:	cd bf       	out	0x3d, r28	; 61
    360a:	cf 91       	pop	r28
    360c:	df 91       	pop	r29
    360e:	08 95       	ret

00003610 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue             (u8 copy_u8portID,u8 copy_u8pinID,u8 * copy_pu8Returnedpinvalue)
{
    3610:	df 93       	push	r29
    3612:	cf 93       	push	r28
    3614:	cd b7       	in	r28, 0x3d	; 61
    3616:	de b7       	in	r29, 0x3e	; 62
    3618:	28 97       	sbiw	r28, 0x08	; 8
    361a:	0f b6       	in	r0, 0x3f	; 63
    361c:	f8 94       	cli
    361e:	de bf       	out	0x3e, r29	; 62
    3620:	0f be       	out	0x3f, r0	; 63
    3622:	cd bf       	out	0x3d, r28	; 61
    3624:	8b 83       	std	Y+3, r24	; 0x03
    3626:	6c 83       	std	Y+4, r22	; 0x04
    3628:	5e 83       	std	Y+6, r21	; 0x06
    362a:	4d 83       	std	Y+5, r20	; 0x05
   u8 Local_u8ErrorState=STD_TYBES_OK;
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	8a 83       	std	Y+2, r24	; 0x02
    u8 local_pinvalue;
   if ((copy_u8portID<=DIO_u8_PORTD )&&(copy_u8pinID <=DIO_u8_PIN7 )&&(copy_pu8Returnedpinvalue !=NULL))
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	84 30       	cpi	r24, 0x04	; 4
    3634:	08 f0       	brcs	.+2      	; 0x3638 <DIO_u8GetPinValue+0x28>
    3636:	9e c0       	rjmp	.+316    	; 0x3774 <DIO_u8GetPinValue+0x164>
    3638:	8c 81       	ldd	r24, Y+4	; 0x04
    363a:	88 30       	cpi	r24, 0x08	; 8
    363c:	08 f0       	brcs	.+2      	; 0x3640 <DIO_u8GetPinValue+0x30>
    363e:	9a c0       	rjmp	.+308    	; 0x3774 <DIO_u8GetPinValue+0x164>
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	09 f4       	brne	.+2      	; 0x364a <DIO_u8GetPinValue+0x3a>
    3648:	95 c0       	rjmp	.+298    	; 0x3774 <DIO_u8GetPinValue+0x164>
    {switch(copy_u8portID){
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	28 2f       	mov	r18, r24
    364e:	30 e0       	ldi	r19, 0x00	; 0
    3650:	38 87       	std	Y+8, r19	; 0x08
    3652:	2f 83       	std	Y+7, r18	; 0x07
    3654:	4f 81       	ldd	r20, Y+7	; 0x07
    3656:	58 85       	ldd	r21, Y+8	; 0x08
    3658:	41 30       	cpi	r20, 0x01	; 1
    365a:	51 05       	cpc	r21, r1
    365c:	a9 f1       	breq	.+106    	; 0x36c8 <DIO_u8GetPinValue+0xb8>
    365e:	8f 81       	ldd	r24, Y+7	; 0x07
    3660:	98 85       	ldd	r25, Y+8	; 0x08
    3662:	82 30       	cpi	r24, 0x02	; 2
    3664:	91 05       	cpc	r25, r1
    3666:	34 f4       	brge	.+12     	; 0x3674 <DIO_u8GetPinValue+0x64>
    3668:	2f 81       	ldd	r18, Y+7	; 0x07
    366a:	38 85       	ldd	r19, Y+8	; 0x08
    366c:	21 15       	cp	r18, r1
    366e:	31 05       	cpc	r19, r1
    3670:	71 f0       	breq	.+28     	; 0x368e <DIO_u8GetPinValue+0x7e>
    3672:	80 c0       	rjmp	.+256    	; 0x3774 <DIO_u8GetPinValue+0x164>
    3674:	4f 81       	ldd	r20, Y+7	; 0x07
    3676:	58 85       	ldd	r21, Y+8	; 0x08
    3678:	42 30       	cpi	r20, 0x02	; 2
    367a:	51 05       	cpc	r21, r1
    367c:	09 f4       	brne	.+2      	; 0x3680 <DIO_u8GetPinValue+0x70>
    367e:	41 c0       	rjmp	.+130    	; 0x3702 <DIO_u8GetPinValue+0xf2>
    3680:	8f 81       	ldd	r24, Y+7	; 0x07
    3682:	98 85       	ldd	r25, Y+8	; 0x08
    3684:	83 30       	cpi	r24, 0x03	; 3
    3686:	91 05       	cpc	r25, r1
    3688:	09 f4       	brne	.+2      	; 0x368c <DIO_u8GetPinValue+0x7c>
    368a:	58 c0       	rjmp	.+176    	; 0x373c <DIO_u8GetPinValue+0x12c>
    368c:	73 c0       	rjmp	.+230    	; 0x3774 <DIO_u8GetPinValue+0x164>
    case DIO_u8_PORTA:local_pinvalue=GET_BIT(DIO_u8_PINA_REG,copy_u8pinID);
    368e:	e9 e3       	ldi	r30, 0x39	; 57
    3690:	f0 e0       	ldi	r31, 0x00	; 0
    3692:	80 81       	ld	r24, Z
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	8c 81       	ldd	r24, Y+4	; 0x04
    369a:	88 2f       	mov	r24, r24
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a9 01       	movw	r20, r18
    36a0:	02 c0       	rjmp	.+4      	; 0x36a6 <DIO_u8GetPinValue+0x96>
    36a2:	55 95       	asr	r21
    36a4:	47 95       	ror	r20
    36a6:	8a 95       	dec	r24
    36a8:	e2 f7       	brpl	.-8      	; 0x36a2 <DIO_u8GetPinValue+0x92>
    36aa:	ca 01       	movw	r24, r20
    36ac:	81 70       	andi	r24, 0x01	; 1
    36ae:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	88 23       	and	r24, r24
    36b4:	21 f4       	brne	.+8      	; 0x36be <DIO_u8GetPinValue+0xae>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    36b6:	ed 81       	ldd	r30, Y+5	; 0x05
    36b8:	fe 81       	ldd	r31, Y+6	; 0x06
    36ba:	10 82       	st	Z, r1
    36bc:	5b c0       	rjmp	.+182    	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    36be:	ed 81       	ldd	r30, Y+5	; 0x05
    36c0:	fe 81       	ldd	r31, Y+6	; 0x06
    36c2:	81 e0       	ldi	r24, 0x01	; 1
    36c4:	80 83       	st	Z, r24
    36c6:	56 c0       	rjmp	.+172    	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
       break;
    case DIO_u8_PORTB:local_pinvalue=GET_BIT(DIO_u8_PINB_REG,copy_u8pinID);
    36c8:	e6 e3       	ldi	r30, 0x36	; 54
    36ca:	f0 e0       	ldi	r31, 0x00	; 0
    36cc:	80 81       	ld	r24, Z
    36ce:	28 2f       	mov	r18, r24
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	8c 81       	ldd	r24, Y+4	; 0x04
    36d4:	88 2f       	mov	r24, r24
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	a9 01       	movw	r20, r18
    36da:	02 c0       	rjmp	.+4      	; 0x36e0 <DIO_u8GetPinValue+0xd0>
    36dc:	55 95       	asr	r21
    36de:	47 95       	ror	r20
    36e0:	8a 95       	dec	r24
    36e2:	e2 f7       	brpl	.-8      	; 0x36dc <DIO_u8GetPinValue+0xcc>
    36e4:	ca 01       	movw	r24, r20
    36e6:	81 70       	andi	r24, 0x01	; 1
    36e8:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	88 23       	and	r24, r24
    36ee:	21 f4       	brne	.+8      	; 0x36f8 <DIO_u8GetPinValue+0xe8>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    36f0:	ed 81       	ldd	r30, Y+5	; 0x05
    36f2:	fe 81       	ldd	r31, Y+6	; 0x06
    36f4:	10 82       	st	Z, r1
    36f6:	3e c0       	rjmp	.+124    	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    36f8:	ed 81       	ldd	r30, Y+5	; 0x05
    36fa:	fe 81       	ldd	r31, Y+6	; 0x06
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	80 83       	st	Z, r24
    3700:	39 c0       	rjmp	.+114    	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
    break;

    case DIO_u8_PORTC:local_pinvalue=GET_BIT(DIO_u8_PINC_REG,copy_u8pinID);
    3702:	e3 e3       	ldi	r30, 0x33	; 51
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	80 81       	ld	r24, Z
    3708:	28 2f       	mov	r18, r24
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	8c 81       	ldd	r24, Y+4	; 0x04
    370e:	88 2f       	mov	r24, r24
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	a9 01       	movw	r20, r18
    3714:	02 c0       	rjmp	.+4      	; 0x371a <DIO_u8GetPinValue+0x10a>
    3716:	55 95       	asr	r21
    3718:	47 95       	ror	r20
    371a:	8a 95       	dec	r24
    371c:	e2 f7       	brpl	.-8      	; 0x3716 <DIO_u8GetPinValue+0x106>
    371e:	ca 01       	movw	r24, r20
    3720:	81 70       	andi	r24, 0x01	; 1
    3722:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    3724:	89 81       	ldd	r24, Y+1	; 0x01
    3726:	88 23       	and	r24, r24
    3728:	21 f4       	brne	.+8      	; 0x3732 <DIO_u8GetPinValue+0x122>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    372a:	ed 81       	ldd	r30, Y+5	; 0x05
    372c:	fe 81       	ldd	r31, Y+6	; 0x06
    372e:	10 82       	st	Z, r1
    3730:	21 c0       	rjmp	.+66     	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    3732:	ed 81       	ldd	r30, Y+5	; 0x05
    3734:	fe 81       	ldd	r31, Y+6	; 0x06
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	80 83       	st	Z, r24
    373a:	1c c0       	rjmp	.+56     	; 0x3774 <DIO_u8GetPinValue+0x164>
    }break;

    case DIO_u8_PORTD:local_pinvalue=GET_BIT(DIO_u8_PIND_REG,copy_u8pinID);
    373c:	e0 e3       	ldi	r30, 0x30	; 48
    373e:	f0 e0       	ldi	r31, 0x00	; 0
    3740:	80 81       	ld	r24, Z
    3742:	28 2f       	mov	r18, r24
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	8c 81       	ldd	r24, Y+4	; 0x04
    3748:	88 2f       	mov	r24, r24
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	a9 01       	movw	r20, r18
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <DIO_u8GetPinValue+0x144>
    3750:	55 95       	asr	r21
    3752:	47 95       	ror	r20
    3754:	8a 95       	dec	r24
    3756:	e2 f7       	brpl	.-8      	; 0x3750 <DIO_u8GetPinValue+0x140>
    3758:	ca 01       	movw	r24, r20
    375a:	81 70       	andi	r24, 0x01	; 1
    375c:	89 83       	std	Y+1, r24	; 0x01
   if(local_pinvalue==0)
    375e:	89 81       	ldd	r24, Y+1	; 0x01
    3760:	88 23       	and	r24, r24
    3762:	21 f4       	brne	.+8      	; 0x376c <DIO_u8GetPinValue+0x15c>
   {
     * copy_pu8Returnedpinvalue   =DIO_u8_LOW;
    3764:	ed 81       	ldd	r30, Y+5	; 0x05
    3766:	fe 81       	ldd	r31, Y+6	; 0x06
    3768:	10 82       	st	Z, r1
    376a:	04 c0       	rjmp	.+8      	; 0x3774 <DIO_u8GetPinValue+0x164>
    }
    else
    {
         * copy_pu8Returnedpinvalue   =DIO_u8_HIGH;
    376c:	ed 81       	ldd	r30, Y+5	; 0x05
    376e:	fe 81       	ldd	r31, Y+6	; 0x06
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	80 83       	st	Z, r24
    }
    break;
}}	return Local_u8ErrorState ;}
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	28 96       	adiw	r28, 0x08	; 8
    3778:	0f b6       	in	r0, 0x3f	; 63
    377a:	f8 94       	cli
    377c:	de bf       	out	0x3e, r29	; 62
    377e:	0f be       	out	0x3f, r0	; 63
    3780:	cd bf       	out	0x3d, r28	; 61
    3782:	cf 91       	pop	r28
    3784:	df 91       	pop	r29
    3786:	08 95       	ret

00003788 <DIO_u8setPortDirection>:

u8 DIO_u8setPortDirection       (u8 copy_u8portID,u8 copy_u8PortDirection)
{
    3788:	df 93       	push	r29
    378a:	cf 93       	push	r28
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	2d 97       	sbiw	r28, 0x0d	; 13
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	8a 83       	std	Y+2, r24	; 0x02
    379e:	6b 83       	std	Y+3, r22	; 0x03
    	   u8 Local_u8ErrorState=STD_TYBES_OK;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	89 83       	std	Y+1, r24	; 0x01
    	    if((copy_u8PortDirection==DIO_u8_OUTPUT)||(copy_u8PortDirection==DIO_u8_INPUT))
    37a4:	8b 81       	ldd	r24, Y+3	; 0x03
    37a6:	81 30       	cpi	r24, 0x01	; 1
    37a8:	21 f0       	breq	.+8      	; 0x37b2 <DIO_u8setPortDirection+0x2a>
    37aa:	8b 81       	ldd	r24, Y+3	; 0x03
    37ac:	88 23       	and	r24, r24
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <DIO_u8setPortDirection+0x2a>
    37b0:	7d c0       	rjmp	.+250    	; 0x38ac <DIO_u8setPortDirection+0x124>
                {
                    switch(copy_u8portID)
    37b2:	8a 81       	ldd	r24, Y+2	; 0x02
    37b4:	28 2f       	mov	r18, r24
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	3d 87       	std	Y+13, r19	; 0x0d
    37ba:	2c 87       	std	Y+12, r18	; 0x0c
    37bc:	8c 85       	ldd	r24, Y+12	; 0x0c
    37be:	9d 85       	ldd	r25, Y+13	; 0x0d
    37c0:	81 30       	cpi	r24, 0x01	; 1
    37c2:	91 05       	cpc	r25, r1
    37c4:	71 f1       	breq	.+92     	; 0x3822 <DIO_u8setPortDirection+0x9a>
    37c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    37c8:	3d 85       	ldd	r19, Y+13	; 0x0d
    37ca:	22 30       	cpi	r18, 0x02	; 2
    37cc:	31 05       	cpc	r19, r1
    37ce:	2c f4       	brge	.+10     	; 0x37da <DIO_u8setPortDirection+0x52>
    37d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    37d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    37d4:	00 97       	sbiw	r24, 0x00	; 0
    37d6:	69 f0       	breq	.+26     	; 0x37f2 <DIO_u8setPortDirection+0x6a>
    37d8:	6b c0       	rjmp	.+214    	; 0x38b0 <DIO_u8setPortDirection+0x128>
    37da:	2c 85       	ldd	r18, Y+12	; 0x0c
    37dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    37de:	22 30       	cpi	r18, 0x02	; 2
    37e0:	31 05       	cpc	r19, r1
    37e2:	b1 f1       	breq	.+108    	; 0x3850 <DIO_u8setPortDirection+0xc8>
    37e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    37e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    37e8:	83 30       	cpi	r24, 0x03	; 3
    37ea:	91 05       	cpc	r25, r1
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <DIO_u8setPortDirection+0x68>
    37ee:	47 c0       	rjmp	.+142    	; 0x387e <DIO_u8setPortDirection+0xf6>
    37f0:	5f c0       	rjmp	.+190    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                    {
                    case DIO_u8_PORTA:
                        switch(copy_u8PortDirection)
    37f2:	8b 81       	ldd	r24, Y+3	; 0x03
    37f4:	28 2f       	mov	r18, r24
    37f6:	30 e0       	ldi	r19, 0x00	; 0
    37f8:	3b 87       	std	Y+11, r19	; 0x0b
    37fa:	2a 87       	std	Y+10, r18	; 0x0a
    37fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3800:	00 97       	sbiw	r24, 0x00	; 0
    3802:	59 f0       	breq	.+22     	; 0x381a <DIO_u8setPortDirection+0x92>
    3804:	2a 85       	ldd	r18, Y+10	; 0x0a
    3806:	3b 85       	ldd	r19, Y+11	; 0x0b
    3808:	21 30       	cpi	r18, 0x01	; 1
    380a:	31 05       	cpc	r19, r1
    380c:	09 f0       	breq	.+2      	; 0x3810 <DIO_u8setPortDirection+0x88>
    380e:	50 c0       	rjmp	.+160    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRA_REG=0xff;break;
    3810:	ea e3       	ldi	r30, 0x3A	; 58
    3812:	f0 e0       	ldi	r31, 0x00	; 0
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	80 83       	st	Z, r24
    3818:	4b c0       	rjmp	.+150    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRA_REG=0x00;break;
    381a:	ea e3       	ldi	r30, 0x3A	; 58
    381c:	f0 e0       	ldi	r31, 0x00	; 0
    381e:	10 82       	st	Z, r1
    3820:	47 c0       	rjmp	.+142    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTB:
                        switch(copy_u8PortDirection)
    3822:	8b 81       	ldd	r24, Y+3	; 0x03
    3824:	28 2f       	mov	r18, r24
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	39 87       	std	Y+9, r19	; 0x09
    382a:	28 87       	std	Y+8, r18	; 0x08
    382c:	88 85       	ldd	r24, Y+8	; 0x08
    382e:	99 85       	ldd	r25, Y+9	; 0x09
    3830:	00 97       	sbiw	r24, 0x00	; 0
    3832:	51 f0       	breq	.+20     	; 0x3848 <DIO_u8setPortDirection+0xc0>
    3834:	28 85       	ldd	r18, Y+8	; 0x08
    3836:	39 85       	ldd	r19, Y+9	; 0x09
    3838:	21 30       	cpi	r18, 0x01	; 1
    383a:	31 05       	cpc	r19, r1
    383c:	c9 f5       	brne	.+114    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRB_REG=0xff;break;
    383e:	e7 e3       	ldi	r30, 0x37	; 55
    3840:	f0 e0       	ldi	r31, 0x00	; 0
    3842:	8f ef       	ldi	r24, 0xFF	; 255
    3844:	80 83       	st	Z, r24
    3846:	34 c0       	rjmp	.+104    	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRB_REG=0x00;break;
    3848:	e7 e3       	ldi	r30, 0x37	; 55
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	10 82       	st	Z, r1
    384e:	30 c0       	rjmp	.+96     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTC:
                        switch(copy_u8PortDirection)
    3850:	8b 81       	ldd	r24, Y+3	; 0x03
    3852:	28 2f       	mov	r18, r24
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	3f 83       	std	Y+7, r19	; 0x07
    3858:	2e 83       	std	Y+6, r18	; 0x06
    385a:	8e 81       	ldd	r24, Y+6	; 0x06
    385c:	9f 81       	ldd	r25, Y+7	; 0x07
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	51 f0       	breq	.+20     	; 0x3876 <DIO_u8setPortDirection+0xee>
    3862:	2e 81       	ldd	r18, Y+6	; 0x06
    3864:	3f 81       	ldd	r19, Y+7	; 0x07
    3866:	21 30       	cpi	r18, 0x01	; 1
    3868:	31 05       	cpc	r19, r1
    386a:	11 f5       	brne	.+68     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRC_REG=0xff;break;
    386c:	e4 e3       	ldi	r30, 0x34	; 52
    386e:	f0 e0       	ldi	r31, 0x00	; 0
    3870:	8f ef       	ldi	r24, 0xFF	; 255
    3872:	80 83       	st	Z, r24
    3874:	1d c0       	rjmp	.+58     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRC_REG=0x00;break;
    3876:	e4 e3       	ldi	r30, 0x34	; 52
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	10 82       	st	Z, r1
    387c:	19 c0       	rjmp	.+50     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        }
                        break;
                        case DIO_u8_PORTD:
                        switch(copy_u8PortDirection)
    387e:	8b 81       	ldd	r24, Y+3	; 0x03
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	3d 83       	std	Y+5, r19	; 0x05
    3886:	2c 83       	std	Y+4, r18	; 0x04
    3888:	8c 81       	ldd	r24, Y+4	; 0x04
    388a:	9d 81       	ldd	r25, Y+5	; 0x05
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	51 f0       	breq	.+20     	; 0x38a4 <DIO_u8setPortDirection+0x11c>
    3890:	2c 81       	ldd	r18, Y+4	; 0x04
    3892:	3d 81       	ldd	r19, Y+5	; 0x05
    3894:	21 30       	cpi	r18, 0x01	; 1
    3896:	31 05       	cpc	r19, r1
    3898:	59 f4       	brne	.+22     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        {case DIO_u8_OUTPUT :DIO_u8_DDRD_REG=0xff;break;
    389a:	e1 e3       	ldi	r30, 0x31	; 49
    389c:	f0 e0       	ldi	r31, 0x00	; 0
    389e:	8f ef       	ldi	r24, 0xFF	; 255
    38a0:	80 83       	st	Z, r24
    38a2:	06 c0       	rjmp	.+12     	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        case DIO_u8_INPUT :DIO_u8_DDRD_REG=0x00;break;
    38a4:	e1 e3       	ldi	r30, 0x31	; 49
    38a6:	f0 e0       	ldi	r31, 0x00	; 0
    38a8:	10 82       	st	Z, r1
    38aa:	02 c0       	rjmp	.+4      	; 0x38b0 <DIO_u8setPortDirection+0x128>
                        }
                        break;
                    }
                }
            else{Local_u8ErrorState=STD_TYBES_OK;}
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	89 83       	std	Y+1, r24	; 0x01
    	return Local_u8ErrorState ;
    38b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    38b2:	2d 96       	adiw	r28, 0x0d	; 13
    38b4:	0f b6       	in	r0, 0x3f	; 63
    38b6:	f8 94       	cli
    38b8:	de bf       	out	0x3e, r29	; 62
    38ba:	0f be       	out	0x3f, r0	; 63
    38bc:	cd bf       	out	0x3d, r28	; 61
    38be:	cf 91       	pop	r28
    38c0:	df 91       	pop	r29
    38c2:	08 95       	ret

000038c4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue           (u8 copy_u8portID,u8 copy_u8PortValue)
{
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <DIO_u8SetPortValue+0x6>
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <DIO_u8SetPortValue+0x8>
    38cc:	0f 92       	push	r0
    38ce:	cd b7       	in	r28, 0x3d	; 61
    38d0:	de b7       	in	r29, 0x3e	; 62
    38d2:	8a 83       	std	Y+2, r24	; 0x02
    38d4:	6b 83       	std	Y+3, r22	; 0x03
  u8  Local_u8ErrorState=STD_TYBES_OK;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	89 83       	std	Y+1, r24	; 0x01
  switch(copy_u8portID)
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
    38dc:	28 2f       	mov	r18, r24
    38de:	30 e0       	ldi	r19, 0x00	; 0
    38e0:	3d 83       	std	Y+5, r19	; 0x05
    38e2:	2c 83       	std	Y+4, r18	; 0x04
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
    38e6:	9d 81       	ldd	r25, Y+5	; 0x05
    38e8:	81 30       	cpi	r24, 0x01	; 1
    38ea:	91 05       	cpc	r25, r1
    38ec:	d1 f0       	breq	.+52     	; 0x3922 <DIO_u8SetPortValue+0x5e>
    38ee:	2c 81       	ldd	r18, Y+4	; 0x04
    38f0:	3d 81       	ldd	r19, Y+5	; 0x05
    38f2:	22 30       	cpi	r18, 0x02	; 2
    38f4:	31 05       	cpc	r19, r1
    38f6:	2c f4       	brge	.+10     	; 0x3902 <DIO_u8SetPortValue+0x3e>
    38f8:	8c 81       	ldd	r24, Y+4	; 0x04
    38fa:	9d 81       	ldd	r25, Y+5	; 0x05
    38fc:	00 97       	sbiw	r24, 0x00	; 0
    38fe:	61 f0       	breq	.+24     	; 0x3918 <DIO_u8SetPortValue+0x54>
    3900:	1f c0       	rjmp	.+62     	; 0x3940 <DIO_u8SetPortValue+0x7c>
    3902:	2c 81       	ldd	r18, Y+4	; 0x04
    3904:	3d 81       	ldd	r19, Y+5	; 0x05
    3906:	22 30       	cpi	r18, 0x02	; 2
    3908:	31 05       	cpc	r19, r1
    390a:	81 f0       	breq	.+32     	; 0x392c <DIO_u8SetPortValue+0x68>
    390c:	8c 81       	ldd	r24, Y+4	; 0x04
    390e:	9d 81       	ldd	r25, Y+5	; 0x05
    3910:	83 30       	cpi	r24, 0x03	; 3
    3912:	91 05       	cpc	r25, r1
    3914:	81 f0       	breq	.+32     	; 0x3936 <DIO_u8SetPortValue+0x72>
    3916:	14 c0       	rjmp	.+40     	; 0x3940 <DIO_u8SetPortValue+0x7c>
  {
      case DIO_u8_PORTA: DIO_u8_PORTA_REG=copy_u8PortValue;break;
    3918:	eb e3       	ldi	r30, 0x3B	; 59
    391a:	f0 e0       	ldi	r31, 0x00	; 0
    391c:	8b 81       	ldd	r24, Y+3	; 0x03
    391e:	80 83       	st	Z, r24
    3920:	10 c0       	rjmp	.+32     	; 0x3942 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTB: DIO_u8_PORTB_REG=copy_u8PortValue;break;
    3922:	e8 e3       	ldi	r30, 0x38	; 56
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	8b 81       	ldd	r24, Y+3	; 0x03
    3928:	80 83       	st	Z, r24
    392a:	0b c0       	rjmp	.+22     	; 0x3942 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTC: DIO_u8_PORTC_REG=copy_u8PortValue;break;
    392c:	e5 e3       	ldi	r30, 0x35	; 53
    392e:	f0 e0       	ldi	r31, 0x00	; 0
    3930:	8b 81       	ldd	r24, Y+3	; 0x03
    3932:	80 83       	st	Z, r24
    3934:	06 c0       	rjmp	.+12     	; 0x3942 <DIO_u8SetPortValue+0x7e>
      case DIO_u8_PORTD: DIO_u8_PORTD_REG=copy_u8PortValue;break;
    3936:	e2 e3       	ldi	r30, 0x32	; 50
    3938:	f0 e0       	ldi	r31, 0x00	; 0
    393a:	8b 81       	ldd	r24, Y+3	; 0x03
    393c:	80 83       	st	Z, r24
    393e:	01 c0       	rjmp	.+2      	; 0x3942 <DIO_u8SetPortValue+0x7e>
      default:Local_u8ErrorState=STD_TYBES_NOK;
    3940:	19 82       	std	Y+1, r1	; 0x01
  }
    return Local_u8ErrorState ;
    3942:	89 81       	ldd	r24, Y+1	; 0x01
}
    3944:	0f 90       	pop	r0
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	cf 91       	pop	r28
    3950:	df 91       	pop	r29
    3952:	08 95       	ret

00003954 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue           (u8 copy_u8portID,u8 * copy_pu8ReturenedPortValue)
{
    3954:	df 93       	push	r29
    3956:	cf 93       	push	r28
    3958:	00 d0       	rcall	.+0      	; 0x395a <DIO_u8GetPortValue+0x6>
    395a:	00 d0       	rcall	.+0      	; 0x395c <DIO_u8GetPortValue+0x8>
    395c:	00 d0       	rcall	.+0      	; 0x395e <DIO_u8GetPortValue+0xa>
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	8a 83       	std	Y+2, r24	; 0x02
    3964:	7c 83       	std	Y+4, r23	; 0x04
    3966:	6b 83       	std	Y+3, r22	; 0x03
        	 u8   Local_u8ErrorState=STD_TYBES_OK;
    3968:	81 e0       	ldi	r24, 0x01	; 1
    396a:	89 83       	std	Y+1, r24	; 0x01
        	 if (copy_pu8ReturenedPortValue!= NULL)
    396c:	8b 81       	ldd	r24, Y+3	; 0x03
    396e:	9c 81       	ldd	r25, Y+4	; 0x04
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	e9 f1       	breq	.+122    	; 0x39ee <DIO_u8GetPortValue+0x9a>
             {
                 switch(copy_u8portID)
    3974:	8a 81       	ldd	r24, Y+2	; 0x02
    3976:	28 2f       	mov	r18, r24
    3978:	30 e0       	ldi	r19, 0x00	; 0
    397a:	3e 83       	std	Y+6, r19	; 0x06
    397c:	2d 83       	std	Y+5, r18	; 0x05
    397e:	8d 81       	ldd	r24, Y+5	; 0x05
    3980:	9e 81       	ldd	r25, Y+6	; 0x06
    3982:	81 30       	cpi	r24, 0x01	; 1
    3984:	91 05       	cpc	r25, r1
    3986:	e1 f0       	breq	.+56     	; 0x39c0 <DIO_u8GetPortValue+0x6c>
    3988:	2d 81       	ldd	r18, Y+5	; 0x05
    398a:	3e 81       	ldd	r19, Y+6	; 0x06
    398c:	22 30       	cpi	r18, 0x02	; 2
    398e:	31 05       	cpc	r19, r1
    3990:	2c f4       	brge	.+10     	; 0x399c <DIO_u8GetPortValue+0x48>
    3992:	8d 81       	ldd	r24, Y+5	; 0x05
    3994:	9e 81       	ldd	r25, Y+6	; 0x06
    3996:	00 97       	sbiw	r24, 0x00	; 0
    3998:	61 f0       	breq	.+24     	; 0x39b2 <DIO_u8GetPortValue+0x5e>
    399a:	27 c0       	rjmp	.+78     	; 0x39ea <DIO_u8GetPortValue+0x96>
    399c:	2d 81       	ldd	r18, Y+5	; 0x05
    399e:	3e 81       	ldd	r19, Y+6	; 0x06
    39a0:	22 30       	cpi	r18, 0x02	; 2
    39a2:	31 05       	cpc	r19, r1
    39a4:	a1 f0       	breq	.+40     	; 0x39ce <DIO_u8GetPortValue+0x7a>
    39a6:	8d 81       	ldd	r24, Y+5	; 0x05
    39a8:	9e 81       	ldd	r25, Y+6	; 0x06
    39aa:	83 30       	cpi	r24, 0x03	; 3
    39ac:	91 05       	cpc	r25, r1
    39ae:	b1 f0       	breq	.+44     	; 0x39dc <DIO_u8GetPortValue+0x88>
    39b0:	1c c0       	rjmp	.+56     	; 0x39ea <DIO_u8GetPortValue+0x96>
  {
      case DIO_u8_PORTA:*copy_pu8ReturenedPortValue=DIO_u8_PINA_REG;break;
    39b2:	e9 e3       	ldi	r30, 0x39	; 57
    39b4:	f0 e0       	ldi	r31, 0x00	; 0
    39b6:	80 81       	ld	r24, Z
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	80 83       	st	Z, r24
    39be:	19 c0       	rjmp	.+50     	; 0x39f2 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTB:*copy_pu8ReturenedPortValue=DIO_u8_PINB_REG;break;
    39c0:	e6 e3       	ldi	r30, 0x36	; 54
    39c2:	f0 e0       	ldi	r31, 0x00	; 0
    39c4:	80 81       	ld	r24, Z
    39c6:	eb 81       	ldd	r30, Y+3	; 0x03
    39c8:	fc 81       	ldd	r31, Y+4	; 0x04
    39ca:	80 83       	st	Z, r24
    39cc:	12 c0       	rjmp	.+36     	; 0x39f2 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTC:*copy_pu8ReturenedPortValue=DIO_u8_PINC_REG;break;
    39ce:	e3 e3       	ldi	r30, 0x33	; 51
    39d0:	f0 e0       	ldi	r31, 0x00	; 0
    39d2:	80 81       	ld	r24, Z
    39d4:	eb 81       	ldd	r30, Y+3	; 0x03
    39d6:	fc 81       	ldd	r31, Y+4	; 0x04
    39d8:	80 83       	st	Z, r24
    39da:	0b c0       	rjmp	.+22     	; 0x39f2 <DIO_u8GetPortValue+0x9e>
      case DIO_u8_PORTD:*copy_pu8ReturenedPortValue=DIO_u8_PIND_REG;break;
    39dc:	e0 e3       	ldi	r30, 0x30	; 48
    39de:	f0 e0       	ldi	r31, 0x00	; 0
    39e0:	80 81       	ld	r24, Z
    39e2:	eb 81       	ldd	r30, Y+3	; 0x03
    39e4:	fc 81       	ldd	r31, Y+4	; 0x04
    39e6:	80 83       	st	Z, r24
    39e8:	04 c0       	rjmp	.+8      	; 0x39f2 <DIO_u8GetPortValue+0x9e>
      default:Local_u8ErrorState=STD_TYBES_NOK;
    39ea:	19 82       	std	Y+1, r1	; 0x01
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <DIO_u8GetPortValue+0x9e>
             }
             }
              else{Local_u8ErrorState=STD_TYBES_OK;}
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	89 83       	std	Y+1, r24	; 0x01
        	 return Local_u8ErrorState;
    39f2:	89 81       	ldd	r24, Y+1	; 0x01

}
    39f4:	26 96       	adiw	r28, 0x06	; 6
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <__prologue_saves__>:
    3a06:	2f 92       	push	r2
    3a08:	3f 92       	push	r3
    3a0a:	4f 92       	push	r4
    3a0c:	5f 92       	push	r5
    3a0e:	6f 92       	push	r6
    3a10:	7f 92       	push	r7
    3a12:	8f 92       	push	r8
    3a14:	9f 92       	push	r9
    3a16:	af 92       	push	r10
    3a18:	bf 92       	push	r11
    3a1a:	cf 92       	push	r12
    3a1c:	df 92       	push	r13
    3a1e:	ef 92       	push	r14
    3a20:	ff 92       	push	r15
    3a22:	0f 93       	push	r16
    3a24:	1f 93       	push	r17
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	cd b7       	in	r28, 0x3d	; 61
    3a2c:	de b7       	in	r29, 0x3e	; 62
    3a2e:	ca 1b       	sub	r28, r26
    3a30:	db 0b       	sbc	r29, r27
    3a32:	0f b6       	in	r0, 0x3f	; 63
    3a34:	f8 94       	cli
    3a36:	de bf       	out	0x3e, r29	; 62
    3a38:	0f be       	out	0x3f, r0	; 63
    3a3a:	cd bf       	out	0x3d, r28	; 61
    3a3c:	09 94       	ijmp

00003a3e <__epilogue_restores__>:
    3a3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3a40:	39 88       	ldd	r3, Y+17	; 0x11
    3a42:	48 88       	ldd	r4, Y+16	; 0x10
    3a44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a50:	b9 84       	ldd	r11, Y+9	; 0x09
    3a52:	c8 84       	ldd	r12, Y+8	; 0x08
    3a54:	df 80       	ldd	r13, Y+7	; 0x07
    3a56:	ee 80       	ldd	r14, Y+6	; 0x06
    3a58:	fd 80       	ldd	r15, Y+5	; 0x05
    3a5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3a5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3a5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3a60:	b9 81       	ldd	r27, Y+1	; 0x01
    3a62:	ce 0f       	add	r28, r30
    3a64:	d1 1d       	adc	r29, r1
    3a66:	0f b6       	in	r0, 0x3f	; 63
    3a68:	f8 94       	cli
    3a6a:	de bf       	out	0x3e, r29	; 62
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	cd bf       	out	0x3d, r28	; 61
    3a70:	ed 01       	movw	r28, r26
    3a72:	08 95       	ret

00003a74 <_exit>:
    3a74:	f8 94       	cli

00003a76 <__stop_program>:
    3a76:	ff cf       	rjmp	.-2      	; 0x3a76 <__stop_program>
